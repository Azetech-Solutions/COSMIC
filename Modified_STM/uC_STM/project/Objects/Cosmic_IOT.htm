<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Cosmic_IOT.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Cosmic_IOT.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Fri Aug  4 19:49:17 2023
<BR><P>
<H3>Maximum Stack Usage =        240 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; SysOs_Main &rArr; FUN_SYS_Internal_Execute_Tasks &rArr; SIMCOM_MainFunction &rArr; SIMCOM_Callback &rArr; DTMFStateMachine &rArr; updateSendData &rArr; ComIf_Transmit &rArr; ComIf_EncodeFromShadowToChannelBuffer &rArr; ComIf_ErrorNotify
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[63]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">NMI_Handler</a><BR>
 <LI><a href="#[b]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">HardFault_Handler</a><BR>
 <LI><a href="#[c]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SVC_Handler</a><BR>
 <LI><a href="#[d]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">PendSV_Handler</a><BR>
 <LI><a href="#[19]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[19]">ADC1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[1]">ADC_RxCbk</a> from avrstatusmessagehandling.o(.text.ADC_RxCbk) referenced 2 times from comif_config.o(.data.ComIfRxMsgCfg_AVR)
 <LI><a href="#[0]">AVR_IO_StatusRxCbk</a> from avrstatusmessagehandling.o(.text.AVR_IO_StatusRxCbk) referenced 2 times from comif_config.o(.data.ComIfRxMsgCfg_AVR)
 <LI><a href="#[7]">AVR_Transmit</a> from mqtt_application.o(.text.AVR_Transmit) referenced 2 times from comif_config.o(.data.ComIf_ChannelConfig)
 <LI><a href="#[6]">Cloud_ComIf_ErrorNotification</a> from mqtt_application.o(.text.Cloud_ComIf_ErrorNotification) referenced 2 times from comif_config.o(.data.ComIf_ChannelConfig)
 <LI><a href="#[5]">Cloud_Transmit</a> from mqtt_application.o(.text.Cloud_Transmit) referenced 2 times from comif_config.o(.data.ComIf_ChannelConfig)
 <LI><a href="#[18]">DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[16]">DMA1_Channel1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[17]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[4]">DTMFCallMessageCbk</a> from cs_iot.o(.text.DTMFCallMessageCbk) referenced 2 times from comif_config.o(.data.ComIfRxMsgCfg_DTMF)
 <LI><a href="#[3]">DTMFMessageRxCbk</a> from cs_iot.o(.text.DTMFMessageRxCbk) referenced 2 times from comif_config.o(.data.ComIfRxMsgCfg_DTMF)
 <LI><a href="#[8]">DTMF_Transmit</a> from cs_iot.o(.text.DTMF_Transmit) referenced 2 times from comif_config.o(.data.ComIf_ChannelConfig)
 <LI><a href="#[13]">EXTI0_1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[14]">EXTI2_3_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[15]">EXTI4_15_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[20]">I2C1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[21]">I2C2_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[2]">IO_cmdData_CloudRxCbk</a> from mqtt_application.o(.text.IO_cmdData_CloudRxCbk) referenced 2 times from comif_config.o(.data.ComIfRxMsgCfg_Cloud)
 <LI><a href="#[2c]">MQTT_CALLBACK</a> from simcom_mqtt.o(.text.MQTT_CALLBACK) referenced from simcom_mqtt.o(.text.MQTT_StateMachine)
 <LI><a href="#[2b]">MQTT_Publish_CallBack</a> from simcom_mqtt_publish.o(.text.MQTT_Publish_CallBack) referenced from simcom_mqtt_publish.o(.text.MQTT_Publish_StateMachine)
 <LI><a href="#[a]">NMI_Handler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[d]">PendSV_Handler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[10]">RTC_TAMP_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[9]">Reset_Handler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[2e]">SIMCOM_Clock_Job_Callback</a> from simcom_clock.o(.text.SIMCOM_Clock_Job_Callback) referenced from simcom_clock.o(.text.SIMCOM_Clock_MainFunction)
 <LI><a href="#[2f]">SIMCOM_SSL_Configration_Callback</a> from simcom_mqtt_ssl.o(.text.SIMCOM_SSL_Configration_Callback) referenced from simcom_mqtt_ssl.o(.text.SIMCOM_SSL_CONFIG_MainFunction)
 <LI><a href="#[30]">SIMCOM_StateMachine_Callback</a> from simcom_state.o(.text.SIMCOM_StateMachine_Callback) referenced from simcom_state.o(.text.SIMCOM_StateMachine)
 <LI><a href="#[22]">SPI1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[23]">SPI2_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[c]">SVC_Handler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[2d]">SendMSG_CallBack</a> from simcom_message.o(.text.SendMSG_CallBack) referenced from simcom_message.o(.text.MessageControl)
 <LI><a href="#[e]">SysTick_Handler</a> from systick_interrupt.o(.text.SysTick_Handler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[26]">SystemInit</a> from system_stm32g0xx.o(.text.SystemInit) referenced from startup_stm32g030xx.o(.text)
 <LI><a href="#[1d]">TIM14_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[1e]">TIM16_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[1f]">TIM17_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[1a]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[1b]">TIM1_CC_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[1c]">TIM3_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[24]">USART1_IRQHandler</a> from uart_driver.o(.text.USART1_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[25]">USART2_IRQHandler</a> from uart_driver.o(.text.USART2_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[f]">WWDG_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[27]">__main</a> from __main.o(!!!main) referenced from startup_stm32g030xx.o(.text)
 <LI><a href="#[2a]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[29]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[28]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[27]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(.text)
</UL>
<P><STRONG><a name="[31]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[33]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[b2]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[b3]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[b4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[4a]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[34]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[35]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[37]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[3f]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[b5]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[39]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[b7]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[b9]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[ba]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[bb]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[3b]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[bc]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[bd]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[be]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[bf]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[c0]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[c1]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[c2]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[c3]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[c4]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[c5]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[c6]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[c7]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[c8]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[c9]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[ca]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[44]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[cb]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[cc]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[cd]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[ce]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[cf]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[d0]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[d1]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[32]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[d2]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[3c]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3e]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[d3]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[40]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; SysOs_Main &rArr; FUN_SYS_Internal_Execute_Tasks &rArr; SIMCOM_MainFunction &rArr; SIMCOM_Callback &rArr; DTMFStateMachine &rArr; updateSendData &rArr; ComIf_Transmit &rArr; ComIf_EncodeFromShadowToChannelBuffer &rArr; ComIf_ErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[d4]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[65]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[43]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[d5]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[45]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_TAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32g030xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[47]"></a>__2sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APN_Selection
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageControl
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DtmfMessageCallFunc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish_StateMachine
</UL>

<P><STRONG><a name="[49]"></a>__printf</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[4b]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[36]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[52]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APN_Selection
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_GetCSV_Number_fromBuffer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringHelper_SplitAndGet_Number
</UL>

<P><STRONG><a name="[ae]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringHelper_GetPointerAfter
</UL>

<P><STRONG><a name="[9f]"></a>memcmp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_RxMessageCallBack
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_StateMachine
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Callback
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringHelper_startsWith
</UL>

<P><STRONG><a name="[a4]"></a>strcpy</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Clock_ParseDateTime_InResponse
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_GetCSV_Number_fromBuffer
</UL>

<P><STRONG><a name="[82]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageControl
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DtmfMessageCallFunc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish_StateMachine
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_AppMain
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringHelper_startsWith
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringHelper_removeChar
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringHelper_GetPointerAfter
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_Transmit
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_cmdData_CloudRxCbk
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_RxMessageCallBack
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DtmfMessageCallFunc
</UL>

<P><STRONG><a name="[d7]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__aeabi_memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTMF_Transmit
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVR_Transmit
</UL>

<P><STRONG><a name="[59]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[58]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Clock_ParseDateTime_InResponse
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_RxMessageCallBack
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COSMIC_Generic_SIMCOM_Callback
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_GetCSV_Number_fromBuffer
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageControl
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_AppMain
</UL>

<P><STRONG><a name="[d8]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Schedule_Job
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageControl
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DtmfMessageCallFunc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_MainFunction
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringHelper_SplitAndGet_Number
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[96]"></a>strcmp</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, strcmpv6m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageControl
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish_StateMachine
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_StateMachine
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_SSL_CONFIG_MainFunction
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_StateMachine
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[da]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[dd]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[48]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[28]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[5e]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[38]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[54]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[50]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[df]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[e0]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[60]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[3d]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3a]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[61]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[42]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[46]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[e1]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>ADC_RxCbk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, avrstatusmessagehandling.o(.text.ADC_RxCbk))
<BR>[Address Reference Count : 1]<UL><LI> comif_config.o(.data.ComIfRxMsgCfg_AVR)
</UL>
<P><STRONG><a name="[66]"></a>APN_Selection</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, simcom_state.o(.text.APN_Selection))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = APN_Selection &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_StateMachine
</UL>

<P><STRONG><a name="[0]"></a>AVR_IO_StatusRxCbk</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, avrstatusmessagehandling.o(.text.AVR_IO_StatusRxCbk))
<BR>[Address Reference Count : 1]<UL><LI> comif_config.o(.data.ComIfRxMsgCfg_AVR)
</UL>
<P><STRONG><a name="[7]"></a>AVR_Transmit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mqtt_application.o(.text.AVR_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AVR_Transmit &rArr; ComIf_TxConfirmation
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_Send_Data
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_TxConfirmation
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comif_config.o(.data.ComIf_ChannelConfig)
</UL>
<P><STRONG><a name="[69]"></a>AvrStatusHandleFunc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, avrstatusmessagehandling.o(.text.AvrStatusHandleFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AvrStatusHandleFunc &rArr; ComIf_RxIndication_AVR &rArr; ComIf_RxIndication &rArr; ComIf_StoreDataByte &rArr; ComIf_ErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_RxIndication_AVR
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Length
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_DeQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUN_SYS_Internal_Execute_Tasks
</UL>

<P><STRONG><a name="[ac]"></a>Buffer_Clear</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, buffer.o(.text.Buffer_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_RxMessageCallBack
</UL>

<P><STRONG><a name="[6e]"></a>Buffer_Create</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, buffer.o(.text.Buffer_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Buffer_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Init
</UL>

<P><STRONG><a name="[6b]"></a>Buffer_DeQueue</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, buffer.o(.text.Buffer_DeQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Buffer_DeQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrStatusHandleFunc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_MainFunction
</UL>

<P><STRONG><a name="[a7]"></a>Buffer_EnQueue</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, buffer.o(.text.Buffer_EnQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Buffer_EnQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Data_Read
</UL>

<P><STRONG><a name="[ab]"></a>Buffer_GetBuffer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, buffer.o(.text.Buffer_GetBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_RxMessageCallBack
</UL>

<P><STRONG><a name="[6d]"></a>Buffer_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, buffer_config.o(.text.Buffer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Buffer_Init &rArr; Buffer_Create
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUN_SYS_Internal_Init
</UL>

<P><STRONG><a name="[6a]"></a>Buffer_Length</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, buffer.o(.text.Buffer_Length))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrStatusHandleFunc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Data_Read
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_MainFunction
</UL>

<P><STRONG><a name="[6f]"></a>COSMIC_Generic_SIMCOM_Callback</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mqtt_application.o(.text.COSMIC_Generic_SIMCOM_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = COSMIC_Generic_SIMCOM_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Callback
</UL>

<P><STRONG><a name="[97]"></a>COSMIC_SIMCOM_Error_Callback</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mqtt_application.o(.text.COSMIC_SIMCOM_Error_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageControl
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish_StateMachine
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_StateMachine
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_SSL_CONFIG_MainFunction
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Clock_MainFunction
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_StateMachine
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_MainFunction
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Callback
</UL>

<P><STRONG><a name="[6]"></a>Cloud_ComIf_ErrorNotification</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mqtt_application.o(.text.Cloud_ComIf_ErrorNotification))
<BR>[Address Reference Count : 1]<UL><LI> comif_config.o(.data.ComIf_ChannelConfig)
</UL>
<P><STRONG><a name="[5]"></a>Cloud_Transmit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mqtt_application.o(.text.Cloud_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Cloud_Transmit &rArr; ComIf_TxConfirmation
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_TxConfirmation
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comif_config.o(.data.ComIf_ChannelConfig)
</UL>
<P><STRONG><a name="[74]"></a>ComIf_CalcChecksum</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, comif_calcchecksum.o(.text.ComIf_CalcChecksum))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_RxIndication
</UL>

<P><STRONG><a name="[70]"></a>ComIf_EncodeFromShadowToChannelBuffer</STRONG> (Thumb, 604 bytes, Stack size 56 bytes, comif_transmit.o(.text.ComIf_EncodeFromShadowToChannelBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ComIf_EncodeFromShadowToChannelBuffer &rArr; ComIf_ErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_GetChecksumMaskValue
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_ErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Transmit
</UL>

<P><STRONG><a name="[72]"></a>ComIf_ErrorNotify</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, comif.o(.text.ComIf_ErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ComIf_ErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Transmit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_EncodeFromShadowToChannelBuffer
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_RxIndication
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_StoreDataByte
</UL>

<P><STRONG><a name="[71]"></a>ComIf_GetChecksumMaskValue</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, comif_calcchecksum.o(.text.ComIf_GetChecksumMaskValue))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_EncodeFromShadowToChannelBuffer
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_RxIndication
</UL>

<P><STRONG><a name="[73]"></a>ComIf_RxIndication</STRONG> (Thumb, 796 bytes, Stack size 40 bytes, comif_rxindication.o(.text.ComIf_RxIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ComIf_RxIndication &rArr; ComIf_StoreDataByte &rArr; ComIf_ErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_StoreDataByte
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_GetChecksumMaskValue
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_CalcChecksum
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_ErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_RxIndication_AVR
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_RxIndication_ASCIIString
</UL>

<P><STRONG><a name="[76]"></a>ComIf_RxIndication_ASCIIString</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, comif_rxindication.o(.text.ComIf_RxIndication_ASCIIString))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ComIf_RxIndication_ASCIIString &rArr; ComIf_RxIndication &rArr; ComIf_StoreDataByte &rArr; ComIf_ErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_RxIndication
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_RxIndication_Cloud
</UL>

<P><STRONG><a name="[6c]"></a>ComIf_RxIndication_AVR</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, comif_config.o(.text.ComIf_RxIndication_AVR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ComIf_RxIndication_AVR &rArr; ComIf_RxIndication &rArr; ComIf_StoreDataByte &rArr; ComIf_ErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_RxIndication
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrStatusHandleFunc
</UL>

<P><STRONG><a name="[77]"></a>ComIf_RxIndication_Cloud</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, comif_config.o(.text.ComIf_RxIndication_Cloud))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ComIf_RxIndication_Cloud &rArr; ComIf_RxIndication_ASCIIString &rArr; ComIf_RxIndication &rArr; ComIf_StoreDataByte &rArr; ComIf_ErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_RxIndication_ASCIIString
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_AppMain
</UL>

<P><STRONG><a name="[78]"></a>ComIf_Transmit</STRONG> (Thumb, 196 bytes, Stack size 64 bytes, comif_transmit.o(.text.ComIf_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ComIf_Transmit &rArr; ComIf_EncodeFromShadowToChannelBuffer &rArr; ComIf_ErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_UpdateTxShadowBuffer
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_EncodeFromShadowToChannelBuffer
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_ErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_cmdData_CloudRxCbk
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_AppMain
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateSendData
</UL>

<P><STRONG><a name="[68]"></a>ComIf_TxConfirmation</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, comif_transmit.o(.text.ComIf_TxConfirmation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ComIf_TxConfirmation
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTMF_Transmit
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_Transmit
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVR_Transmit
</UL>

<P><STRONG><a name="[79]"></a>ComIf_UpdateTxShadowBuffer</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, comif_txshadowbuffer.o(.text.ComIf_UpdateTxShadowBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ComIf_UpdateTxShadowBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Transmit
</UL>

<P><STRONG><a name="[4]"></a>DTMFCallMessageCbk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs_iot.o(.text.DTMFCallMessageCbk))
<BR>[Address Reference Count : 1]<UL><LI> comif_config.o(.data.ComIfRxMsgCfg_DTMF)
</UL>
<P><STRONG><a name="[3]"></a>DTMFMessageRxCbk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs_iot.o(.text.DTMFMessageRxCbk))
<BR>[Address Reference Count : 1]<UL><LI> comif_config.o(.data.ComIfRxMsgCfg_DTMF)
</UL>
<P><STRONG><a name="[7a]"></a>DTMFStateMachine</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, simcom.o(.text.DTMFStateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DTMFStateMachine &rArr; updateSendData &rArr; ComIf_Transmit &rArr; ComIf_EncodeFromShadowToChannelBuffer &rArr; ComIf_ErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromDeleteWrite
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDataRead
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMErasePage
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMmain
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromFlashMmeoryCopy
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Callback
</UL>

<P><STRONG><a name="[8]"></a>DTMF_Transmit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cs_iot.o(.text.DTMF_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DTMF_Transmit &rArr; ComIf_TxConfirmation
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_Send_Data
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_TxConfirmation
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comif_config.o(.data.ComIf_ChannelConfig)
</UL>
<P><STRONG><a name="[81]"></a>DtmfMessageCallFunc</STRONG> (Thumb, 384 bytes, Stack size 32 bytes, message_app.o(.text.DtmfMessageCallFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = DtmfMessageCallFunc &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDataRead
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_MainFunction
</UL>

<P><STRONG><a name="[7e]"></a>EEPROMErasePage</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, flash_eeprom.o(.text.EEPROMErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EEPROMErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTMFStateMachine
</UL>

<P><STRONG><a name="[7d]"></a>EEPROMmain</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, flash_eeprom.o(.text.EEPROMmain))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EEPROMmain
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTMFStateMachine
</UL>

<P><STRONG><a name="[80]"></a>EepromDeleteWrite</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, flash_eeprom.o(.text.EepromDeleteWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EepromDeleteWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTMFStateMachine
</UL>

<P><STRONG><a name="[7c]"></a>EepromFlashMmeoryCopy</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, flash_eeprom.o(.text.EepromFlashMmeoryCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EepromFlashMmeoryCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTMFStateMachine
</UL>

<P><STRONG><a name="[90]"></a>FUN_SYS_Internal_Evaluate_Tasks_x1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sysos_processes.o(.text.FUN_SYS_Internal_Evaluate_Tasks_x1))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUN_SYS_Timer_x1
</UL>

<P><STRONG><a name="[85]"></a>FUN_SYS_Internal_Execute_Tasks</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sysos_processes.o(.text.FUN_SYS_Internal_Execute_Tasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = FUN_SYS_Internal_Execute_Tasks &rArr; SIMCOM_MainFunction &rArr; SIMCOM_Callback &rArr; DTMFStateMachine &rArr; updateSendData &rArr; ComIf_Transmit &rArr; ComIf_EncodeFromShadowToChannelBuffer &rArr; ComIf_ErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysos_check
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrStatusHandleFunc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_MainFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysOs_Main
</UL>

<P><STRONG><a name="[88]"></a>FUN_SYS_Internal_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sysos_processes.o(.text.FUN_SYS_Internal_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = FUN_SYS_Internal_Init &rArr; USART_Init &rArr; GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystickTimerInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLLInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysOs_Main
</UL>

<P><STRONG><a name="[8f]"></a>FUN_SYS_Timer_x1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sysos.o(.text.FUN_SYS_Timer_x1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FUN_SYS_Timer_x1
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUN_SYS_Internal_Evaluate_Tasks_x1
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[7f]"></a>FlashDataRead</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, flash_eeprom.o(.text.FlashDataRead))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DtmfMessageCallFunc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTMFStateMachine
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Callback
</UL>

<P><STRONG><a name="[92]"></a>GPIO_Config</STRONG> (Thumb, 388 bytes, Stack size 60 bytes, gpio_driver.o(.text.GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>

<P><STRONG><a name="[b0]"></a>GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio_driver.o(.text.GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysos_check
</UL>

<P><STRONG><a name="[91]"></a>GPIO_WritePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio_driver.o(.text.GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>

<P><STRONG><a name="[8a]"></a>GPIO_init</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, main.o(.text.GPIO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = GPIO_init &rArr; GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUN_SYS_Internal_Init
</UL>

<P><STRONG><a name="[2]"></a>IO_cmdData_CloudRxCbk</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mqtt_application.o(.text.IO_cmdData_CloudRxCbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = IO_cmdData_CloudRxCbk &rArr; ComIf_Transmit &rArr; ComIf_EncodeFromShadowToChannelBuffer &rArr; ComIf_ErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Transmit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comif_config.o(.data.ComIfRxMsgCfg_Cloud)
</UL>
<P><STRONG><a name="[93]"></a>MQTT_AppMain</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, mqtt_application.o(.text.MQTT_AppMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MQTT_AppMain &rArr; ComIf_Transmit &rArr; ComIf_EncodeFromShadowToChannelBuffer &rArr; ComIf_ErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_RxIndication_Cloud
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Transmit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_MainFunction
</UL>

<P><STRONG><a name="[94]"></a>MQTT_Publish_StateMachine</STRONG> (Thumb, 476 bytes, Stack size 40 bytes, simcom_mqtt_publish.o(.text.MQTT_Publish_StateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = MQTT_Publish_StateMachine &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Schedule_Job
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COSMIC_SIMCOM_Error_Callback
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_MainFunction
</UL>

<P><STRONG><a name="[98]"></a>MQTT_StateMachine</STRONG> (Thumb, 872 bytes, Stack size 24 bytes, simcom_mqtt.o(.text.MQTT_StateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MQTT_StateMachine &rArr; SIMCOM_GetCSV_Number_fromBuffer &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Schedule_Job
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_GetCSV_Number_fromBuffer
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COSMIC_SIMCOM_Error_Callback
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringHelper_startsWith
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_MainFunction
</UL>

<P><STRONG><a name="[9b]"></a>MessageControl</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, simcom_message.o(.text.MessageControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = MessageControl &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Schedule_Job
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COSMIC_SIMCOM_Error_Callback
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringHelper_startsWith
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_MainFunction
</UL>

<P><STRONG><a name="[89]"></a>PLLInit</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, pll_driver.o(.text.PLLInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PLLInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUN_SYS_Internal_Init
</UL>

<P><STRONG><a name="[a0]"></a>SIMCOM_Clock_MainFunction</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, simcom_clock.o(.text.SIMCOM_Clock_MainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SIMCOM_Clock_MainFunction &rArr; SIMCOM_Clock_ParseDateTime_InResponse &rArr; StringHelper_SplitAndGet_Number &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Clock_ParseDateTime_InResponse
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Schedule_Job
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COSMIC_SIMCOM_Error_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_MainFunction
</UL>

<P><STRONG><a name="[a6]"></a>SIMCOM_Data_Read</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, simcom.o(.text.SIMCOM_Data_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SIMCOM_Data_Read &rArr; SIMCOM_RxMessageCallBack &rArr; StringHelper_startsWith &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_RxMessageCallBack
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Length
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_EnQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>SIMCOM_GetCSV_Number_fromBuffer</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, simcom.o(.text.SIMCOM_GetCSV_Number_fromBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SIMCOM_GetCSV_Number_fromBuffer &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringHelper_SplitAndGet
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringHelper_GetPointerAfter
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_StateMachine
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_StateMachine
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Callback
</UL>

<P><STRONG><a name="[8e]"></a>SIMCOM_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, simcom.o(.text.SIMCOM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SIMCOM_Init &rArr; Buffer_Create
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Create
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUN_SYS_Internal_Init
</UL>

<P><STRONG><a name="[86]"></a>SIMCOM_MainFunction</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, simcom.o(.text.SIMCOM_MainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = SIMCOM_MainFunction &rArr; SIMCOM_Callback &rArr; DTMFStateMachine &rArr; updateSendData &rArr; ComIf_Transmit &rArr; ComIf_EncodeFromShadowToChannelBuffer &rArr; ComIf_ErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageControl
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DtmfMessageCallFunc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish_StateMachine
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_AppMain
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_StateMachine
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_SSL_CONFIG_MainFunction
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Clock_MainFunction
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_StateMachine
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COSMIC_SIMCOM_Error_Callback
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Callback
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Length
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_DeQueue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUN_SYS_Internal_Execute_Tasks
</UL>

<P><STRONG><a name="[a8]"></a>SIMCOM_RxMessageCallBack</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, simcom.o(.text.SIMCOM_RxMessageCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SIMCOM_RxMessageCallBack &rArr; StringHelper_startsWith &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringHelper_startsWith
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Clear
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_GetBuffer
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Data_Read
</UL>

<P><STRONG><a name="[aa]"></a>SIMCOM_SSL_CONFIG_MainFunction</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, simcom_mqtt_ssl.o(.text.SIMCOM_SSL_CONFIG_MainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SIMCOM_SSL_CONFIG_MainFunction &rArr; SIMCOM_Schedule_Job &rArr; UART2_SIM_Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Schedule_Job
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COSMIC_SIMCOM_Error_Callback
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_MainFunction
</UL>

<P><STRONG><a name="[95]"></a>SIMCOM_Schedule_Job</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, simcom.o(.text.SIMCOM_Schedule_Job))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SIMCOM_Schedule_Job &rArr; UART2_SIM_Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_SIM_Send_Data
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageControl
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish_StateMachine
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_StateMachine
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_SSL_CONFIG_MainFunction
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Clock_MainFunction
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_StateMachine
</UL>

<P><STRONG><a name="[a9]"></a>SIMCOM_StateMachine</STRONG> (Thumb, 760 bytes, Stack size 16 bytes, simcom_state.o(.text.SIMCOM_StateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = SIMCOM_StateMachine &rArr; APN_Selection &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APN_Selection
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Schedule_Job
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_GetCSV_Number_fromBuffer
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COSMIC_SIMCOM_Error_Callback
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringHelper_startsWith
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringHelper_GetPointerAfter
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_MainFunction
</UL>

<P><STRONG><a name="[67]"></a>SIM_Send_Data</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart_driver.o(.text.SIM_Send_Data))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTMF_Transmit
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVR_Transmit
</UL>

<P><STRONG><a name="[83]"></a>SendMessage</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, simcom_message.o(.text.SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SendMessage &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DtmfMessageCallFunc
</UL>

<P><STRONG><a name="[9e]"></a>StringHelper_GetPointerAfter</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, stringhelper.o(.text.StringHelper_GetPointerAfter))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = StringHelper_GetPointerAfter &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Clock_ParseDateTime_InResponse
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_GetCSV_Number_fromBuffer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_StateMachine
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Callback
</UL>

<P><STRONG><a name="[a3]"></a>StringHelper_SplitAndGet</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stringhelper.o(.text.StringHelper_SplitAndGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StringHelper_SplitAndGet
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Clock_ParseDateTime_InResponse
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_GetCSV_Number_fromBuffer
</UL>

<P><STRONG><a name="[a5]"></a>StringHelper_SplitAndGet_Number</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, stringhelper.o(.text.StringHelper_SplitAndGet_Number))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = StringHelper_SplitAndGet_Number &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Clock_ParseDateTime_InResponse
</UL>

<P><STRONG><a name="[a2]"></a>StringHelper_removeChar</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stringhelper.o(.text.StringHelper_removeChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = StringHelper_removeChar &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Clock_ParseDateTime_InResponse
</UL>

<P><STRONG><a name="[9a]"></a>StringHelper_startsWith</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stringhelper.o(.text.StringHelper_startsWith))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = StringHelper_startsWith &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_RxMessageCallBack
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageControl
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_StateMachine
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_StateMachine
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Callback
</UL>

<P><STRONG><a name="[af]"></a>SysOs_Main</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sysos.o(.text.SysOs_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = SysOs_Main &rArr; FUN_SYS_Internal_Execute_Tasks &rArr; SIMCOM_MainFunction &rArr; SIMCOM_Callback &rArr; DTMFStateMachine &rArr; updateSendData &rArr; ComIf_Transmit &rArr; ComIf_EncodeFromShadowToChannelBuffer &rArr; ComIf_ErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUN_SYS_Internal_Execute_Tasks
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUN_SYS_Internal_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, systick_interrupt.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; FUN_SYS_Timer_x1
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUN_SYS_Timer_x1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>Sysos_check</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(.text.Sysos_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysos_check
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUN_SYS_Internal_Execute_Tasks
</UL>

<P><STRONG><a name="[9c]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, system_stm32g0xx.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystickTimerInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLLInit
</UL>

<P><STRONG><a name="[26]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32g0xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>SystickTimerInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, systick_interrupt.o(.text.SystickTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystickTimerInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUN_SYS_Internal_Init
</UL>

<P><STRONG><a name="[ad]"></a>UART2_SIM_Send_Data</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart_driver.o(.text.UART2_SIM_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2_SIM_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Schedule_Job
</UL>

<P><STRONG><a name="[24]"></a>USART1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart_driver.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; Buffer_EnQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_EnQueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>USART2_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart_driver.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USART2_IRQHandler &rArr; SIMCOM_Data_Read &rArr; SIMCOM_RxMessageCallBack &rArr; StringHelper_startsWith &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Data_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>USART2_Init</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, uart_driver.o(.text.USART2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USART2_Init &rArr; GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUN_SYS_Internal_Init
</UL>

<P><STRONG><a name="[8c]"></a>USART_Init</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, uart_driver.o(.text.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USART_Init &rArr; GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUN_SYS_Internal_Init
</UL>

<P><STRONG><a name="[41]"></a>main</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = main &rArr; SysOs_Main &rArr; FUN_SYS_Internal_Execute_Tasks &rArr; SIMCOM_MainFunction &rArr; SIMCOM_Callback &rArr; DTMFStateMachine &rArr; updateSendData &rArr; ComIf_Transmit &rArr; ComIf_EncodeFromShadowToChannelBuffer &rArr; ComIf_ErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysOs_Main
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[7b]"></a>updateSendData</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mqtt_application.o(.text.updateSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = updateSendData &rArr; ComIf_Transmit &rArr; ComIf_EncodeFromShadowToChannelBuffer &rArr; ComIf_ErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTMFStateMachine
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_uidiv</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text_divfast))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystickTimerInit
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_idiv</STRONG> (Thumb, 434 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text_divfast), UNUSED)

<P><STRONG><a name="[2a]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[75]"></a>ComIf_StoreDataByte</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, comif_rxindication.o(.text.ComIf_StoreDataByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ComIf_StoreDataByte &rArr; ComIf_ErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_ErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_RxIndication
</UL>

<P><STRONG><a name="[9d]"></a>SIMCOM_Callback</STRONG> (Thumb, 564 bytes, Stack size 24 bytes, simcom.o(.text.SIMCOM_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SIMCOM_Callback &rArr; DTMFStateMachine &rArr; updateSendData &rArr; ComIf_Transmit &rArr; ComIf_EncodeFromShadowToChannelBuffer &rArr; ComIf_ErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COSMIC_Generic_SIMCOM_Callback
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_GetCSV_Number_fromBuffer
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COSMIC_SIMCOM_Error_Callback
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDataRead
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTMFStateMachine
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringHelper_startsWith
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringHelper_GetPointerAfter
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_MainFunction
</UL>

<P><STRONG><a name="[a1]"></a>SIMCOM_Clock_ParseDateTime_InResponse</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, simcom_clock.o(.text.SIMCOM_Clock_ParseDateTime_InResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SIMCOM_Clock_ParseDateTime_InResponse &rArr; StringHelper_SplitAndGet_Number &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringHelper_SplitAndGet_Number
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringHelper_SplitAndGet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringHelper_removeChar
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringHelper_GetPointerAfter
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCOM_Clock_MainFunction
</UL>

<P><STRONG><a name="[2e]"></a>SIMCOM_Clock_Job_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, simcom_clock.o(.text.SIMCOM_Clock_Job_Callback))
<BR>[Address Reference Count : 1]<UL><LI> simcom_clock.o(.text.SIMCOM_Clock_MainFunction)
</UL>
<P><STRONG><a name="[30]"></a>SIMCOM_StateMachine_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, simcom_state.o(.text.SIMCOM_StateMachine_Callback))
<BR>[Address Reference Count : 1]<UL><LI> simcom_state.o(.text.SIMCOM_StateMachine)
</UL>
<P><STRONG><a name="[2d]"></a>SendMSG_CallBack</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, simcom_message.o(.text.SendMSG_CallBack))
<BR>[Address Reference Count : 1]<UL><LI> simcom_message.o(.text.MessageControl)
</UL>
<P><STRONG><a name="[2c]"></a>MQTT_CALLBACK</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, simcom_mqtt.o(.text.MQTT_CALLBACK))
<BR>[Address Reference Count : 1]<UL><LI> simcom_mqtt.o(.text.MQTT_StateMachine)
</UL>
<P><STRONG><a name="[2b]"></a>MQTT_Publish_CallBack</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, simcom_mqtt_publish.o(.text.MQTT_Publish_CallBack))
<BR>[Address Reference Count : 1]<UL><LI> simcom_mqtt_publish.o(.text.MQTT_Publish_StateMachine)
</UL>
<P><STRONG><a name="[2f]"></a>SIMCOM_SSL_Configration_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, simcom_mqtt_ssl.o(.text.SIMCOM_SSL_Configration_Callback))
<BR>[Address Reference Count : 1]<UL><LI> simcom_mqtt_ssl.o(.text.SIMCOM_SSL_CONFIG_MainFunction)
</UL>
<P><STRONG><a name="[29]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[64]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5d]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[4d]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[4c]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[4e]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[4f]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
