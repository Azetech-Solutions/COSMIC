
COSMIC-IoT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003aa  00800060  00002e68  00002efc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000039d  0080040a  0080040a  000032a6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000032a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004d0  00000000  00000000  00003340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000733d  00000000  00000000  00003810  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002237  00000000  00000000  0000ab4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003ece  00000000  00000000  0000cd84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b0c  00000000  00000000  00010c54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001fe3  00000000  00000000  00011760  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003d4b  00000000  00000000  00013743  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000588  00000000  00000000  0001748e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 42 00 	jmp	0x84	; 0x84 <__ctors_end>
       4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_9>
      28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      34:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_13>
      38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      54:	f1 09       	sbc	r31, r1
      56:	27 0a       	sbc	r2, r23
      58:	05 0b       	sbc	r16, r21
      5a:	32 0b       	sbc	r19, r18
      5c:	04 0c       	add	r0, r4
      5e:	63 0a       	sbc	r6, r19
      60:	99 0a       	sbc	r9, r25
      62:	cf 0a       	sbc	r12, r31
      64:	cd 0b       	sbc	r28, r29
      66:	31 0c       	add	r3, r1
      68:	64 0b       	sbc	r22, r20
      6a:	97 0b       	sbc	r25, r23
      6c:	fc 0c       	add	r15, r12
      6e:	40 0d       	add	r20, r0
      70:	8c 0d       	add	r24, r12
      72:	d8 0d       	add	r29, r8
      74:	0e 0e       	add	r0, r30
      76:	44 0e       	add	r4, r20
      78:	77 0e       	add	r7, r23
      7a:	7e 0e       	add	r7, r30
      7c:	b4 0e       	add	r11, r20
      7e:	ea 0e       	add	r14, r26
      80:	0c 0f       	add	r16, r28
      82:	16 0f       	add	r17, r22

00000084 <__ctors_end>:
      84:	11 24       	eor	r1, r1
      86:	1f be       	out	0x3f, r1	; 63
      88:	cf e5       	ldi	r28, 0x5F	; 95
      8a:	d8 e0       	ldi	r29, 0x08	; 8
      8c:	de bf       	out	0x3e, r29	; 62
      8e:	cd bf       	out	0x3d, r28	; 61

00000090 <__do_copy_data>:
      90:	14 e0       	ldi	r17, 0x04	; 4
      92:	a0 e6       	ldi	r26, 0x60	; 96
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	e8 e6       	ldi	r30, 0x68	; 104
      98:	fe e2       	ldi	r31, 0x2E	; 46
      9a:	02 c0       	rjmp	.+4      	; 0xa0 <__do_copy_data+0x10>
      9c:	05 90       	lpm	r0, Z+
      9e:	0d 92       	st	X+, r0
      a0:	aa 30       	cpi	r26, 0x0A	; 10
      a2:	b1 07       	cpc	r27, r17
      a4:	d9 f7       	brne	.-10     	; 0x9c <__do_copy_data+0xc>

000000a6 <__do_clear_bss>:
      a6:	27 e0       	ldi	r18, 0x07	; 7
      a8:	aa e0       	ldi	r26, 0x0A	; 10
      aa:	b4 e0       	ldi	r27, 0x04	; 4
      ac:	01 c0       	rjmp	.+2      	; 0xb0 <.do_clear_bss_start>

000000ae <.do_clear_bss_loop>:
      ae:	1d 92       	st	X+, r1

000000b0 <.do_clear_bss_start>:
      b0:	a7 3a       	cpi	r26, 0xA7	; 167
      b2:	b2 07       	cpc	r27, r18
      b4:	e1 f7       	brne	.-8      	; 0xae <.do_clear_bss_loop>
      b6:	0e 94 d7 13 	call	0x27ae	; 0x27ae <main>
      ba:	0c 94 32 17 	jmp	0x2e64	; 0x2e64 <_exit>

000000be <__bad_interrupt>:
      be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <TIM1_Init>:
      c2:	82 e0       	ldi	r24, 0x02	; 2
      c4:	8e bd       	out	0x2e, r24	; 46
      c6:	89 b7       	in	r24, 0x39	; 57
      c8:	84 60       	ori	r24, 0x04	; 4
      ca:	89 bf       	out	0x39, r24	; 57
      cc:	8f ea       	ldi	r24, 0xAF	; 175
      ce:	9c e3       	ldi	r25, 0x3C	; 60
      d0:	9d bd       	out	0x2d, r25	; 45
      d2:	8c bd       	out	0x2c, r24	; 44
      d4:	78 94       	sei
      d6:	08 95       	ret

000000d8 <__vector_9>:
      d8:	1f 92       	push	r1
      da:	0f 92       	push	r0
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	0f 92       	push	r0
      e0:	11 24       	eor	r1, r1
      e2:	2f 93       	push	r18
      e4:	3f 93       	push	r19
      e6:	4f 93       	push	r20
      e8:	5f 93       	push	r21
      ea:	6f 93       	push	r22
      ec:	7f 93       	push	r23
      ee:	8f 93       	push	r24
      f0:	9f 93       	push	r25
      f2:	af 93       	push	r26
      f4:	bf 93       	push	r27
      f6:	ef 93       	push	r30
      f8:	ff 93       	push	r31
      fa:	8f ea       	ldi	r24, 0xAF	; 175
      fc:	9c e3       	ldi	r25, 0x3C	; 60
      fe:	9d bd       	out	0x2d, r25	; 45
     100:	8c bd       	out	0x2c, r24	; 44
     102:	0e 94 b6 0c 	call	0x196c	; 0x196c <FUN_SYS_Timer_x1>
     106:	ff 91       	pop	r31
     108:	ef 91       	pop	r30
     10a:	bf 91       	pop	r27
     10c:	af 91       	pop	r26
     10e:	9f 91       	pop	r25
     110:	8f 91       	pop	r24
     112:	7f 91       	pop	r23
     114:	6f 91       	pop	r22
     116:	5f 91       	pop	r21
     118:	4f 91       	pop	r20
     11a:	3f 91       	pop	r19
     11c:	2f 91       	pop	r18
     11e:	0f 90       	pop	r0
     120:	0f be       	out	0x3f, r0	; 63
     122:	0f 90       	pop	r0
     124:	1f 90       	pop	r1
     126:	18 95       	reti

00000128 <UART_init>:
unsigned char uart_rx()
{
	while ( !(UCSRA & (1<<RXC)) );
	unsigned char a=UDR;
	return a;
}
     128:	10 bc       	out	0x20, r1	; 32
     12a:	8c e0       	ldi	r24, 0x0C	; 12
     12c:	89 b9       	out	0x09, r24	; 9
     12e:	88 e1       	ldi	r24, 0x18	; 24
     130:	8a b9       	out	0x0a, r24	; 10
     132:	8e e8       	ldi	r24, 0x8E	; 142
     134:	80 bd       	out	0x20, r24	; 32
     136:	8a b1       	in	r24, 0x0a	; 10
     138:	80 68       	ori	r24, 0x80	; 128
     13a:	8a b9       	out	0x0a, r24	; 10
     13c:	8b b1       	in	r24, 0x0b	; 11
     13e:	82 60       	ori	r24, 0x02	; 2
     140:	8b b9       	out	0x0b, r24	; 11
     142:	78 94       	sei
     144:	08 95       	ret

00000146 <SIM_Send_Data>:
     146:	5d 9b       	sbis	0x0b, 5	; 11
     148:	fe cf       	rjmp	.-4      	; 0x146 <SIM_Send_Data>
     14a:	8c b9       	out	0x0c, r24	; 12
     14c:	08 95       	ret

0000014e <__vector_13>:



ISR(USART_RXC_vect)
{
     14e:	1f 92       	push	r1
     150:	0f 92       	push	r0
     152:	0f b6       	in	r0, 0x3f	; 63
     154:	0f 92       	push	r0
     156:	11 24       	eor	r1, r1
     158:	2f 93       	push	r18
     15a:	3f 93       	push	r19
     15c:	4f 93       	push	r20
     15e:	5f 93       	push	r21
     160:	6f 93       	push	r22
     162:	7f 93       	push	r23
     164:	8f 93       	push	r24
     166:	9f 93       	push	r25
     168:	af 93       	push	r26
     16a:	bf 93       	push	r27
     16c:	ef 93       	push	r30
     16e:	ff 93       	push	r31
	
	unsigned char d = UDR;
     170:	8c b1       	in	r24, 0x0c	; 12
	SIMCOM_Data_Read(d);
     172:	0e 94 a0 07 	call	0xf40	; 0xf40 <SIMCOM_Data_Read>

     176:	ff 91       	pop	r31
     178:	ef 91       	pop	r30
     17a:	bf 91       	pop	r27
     17c:	af 91       	pop	r26
     17e:	9f 91       	pop	r25
     180:	8f 91       	pop	r24
     182:	7f 91       	pop	r23
     184:	6f 91       	pop	r22
     186:	5f 91       	pop	r21
     188:	4f 91       	pop	r20
     18a:	3f 91       	pop	r19
     18c:	2f 91       	pop	r18
     18e:	0f 90       	pop	r0
     190:	0f be       	out	0x3f, r0	; 63
     192:	0f 90       	pop	r0
     194:	1f 90       	pop	r1
     196:	18 95       	reti

00000198 <ComIf_ErrorNotify>:
     198:	0f 93       	push	r16
     19a:	1f 93       	push	r17
     19c:	dc 01       	movw	r26, r24
     19e:	12 96       	adiw	r26, 0x02	; 2
     1a0:	ed 91       	ld	r30, X+
     1a2:	fc 91       	ld	r31, X
     1a4:	13 97       	sbiw	r26, 0x03	; 3
     1a6:	30 97       	sbiw	r30, 0x00	; 0
     1a8:	29 f0       	breq	.+10     	; 0x1b4 <ComIf_ErrorNotify+0x1c>
     1aa:	cb 01       	movw	r24, r22
     1ac:	ba 01       	movw	r22, r20
     1ae:	a9 01       	movw	r20, r18
     1b0:	98 01       	movw	r18, r16
     1b2:	09 95       	icall
     1b4:	1f 91       	pop	r17
     1b6:	0f 91       	pop	r16
     1b8:	08 95       	ret

000001ba <ComIf_GetChecksumMaskValue>:
     1ba:	28 2f       	mov	r18, r24
     1bc:	82 30       	cpi	r24, 0x02	; 2
     1be:	08 f0       	brcs	.+2      	; 0x1c2 <ComIf_GetChecksumMaskValue+0x8>
     1c0:	21 e0       	ldi	r18, 0x01	; 1
     1c2:	6f ef       	ldi	r22, 0xFF	; 255
     1c4:	70 e0       	ldi	r23, 0x00	; 0
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	07 c0       	rjmp	.+14     	; 0x1da <ComIf_GetChecksumMaskValue+0x20>
     1cc:	b8 2f       	mov	r27, r24
     1ce:	a7 2f       	mov	r26, r23
     1d0:	96 2f       	mov	r25, r22
     1d2:	88 27       	eor	r24, r24
     1d4:	bc 01       	movw	r22, r24
     1d6:	cd 01       	movw	r24, r26
     1d8:	6f 6f       	ori	r22, 0xFF	; 255
     1da:	21 50       	subi	r18, 0x01	; 1
     1dc:	b9 f7       	brne	.-18     	; 0x1cc <ComIf_GetChecksumMaskValue+0x12>
     1de:	08 95       	ret

000001e0 <ComIf_EncodeFromShadowToChannelBuffer>:
     1e0:	2f 92       	push	r2
     1e2:	3f 92       	push	r3
     1e4:	4f 92       	push	r4
     1e6:	5f 92       	push	r5
     1e8:	6f 92       	push	r6
     1ea:	7f 92       	push	r7
     1ec:	8f 92       	push	r8
     1ee:	9f 92       	push	r9
     1f0:	af 92       	push	r10
     1f2:	bf 92       	push	r11
     1f4:	cf 92       	push	r12
     1f6:	df 92       	push	r13
     1f8:	ef 92       	push	r14
     1fa:	ff 92       	push	r15
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	00 d0       	rcall	.+0      	; 0x206 <ComIf_EncodeFromShadowToChannelBuffer+0x26>
     206:	00 d0       	rcall	.+0      	; 0x208 <ComIf_EncodeFromShadowToChannelBuffer+0x28>
     208:	1f 92       	push	r1
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
     20e:	c8 2e       	mov	r12, r24
     210:	69 83       	std	Y+1, r22	; 0x01
     212:	d4 2e       	mov	r13, r20
     214:	3b 83       	std	Y+3, r19	; 0x03
     216:	2a 83       	std	Y+2, r18	; 0x02
     218:	88 2e       	mov	r8, r24
     21a:	91 2c       	mov	r9, r1
     21c:	23 e1       	ldi	r18, 0x13	; 19
     21e:	28 9d       	mul	r18, r8
     220:	c0 01       	movw	r24, r0
     222:	29 9d       	mul	r18, r9
     224:	90 0d       	add	r25, r0
     226:	11 24       	eor	r1, r1
     228:	9c 01       	movw	r18, r24
     22a:	2f 58       	subi	r18, 0x8F	; 143
     22c:	3f 4f       	sbci	r19, 0xFF	; 255
     22e:	19 01       	movw	r2, r18
     230:	d9 01       	movw	r26, r18
     232:	1a 96       	adiw	r26, 0x0a	; 10
     234:	ad 90       	ld	r10, X+
     236:	bc 90       	ld	r11, X
     238:	1b 97       	sbiw	r26, 0x0b	; 11
     23a:	bb e0       	ldi	r27, 0x0B	; 11
     23c:	6b 9f       	mul	r22, r27
     23e:	a0 0c       	add	r10, r0
     240:	b1 1c       	adc	r11, r1
     242:	11 24       	eor	r1, r1
     244:	d5 01       	movw	r26, r10
     246:	41 2c       	mov	r4, r1
     248:	51 2c       	mov	r5, r1
     24a:	32 01       	movw	r6, r4
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	e4 e0       	ldi	r30, 0x04	; 4
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	fd 83       	std	Y+5, r31	; 0x05
     254:	ec 83       	std	Y+4, r30	; 0x04
     256:	1f c0       	rjmp	.+62     	; 0x296 <ComIf_EncodeFromShadowToChannelBuffer+0xb6>
     258:	15 96       	adiw	r26, 0x05	; 5
     25a:	ed 91       	ld	r30, X+
     25c:	fc 91       	ld	r31, X
     25e:	16 97       	sbiw	r26, 0x06	; 6
     260:	e2 0f       	add	r30, r18
     262:	f1 1d       	adc	r31, r1
     264:	30 81       	ld	r19, Z
     266:	43 0e       	add	r4, r19
     268:	51 1c       	adc	r5, r1
     26a:	61 1c       	adc	r6, r1
     26c:	71 1c       	adc	r7, r1
     26e:	8c 81       	ldd	r24, Y+4	; 0x04
     270:	9d 81       	ldd	r25, Y+5	; 0x05
     272:	01 96       	adiw	r24, 0x01	; 1
     274:	3b 57       	subi	r19, 0x7B	; 123
     276:	33 30       	cpi	r19, 0x03	; 3
     278:	10 f4       	brcc	.+4      	; 0x27e <ComIf_EncodeFromShadowToChannelBuffer+0x9e>
     27a:	31 e0       	ldi	r19, 0x01	; 1
     27c:	01 c0       	rjmp	.+2      	; 0x280 <ComIf_EncodeFromShadowToChannelBuffer+0xa0>
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	33 23       	and	r19, r19
     282:	31 f0       	breq	.+12     	; 0x290 <ComIf_EncodeFromShadowToChannelBuffer+0xb0>
     284:	8c 81       	ldd	r24, Y+4	; 0x04
     286:	9d 81       	ldd	r25, Y+5	; 0x05
     288:	02 96       	adiw	r24, 0x02	; 2
     28a:	9d 83       	std	Y+5, r25	; 0x05
     28c:	8c 83       	std	Y+4, r24	; 0x04
     28e:	02 c0       	rjmp	.+4      	; 0x294 <ComIf_EncodeFromShadowToChannelBuffer+0xb4>
     290:	9d 83       	std	Y+5, r25	; 0x05
     292:	8c 83       	std	Y+4, r24	; 0x04
     294:	2f 5f       	subi	r18, 0xFF	; 255
     296:	2d 15       	cp	r18, r13
     298:	f8 f2       	brcs	.-66     	; 0x258 <ComIf_EncodeFromShadowToChannelBuffer+0x78>
     29a:	d5 01       	movw	r26, r10
     29c:	13 96       	adiw	r26, 0x03	; 3
     29e:	8c 91       	ld	r24, X
     2a0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <ComIf_GetChecksumMaskValue>
     2a4:	70 94       	com	r7
     2a6:	60 94       	com	r6
     2a8:	50 94       	com	r5
     2aa:	40 94       	com	r4
     2ac:	41 1c       	adc	r4, r1
     2ae:	51 1c       	adc	r5, r1
     2b0:	61 1c       	adc	r6, r1
     2b2:	71 1c       	adc	r7, r1
     2b4:	46 22       	and	r4, r22
     2b6:	57 22       	and	r5, r23
     2b8:	68 22       	and	r6, r24
     2ba:	79 22       	and	r7, r25
     2bc:	f5 01       	movw	r30, r10
     2be:	83 81       	ldd	r24, Z+3	; 0x03
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	01 97       	sbiw	r24, 0x01	; 1
     2c4:	34 c0       	rjmp	.+104    	; 0x32e <ComIf_EncodeFromShadowToChannelBuffer+0x14e>
     2c6:	9c 01       	movw	r18, r24
     2c8:	22 0f       	add	r18, r18
     2ca:	33 1f       	adc	r19, r19
     2cc:	22 0f       	add	r18, r18
     2ce:	33 1f       	adc	r19, r19
     2d0:	22 0f       	add	r18, r18
     2d2:	33 1f       	adc	r19, r19
     2d4:	4f ef       	ldi	r20, 0xFF	; 255
     2d6:	50 e0       	ldi	r21, 0x00	; 0
     2d8:	60 e0       	ldi	r22, 0x00	; 0
     2da:	70 e0       	ldi	r23, 0x00	; 0
     2dc:	02 2e       	mov	r0, r18
     2de:	04 c0       	rjmp	.+8      	; 0x2e8 <ComIf_EncodeFromShadowToChannelBuffer+0x108>
     2e0:	44 0f       	add	r20, r20
     2e2:	55 1f       	adc	r21, r21
     2e4:	66 1f       	adc	r22, r22
     2e6:	77 1f       	adc	r23, r23
     2e8:	0a 94       	dec	r0
     2ea:	d2 f7       	brpl	.-12     	; 0x2e0 <ComIf_EncodeFromShadowToChannelBuffer+0x100>
     2ec:	44 21       	and	r20, r4
     2ee:	55 21       	and	r21, r5
     2f0:	66 21       	and	r22, r6
     2f2:	77 21       	and	r23, r7
     2f4:	04 c0       	rjmp	.+8      	; 0x2fe <ComIf_EncodeFromShadowToChannelBuffer+0x11e>
     2f6:	76 95       	lsr	r23
     2f8:	67 95       	ror	r22
     2fa:	57 95       	ror	r21
     2fc:	47 95       	ror	r20
     2fe:	2a 95       	dec	r18
     300:	d2 f7       	brpl	.-12     	; 0x2f6 <ComIf_EncodeFromShadowToChannelBuffer+0x116>
     302:	2c 81       	ldd	r18, Y+4	; 0x04
     304:	3d 81       	ldd	r19, Y+5	; 0x05
     306:	2f 5f       	subi	r18, 0xFF	; 255
     308:	3f 4f       	sbci	r19, 0xFF	; 255
     30a:	4b 57       	subi	r20, 0x7B	; 123
     30c:	43 30       	cpi	r20, 0x03	; 3
     30e:	10 f4       	brcc	.+4      	; 0x314 <ComIf_EncodeFromShadowToChannelBuffer+0x134>
     310:	41 e0       	ldi	r20, 0x01	; 1
     312:	01 c0       	rjmp	.+2      	; 0x316 <ComIf_EncodeFromShadowToChannelBuffer+0x136>
     314:	40 e0       	ldi	r20, 0x00	; 0
     316:	44 23       	and	r20, r20
     318:	39 f0       	breq	.+14     	; 0x328 <ComIf_EncodeFromShadowToChannelBuffer+0x148>
     31a:	2c 81       	ldd	r18, Y+4	; 0x04
     31c:	3d 81       	ldd	r19, Y+5	; 0x05
     31e:	2e 5f       	subi	r18, 0xFE	; 254
     320:	3f 4f       	sbci	r19, 0xFF	; 255
     322:	3d 83       	std	Y+5, r19	; 0x05
     324:	2c 83       	std	Y+4, r18	; 0x04
     326:	02 c0       	rjmp	.+4      	; 0x32c <ComIf_EncodeFromShadowToChannelBuffer+0x14c>
     328:	3d 83       	std	Y+5, r19	; 0x05
     32a:	2c 83       	std	Y+4, r18	; 0x04
     32c:	01 97       	sbiw	r24, 0x01	; 1
     32e:	99 23       	and	r25, r25
     330:	54 f6       	brge	.-108    	; 0x2c6 <ComIf_EncodeFromShadowToChannelBuffer+0xe6>
     332:	83 e1       	ldi	r24, 0x13	; 19
     334:	88 9d       	mul	r24, r8
     336:	f0 01       	movw	r30, r0
     338:	89 9d       	mul	r24, r9
     33a:	f0 0d       	add	r31, r0
     33c:	11 24       	eor	r1, r1
     33e:	ef 58       	subi	r30, 0x8F	; 143
     340:	ff 4f       	sbci	r31, 0xFF	; 255
     342:	81 85       	ldd	r24, Z+9	; 0x09
     344:	81 30       	cpi	r24, 0x01	; 1
     346:	39 f4       	brne	.+14     	; 0x356 <ComIf_EncodeFromShadowToChannelBuffer+0x176>
     348:	8c 81       	ldd	r24, Y+4	; 0x04
     34a:	9d 81       	ldd	r25, Y+5	; 0x05
     34c:	88 0f       	add	r24, r24
     34e:	99 1f       	adc	r25, r25
     350:	01 96       	adiw	r24, 0x01	; 1
     352:	9d 83       	std	Y+5, r25	; 0x05
     354:	8c 83       	std	Y+4, r24	; 0x04
     356:	23 e1       	ldi	r18, 0x13	; 19
     358:	28 9d       	mul	r18, r8
     35a:	c0 01       	movw	r24, r0
     35c:	29 9d       	mul	r18, r9
     35e:	90 0d       	add	r25, r0
     360:	11 24       	eor	r1, r1
     362:	fc 01       	movw	r30, r24
     364:	ef 58       	subi	r30, 0x8F	; 143
     366:	ff 4f       	sbci	r31, 0xFF	; 255
     368:	81 85       	ldd	r24, Z+9	; 0x09
     36a:	81 30       	cpi	r24, 0x01	; 1
     36c:	09 f0       	breq	.+2      	; 0x370 <ComIf_EncodeFromShadowToChannelBuffer+0x190>
     36e:	bf c0       	rjmp	.+382    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
     370:	ac 81       	ldd	r26, Y+4	; 0x04
     372:	bd 81       	ldd	r27, Y+5	; 0x05
     374:	ae 15       	cp	r26, r14
     376:	bf 05       	cpc	r27, r15
     378:	08 f0       	brcs	.+2      	; 0x37c <ComIf_EncodeFromShadowToChannelBuffer+0x19c>
     37a:	9a c0       	rjmp	.+308    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
     37c:	87 e3       	ldi	r24, 0x37	; 55
     37e:	f8 01       	movw	r30, r16
     380:	80 83       	st	Z, r24
     382:	8b e3       	ldi	r24, 0x3B	; 59
     384:	81 83       	std	Z+1, r24	; 0x01
     386:	d5 01       	movw	r26, r10
     388:	8c 91       	ld	r24, X
     38a:	98 2f       	mov	r25, r24
     38c:	92 95       	swap	r25
     38e:	9f 70       	andi	r25, 0x0F	; 15
     390:	90 5d       	subi	r25, 0xD0	; 208
     392:	92 83       	std	Z+2, r25	; 0x02
     394:	8f 70       	andi	r24, 0x0F	; 15
     396:	80 5d       	subi	r24, 0xD0	; 208
     398:	83 83       	std	Z+3, r24	; 0x03
     39a:	8d 2d       	mov	r24, r13
     39c:	82 95       	swap	r24
     39e:	8f 70       	andi	r24, 0x0F	; 15
     3a0:	80 5d       	subi	r24, 0xD0	; 208
     3a2:	84 83       	std	Z+4, r24	; 0x04
     3a4:	8d 2d       	mov	r24, r13
     3a6:	8f 70       	andi	r24, 0x0F	; 15
     3a8:	80 5d       	subi	r24, 0xD0	; 208
     3aa:	85 83       	std	Z+5, r24	; 0x05
     3ac:	40 e0       	ldi	r20, 0x00	; 0
     3ae:	26 e0       	ldi	r18, 0x06	; 6
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	24 c0       	rjmp	.+72     	; 0x3fc <ComIf_EncodeFromShadowToChannelBuffer+0x21c>
     3b4:	d5 01       	movw	r26, r10
     3b6:	15 96       	adiw	r26, 0x05	; 5
     3b8:	ed 91       	ld	r30, X+
     3ba:	fc 91       	ld	r31, X
     3bc:	16 97       	sbiw	r26, 0x06	; 6
     3be:	e4 0f       	add	r30, r20
     3c0:	f1 1d       	adc	r31, r1
     3c2:	80 81       	ld	r24, Z
     3c4:	f8 01       	movw	r30, r16
     3c6:	e2 0f       	add	r30, r18
     3c8:	f3 1f       	adc	r31, r19
     3ca:	95 e8       	ldi	r25, 0x85	; 133
     3cc:	98 0f       	add	r25, r24
     3ce:	93 30       	cpi	r25, 0x03	; 3
     3d0:	30 f4       	brcc	.+12     	; 0x3de <ComIf_EncodeFromShadowToChannelBuffer+0x1fe>
     3d2:	97 e3       	ldi	r25, 0x37	; 55
     3d4:	90 83       	st	Z, r25
     3d6:	9c e3       	ldi	r25, 0x3C	; 60
     3d8:	91 83       	std	Z+1, r25	; 0x01
     3da:	92 e0       	ldi	r25, 0x02	; 2
     3dc:	01 c0       	rjmp	.+2      	; 0x3e0 <ComIf_EncodeFromShadowToChannelBuffer+0x200>
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	e9 0f       	add	r30, r25
     3e2:	f1 1d       	adc	r31, r1
     3e4:	58 2f       	mov	r21, r24
     3e6:	52 95       	swap	r21
     3e8:	5f 70       	andi	r21, 0x0F	; 15
     3ea:	50 5d       	subi	r21, 0xD0	; 208
     3ec:	50 83       	st	Z, r21
     3ee:	8f 70       	andi	r24, 0x0F	; 15
     3f0:	80 5d       	subi	r24, 0xD0	; 208
     3f2:	81 83       	std	Z+1, r24	; 0x01
     3f4:	9e 5f       	subi	r25, 0xFE	; 254
     3f6:	29 0f       	add	r18, r25
     3f8:	31 1d       	adc	r19, r1
     3fa:	4f 5f       	subi	r20, 0xFF	; 255
     3fc:	4d 15       	cp	r20, r13
     3fe:	d0 f2       	brcs	.-76     	; 0x3b4 <ComIf_EncodeFromShadowToChannelBuffer+0x1d4>
     400:	f5 01       	movw	r30, r10
     402:	43 81       	ldd	r20, Z+3	; 0x03
     404:	50 e0       	ldi	r21, 0x00	; 0
     406:	41 50       	subi	r20, 0x01	; 1
     408:	51 09       	sbc	r21, r1
     40a:	3b c0       	rjmp	.+118    	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     40c:	ba 01       	movw	r22, r20
     40e:	66 0f       	add	r22, r22
     410:	77 1f       	adc	r23, r23
     412:	66 0f       	add	r22, r22
     414:	77 1f       	adc	r23, r23
     416:	66 0f       	add	r22, r22
     418:	77 1f       	adc	r23, r23
     41a:	8f ef       	ldi	r24, 0xFF	; 255
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	a0 e0       	ldi	r26, 0x00	; 0
     420:	b0 e0       	ldi	r27, 0x00	; 0
     422:	06 2e       	mov	r0, r22
     424:	04 c0       	rjmp	.+8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     426:	88 0f       	add	r24, r24
     428:	99 1f       	adc	r25, r25
     42a:	aa 1f       	adc	r26, r26
     42c:	bb 1f       	adc	r27, r27
     42e:	0a 94       	dec	r0
     430:	d2 f7       	brpl	.-12     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     432:	84 21       	and	r24, r4
     434:	95 21       	and	r25, r5
     436:	a6 21       	and	r26, r6
     438:	b7 21       	and	r27, r7
     43a:	04 c0       	rjmp	.+8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
     43c:	b6 95       	lsr	r27
     43e:	a7 95       	ror	r26
     440:	97 95       	ror	r25
     442:	87 95       	ror	r24
     444:	6a 95       	dec	r22
     446:	d2 f7       	brpl	.-12     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     448:	f8 01       	movw	r30, r16
     44a:	e2 0f       	add	r30, r18
     44c:	f3 1f       	adc	r31, r19
     44e:	65 e8       	ldi	r22, 0x85	; 133
     450:	68 0f       	add	r22, r24
     452:	63 30       	cpi	r22, 0x03	; 3
     454:	30 f4       	brcc	.+12     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     456:	67 e3       	ldi	r22, 0x37	; 55
     458:	60 83       	st	Z, r22
     45a:	6c e3       	ldi	r22, 0x3C	; 60
     45c:	61 83       	std	Z+1, r22	; 0x01
     45e:	62 e0       	ldi	r22, 0x02	; 2
     460:	01 c0       	rjmp	.+2      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
     462:	60 e0       	ldi	r22, 0x00	; 0
     464:	e6 0f       	add	r30, r22
     466:	f1 1d       	adc	r31, r1
     468:	78 2f       	mov	r23, r24
     46a:	72 95       	swap	r23
     46c:	7f 70       	andi	r23, 0x0F	; 15
     46e:	70 5d       	subi	r23, 0xD0	; 208
     470:	70 83       	st	Z, r23
     472:	8f 70       	andi	r24, 0x0F	; 15
     474:	80 5d       	subi	r24, 0xD0	; 208
     476:	81 83       	std	Z+1, r24	; 0x01
     478:	6e 5f       	subi	r22, 0xFE	; 254
     47a:	26 0f       	add	r18, r22
     47c:	31 1d       	adc	r19, r1
     47e:	41 50       	subi	r20, 0x01	; 1
     480:	51 09       	sbc	r21, r1
     482:	55 23       	and	r21, r21
     484:	1c f6       	brge	.-122    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     486:	f8 01       	movw	r30, r16
     488:	e2 0f       	add	r30, r18
     48a:	f3 1f       	adc	r31, r19
     48c:	87 e3       	ldi	r24, 0x37	; 55
     48e:	80 83       	st	Z, r24
     490:	8d e3       	ldi	r24, 0x3D	; 61
     492:	81 83       	std	Z+1, r24	; 0x01
     494:	c9 01       	movw	r24, r18
     496:	02 96       	adiw	r24, 0x02	; 2
     498:	2d 5f       	subi	r18, 0xFD	; 253
     49a:	3f 4f       	sbci	r19, 0xFF	; 255
     49c:	f8 01       	movw	r30, r16
     49e:	e8 0f       	add	r30, r24
     4a0:	f9 1f       	adc	r31, r25
     4a2:	10 82       	st	Z, r1
     4a4:	aa 81       	ldd	r26, Y+2	; 0x02
     4a6:	bb 81       	ldd	r27, Y+3	; 0x03
     4a8:	2d 93       	st	X+, r18
     4aa:	3c 93       	st	X, r19
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	b5 c0       	rjmp	.+362    	; 0x61a <__EEPROM_REGION_LENGTH__+0x21a>
     4b0:	ec 81       	ldd	r30, Y+4	; 0x04
     4b2:	fd 81       	ldd	r31, Y+5	; 0x05
     4b4:	8f 01       	movw	r16, r30
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	98 01       	movw	r18, r16
     4bc:	11 27       	eor	r17, r17
     4be:	00 27       	eor	r16, r16
     4c0:	4c 2d       	mov	r20, r12
     4c2:	50 e0       	ldi	r21, 0x00	; 0
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	76 2f       	mov	r23, r22
     4ca:	65 2f       	mov	r22, r21
     4cc:	54 2f       	mov	r21, r20
     4ce:	44 27       	eor	r20, r20
     4d0:	62 61       	ori	r22, 0x12	; 18
     4d2:	c7 01       	movw	r24, r14
     4d4:	a0 e0       	ldi	r26, 0x00	; 0
     4d6:	b0 e0       	ldi	r27, 0x00	; 0
     4d8:	08 2b       	or	r16, r24
     4da:	19 2b       	or	r17, r25
     4dc:	2a 2b       	or	r18, r26
     4de:	3b 2b       	or	r19, r27
     4e0:	f9 81       	ldd	r31, Y+1	; 0x01
     4e2:	4f 2b       	or	r20, r31
     4e4:	c1 01       	movw	r24, r2
     4e6:	0e 94 cc 00 	call	0x198	; 0x198 <ComIf_ErrorNotify>
     4ea:	82 e1       	ldi	r24, 0x12	; 18
     4ec:	96 c0       	rjmp	.+300    	; 0x61a <__EEPROM_REGION_LENGTH__+0x21a>
     4ee:	2c 81       	ldd	r18, Y+4	; 0x04
     4f0:	3d 81       	ldd	r19, Y+5	; 0x05
     4f2:	2e 15       	cp	r18, r14
     4f4:	3f 05       	cpc	r19, r15
     4f6:	08 f0       	brcs	.+2      	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
     4f8:	72 c0       	rjmp	.+228    	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
     4fa:	8b e7       	ldi	r24, 0x7B	; 123
     4fc:	d8 01       	movw	r26, r16
     4fe:	8c 93       	st	X, r24
     500:	f5 01       	movw	r30, r10
     502:	80 81       	ld	r24, Z
     504:	11 96       	adiw	r26, 0x01	; 1
     506:	8c 93       	st	X, r24
     508:	11 97       	sbiw	r26, 0x01	; 1
     50a:	12 96       	adiw	r26, 0x02	; 2
     50c:	dc 92       	st	X, r13
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	23 e0       	ldi	r18, 0x03	; 3
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	1b c0       	rjmp	.+54     	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
     516:	d5 01       	movw	r26, r10
     518:	15 96       	adiw	r26, 0x05	; 5
     51a:	ed 91       	ld	r30, X+
     51c:	fc 91       	ld	r31, X
     51e:	16 97       	sbiw	r26, 0x06	; 6
     520:	e9 0f       	add	r30, r25
     522:	f1 1d       	adc	r31, r1
     524:	40 81       	ld	r20, Z
     526:	f8 01       	movw	r30, r16
     528:	e2 0f       	add	r30, r18
     52a:	f3 1f       	adc	r31, r19
     52c:	85 e8       	ldi	r24, 0x85	; 133
     52e:	84 0f       	add	r24, r20
     530:	83 30       	cpi	r24, 0x03	; 3
     532:	20 f4       	brcc	.+8      	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
     534:	8c e7       	ldi	r24, 0x7C	; 124
     536:	80 83       	st	Z, r24
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	01 c0       	rjmp	.+2      	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	e8 0f       	add	r30, r24
     540:	f1 1d       	adc	r31, r1
     542:	40 83       	st	Z, r20
     544:	8f 5f       	subi	r24, 0xFF	; 255
     546:	28 0f       	add	r18, r24
     548:	31 1d       	adc	r19, r1
     54a:	9f 5f       	subi	r25, 0xFF	; 255
     54c:	9d 15       	cp	r25, r13
     54e:	18 f3       	brcs	.-58     	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
     550:	f5 01       	movw	r30, r10
     552:	43 81       	ldd	r20, Z+3	; 0x03
     554:	50 e0       	ldi	r21, 0x00	; 0
     556:	41 50       	subi	r20, 0x01	; 1
     558:	51 09       	sbc	r21, r1
     55a:	32 c0       	rjmp	.+100    	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
     55c:	ba 01       	movw	r22, r20
     55e:	66 0f       	add	r22, r22
     560:	77 1f       	adc	r23, r23
     562:	66 0f       	add	r22, r22
     564:	77 1f       	adc	r23, r23
     566:	66 0f       	add	r22, r22
     568:	77 1f       	adc	r23, r23
     56a:	8f ef       	ldi	r24, 0xFF	; 255
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	a0 e0       	ldi	r26, 0x00	; 0
     570:	b0 e0       	ldi	r27, 0x00	; 0
     572:	06 2e       	mov	r0, r22
     574:	04 c0       	rjmp	.+8      	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
     576:	88 0f       	add	r24, r24
     578:	99 1f       	adc	r25, r25
     57a:	aa 1f       	adc	r26, r26
     57c:	bb 1f       	adc	r27, r27
     57e:	0a 94       	dec	r0
     580:	d2 f7       	brpl	.-12     	; 0x576 <__EEPROM_REGION_LENGTH__+0x176>
     582:	84 21       	and	r24, r4
     584:	95 21       	and	r25, r5
     586:	a6 21       	and	r26, r6
     588:	b7 21       	and	r27, r7
     58a:	04 c0       	rjmp	.+8      	; 0x594 <__EEPROM_REGION_LENGTH__+0x194>
     58c:	b6 95       	lsr	r27
     58e:	a7 95       	ror	r26
     590:	97 95       	ror	r25
     592:	87 95       	ror	r24
     594:	6a 95       	dec	r22
     596:	d2 f7       	brpl	.-12     	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
     598:	f8 01       	movw	r30, r16
     59a:	e2 0f       	add	r30, r18
     59c:	f3 1f       	adc	r31, r19
     59e:	65 e8       	ldi	r22, 0x85	; 133
     5a0:	68 0f       	add	r22, r24
     5a2:	63 30       	cpi	r22, 0x03	; 3
     5a4:	20 f4       	brcc	.+8      	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
     5a6:	6c e7       	ldi	r22, 0x7C	; 124
     5a8:	60 83       	st	Z, r22
     5aa:	61 e0       	ldi	r22, 0x01	; 1
     5ac:	01 c0       	rjmp	.+2      	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
     5ae:	60 e0       	ldi	r22, 0x00	; 0
     5b0:	e6 0f       	add	r30, r22
     5b2:	f1 1d       	adc	r31, r1
     5b4:	80 83       	st	Z, r24
     5b6:	6f 5f       	subi	r22, 0xFF	; 255
     5b8:	26 0f       	add	r18, r22
     5ba:	31 1d       	adc	r19, r1
     5bc:	41 50       	subi	r20, 0x01	; 1
     5be:	51 09       	sbc	r21, r1
     5c0:	55 23       	and	r21, r21
     5c2:	64 f6       	brge	.-104    	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
     5c4:	c9 01       	movw	r24, r18
     5c6:	01 96       	adiw	r24, 0x01	; 1
     5c8:	f8 01       	movw	r30, r16
     5ca:	e2 0f       	add	r30, r18
     5cc:	f3 1f       	adc	r31, r19
     5ce:	2d e7       	ldi	r18, 0x7D	; 125
     5d0:	20 83       	st	Z, r18
     5d2:	aa 81       	ldd	r26, Y+2	; 0x02
     5d4:	bb 81       	ldd	r27, Y+3	; 0x03
     5d6:	8d 93       	st	X+, r24
     5d8:	9c 93       	st	X, r25
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	1e c0       	rjmp	.+60     	; 0x61a <__EEPROM_REGION_LENGTH__+0x21a>
     5de:	ec 81       	ldd	r30, Y+4	; 0x04
     5e0:	fd 81       	ldd	r31, Y+5	; 0x05
     5e2:	8f 01       	movw	r16, r30
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	98 01       	movw	r18, r16
     5ea:	11 27       	eor	r17, r17
     5ec:	00 27       	eor	r16, r16
     5ee:	4c 2d       	mov	r20, r12
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	76 2f       	mov	r23, r22
     5f8:	65 2f       	mov	r22, r21
     5fa:	54 2f       	mov	r21, r20
     5fc:	44 27       	eor	r20, r20
     5fe:	62 61       	ori	r22, 0x12	; 18
     600:	c7 01       	movw	r24, r14
     602:	a0 e0       	ldi	r26, 0x00	; 0
     604:	b0 e0       	ldi	r27, 0x00	; 0
     606:	08 2b       	or	r16, r24
     608:	19 2b       	or	r17, r25
     60a:	2a 2b       	or	r18, r26
     60c:	3b 2b       	or	r19, r27
     60e:	f9 81       	ldd	r31, Y+1	; 0x01
     610:	4f 2b       	or	r20, r31
     612:	c1 01       	movw	r24, r2
     614:	0e 94 cc 00 	call	0x198	; 0x198 <ComIf_ErrorNotify>
     618:	82 e1       	ldi	r24, 0x12	; 18
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
     620:	0f 90       	pop	r0
     622:	0f 90       	pop	r0
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	df 90       	pop	r13
     632:	cf 90       	pop	r12
     634:	bf 90       	pop	r11
     636:	af 90       	pop	r10
     638:	9f 90       	pop	r9
     63a:	8f 90       	pop	r8
     63c:	7f 90       	pop	r7
     63e:	6f 90       	pop	r6
     640:	5f 90       	pop	r5
     642:	4f 90       	pop	r4
     644:	3f 90       	pop	r3
     646:	2f 90       	pop	r2
     648:	08 95       	ret

0000064a <ComIf_Transmit>:
     64a:	3f 92       	push	r3
     64c:	4f 92       	push	r4
     64e:	5f 92       	push	r5
     650:	6f 92       	push	r6
     652:	7f 92       	push	r7
     654:	8f 92       	push	r8
     656:	9f 92       	push	r9
     658:	af 92       	push	r10
     65a:	bf 92       	push	r11
     65c:	cf 92       	push	r12
     65e:	df 92       	push	r13
     660:	ef 92       	push	r14
     662:	ff 92       	push	r15
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	00 d0       	rcall	.+0      	; 0x66e <ComIf_Transmit+0x24>
     66e:	cd b7       	in	r28, 0x3d	; 61
     670:	de b7       	in	r29, 0x3e	; 62
     672:	48 2e       	mov	r4, r24
     674:	56 2e       	mov	r5, r22
     676:	32 2e       	mov	r3, r18
     678:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <ComIf_UpdateTxShadowBuffer>
     67c:	f8 2e       	mov	r15, r24
     67e:	81 11       	cpse	r24, r1
     680:	6c c0       	rjmp	.+216    	; 0x75a <ComIf_Transmit+0x110>
     682:	84 2c       	mov	r8, r4
     684:	91 2c       	mov	r9, r1
     686:	23 e1       	ldi	r18, 0x13	; 19
     688:	28 9d       	mul	r18, r8
     68a:	c0 01       	movw	r24, r0
     68c:	29 9d       	mul	r18, r9
     68e:	90 0d       	add	r25, r0
     690:	11 24       	eor	r1, r1
     692:	9c 01       	movw	r18, r24
     694:	2f 58       	subi	r18, 0x8F	; 143
     696:	3f 4f       	sbci	r19, 0xFF	; 255
     698:	69 01       	movw	r12, r18
     69a:	f9 01       	movw	r30, r18
     69c:	a2 84       	ldd	r10, Z+10	; 0x0a
     69e:	b3 84       	ldd	r11, Z+11	; 0x0b
     6a0:	fb e0       	ldi	r31, 0x0B	; 11
     6a2:	5f 9e       	mul	r5, r31
     6a4:	a0 0c       	add	r10, r0
     6a6:	b1 1c       	adc	r11, r1
     6a8:	11 24       	eor	r1, r1
     6aa:	f9 01       	movw	r30, r18
     6ac:	e6 80       	ldd	r14, Z+6	; 0x06
     6ae:	f7 80       	ldd	r15, Z+7	; 0x07
     6b0:	64 80       	ldd	r6, Z+4	; 0x04
     6b2:	75 80       	ldd	r7, Z+5	; 0x05
     6b4:	1a 82       	std	Y+2, r1	; 0x02
     6b6:	19 82       	std	Y+1, r1	; 0x01
     6b8:	82 89       	ldd	r24, Z+18	; 0x12
     6ba:	84 fd       	sbrc	r24, 4
     6bc:	18 c0       	rjmp	.+48     	; 0x6ee <ComIf_Transmit+0xa4>
     6be:	83 e1       	ldi	r24, 0x13	; 19
     6c0:	88 9d       	mul	r24, r8
     6c2:	f0 01       	movw	r30, r0
     6c4:	89 9d       	mul	r24, r9
     6c6:	f0 0d       	add	r31, r0
     6c8:	11 24       	eor	r1, r1
     6ca:	ed 57       	subi	r30, 0x7D	; 125
     6cc:	ff 4f       	sbci	r31, 0xFF	; 255
     6ce:	80 81       	ld	r24, Z
     6d0:	80 61       	ori	r24, 0x10	; 16
     6d2:	80 83       	st	Z, r24
     6d4:	83 01       	movw	r16, r6
     6d6:	9e 01       	movw	r18, r28
     6d8:	2f 5f       	subi	r18, 0xFF	; 255
     6da:	3f 4f       	sbci	r19, 0xFF	; 255
     6dc:	43 2d       	mov	r20, r3
     6de:	65 2d       	mov	r22, r5
     6e0:	84 2d       	mov	r24, r4
     6e2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ComIf_EncodeFromShadowToChannelBuffer>
     6e6:	f8 2e       	mov	r15, r24
     6e8:	81 11       	cpse	r24, r1
     6ea:	19 c0       	rjmp	.+50     	; 0x71e <ComIf_Transmit+0xd4>
     6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <ComIf_Transmit+0xa8>
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	4c c0       	rjmp	.+152    	; 0x78a <ComIf_Transmit+0x140>
     6f2:	83 e1       	ldi	r24, 0x13	; 19
     6f4:	88 9d       	mul	r24, r8
     6f6:	f0 01       	movw	r30, r0
     6f8:	89 9d       	mul	r24, r9
     6fa:	f0 0d       	add	r31, r0
     6fc:	11 24       	eor	r1, r1
     6fe:	ef 58       	subi	r30, 0x8F	; 143
     700:	ff 4f       	sbci	r31, 0xFF	; 255
     702:	01 90       	ld	r0, Z+
     704:	f0 81       	ld	r31, Z
     706:	e0 2d       	mov	r30, r0
     708:	b3 01       	movw	r22, r6
     70a:	89 81       	ldd	r24, Y+1	; 0x01
     70c:	9a 81       	ldd	r25, Y+2	; 0x02
     70e:	09 95       	icall
     710:	f8 2e       	mov	r15, r24
     712:	81 11       	cpse	r24, r1
     714:	04 c0       	rjmp	.+8      	; 0x71e <ComIf_Transmit+0xd4>
     716:	f5 01       	movw	r30, r10
     718:	84 81       	ldd	r24, Z+4	; 0x04
     71a:	80 61       	ori	r24, 0x10	; 16
     71c:	84 83       	std	Z+4, r24	; 0x04
     71e:	ff 20       	and	r15, r15
     720:	d1 f0       	breq	.+52     	; 0x756 <ComIf_Transmit+0x10c>
     722:	83 e1       	ldi	r24, 0x13	; 19
     724:	88 9d       	mul	r24, r8
     726:	f0 01       	movw	r30, r0
     728:	89 9d       	mul	r24, r9
     72a:	f0 0d       	add	r31, r0
     72c:	11 24       	eor	r1, r1
     72e:	ed 57       	subi	r30, 0x7D	; 125
     730:	ff 4f       	sbci	r31, 0xFF	; 255
     732:	80 81       	ld	r24, Z
     734:	8f 7e       	andi	r24, 0xEF	; 239
     736:	80 83       	st	Z, r24
     738:	04 2d       	mov	r16, r4
     73a:	10 e0       	ldi	r17, 0x00	; 0
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	98 01       	movw	r18, r16
     742:	11 27       	eor	r17, r17
     744:	00 27       	eor	r16, r16
     746:	05 29       	or	r16, r5
     748:	4f 2d       	mov	r20, r15
     74a:	50 e0       	ldi	r21, 0x00	; 0
     74c:	60 e0       	ldi	r22, 0x00	; 0
     74e:	70 e0       	ldi	r23, 0x00	; 0
     750:	c6 01       	movw	r24, r12
     752:	0e 94 cc 00 	call	0x198	; 0x198 <ComIf_ErrorNotify>
     756:	8f 2d       	mov	r24, r15
     758:	18 c0       	rjmp	.+48     	; 0x78a <ComIf_Transmit+0x140>
     75a:	41 10       	cpse	r4, r1
     75c:	16 c0       	rjmp	.+44     	; 0x78a <ComIf_Transmit+0x140>
     75e:	f3 e1       	ldi	r31, 0x13	; 19
     760:	4f 9e       	mul	r4, r31
     762:	c0 01       	movw	r24, r0
     764:	11 24       	eor	r1, r1
     766:	04 2d       	mov	r16, r4
     768:	10 e0       	ldi	r17, 0x00	; 0
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	98 01       	movw	r18, r16
     770:	11 27       	eor	r17, r17
     772:	00 27       	eor	r16, r16
     774:	05 29       	or	r16, r5
     776:	4f 2d       	mov	r20, r15
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	8f 58       	subi	r24, 0x8F	; 143
     780:	9f 4f       	sbci	r25, 0xFF	; 255
     782:	0e 94 cc 00 	call	0x198	; 0x198 <ComIf_ErrorNotify>
     786:	8f 2d       	mov	r24, r15
     788:	00 c0       	rjmp	.+0      	; 0x78a <ComIf_Transmit+0x140>
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
     796:	ff 90       	pop	r15
     798:	ef 90       	pop	r14
     79a:	df 90       	pop	r13
     79c:	cf 90       	pop	r12
     79e:	bf 90       	pop	r11
     7a0:	af 90       	pop	r10
     7a2:	9f 90       	pop	r9
     7a4:	8f 90       	pop	r8
     7a6:	7f 90       	pop	r7
     7a8:	6f 90       	pop	r6
     7aa:	5f 90       	pop	r5
     7ac:	4f 90       	pop	r4
     7ae:	3f 90       	pop	r3
     7b0:	08 95       	ret

000007b2 <ComIf_UpdateTxShadowBuffer>:
     7b2:	ef 92       	push	r14
     7b4:	ff 92       	push	r15
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	1f 92       	push	r1
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62
     7c4:	29 83       	std	Y+1, r18	; 0x01
     7c6:	81 11       	cpse	r24, r1
     7c8:	5a c0       	rjmp	.+180    	; 0x87e <__stack+0x1f>
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	23 e1       	ldi	r18, 0x13	; 19
     7ce:	28 9f       	mul	r18, r24
     7d0:	f0 01       	movw	r30, r0
     7d2:	29 9f       	mul	r18, r25
     7d4:	f0 0d       	add	r31, r0
     7d6:	11 24       	eor	r1, r1
     7d8:	ef 58       	subi	r30, 0x8F	; 143
     7da:	ff 4f       	sbci	r31, 0xFF	; 255
     7dc:	24 85       	ldd	r18, Z+12	; 0x0c
     7de:	62 17       	cp	r22, r18
     7e0:	08 f0       	brcs	.+2      	; 0x7e4 <ComIf_UpdateTxShadowBuffer+0x32>
     7e2:	4f c0       	rjmp	.+158    	; 0x882 <__stack+0x23>
     7e4:	23 e1       	ldi	r18, 0x13	; 19
     7e6:	28 9f       	mul	r18, r24
     7e8:	f0 01       	movw	r30, r0
     7ea:	29 9f       	mul	r18, r25
     7ec:	f0 0d       	add	r31, r0
     7ee:	11 24       	eor	r1, r1
     7f0:	ef 58       	subi	r30, 0x8F	; 143
     7f2:	ff 4f       	sbci	r31, 0xFF	; 255
     7f4:	e2 84       	ldd	r14, Z+10	; 0x0a
     7f6:	f3 84       	ldd	r15, Z+11	; 0x0b
     7f8:	2b e0       	ldi	r18, 0x0B	; 11
     7fa:	62 9f       	mul	r22, r18
     7fc:	e0 0c       	add	r14, r0
     7fe:	f1 1c       	adc	r15, r1
     800:	11 24       	eor	r1, r1
     802:	d7 01       	movw	r26, r14
     804:	11 96       	adiw	r26, 0x01	; 1
     806:	2c 91       	ld	r18, X
     808:	39 81       	ldd	r19, Y+1	; 0x01
     80a:	23 17       	cp	r18, r19
     80c:	79 f0       	breq	.+30     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     80e:	21 11       	cpse	r18, r1
     810:	3a c0       	rjmp	.+116    	; 0x886 <__stack+0x27>
     812:	33 23       	and	r19, r19
     814:	d1 f1       	breq	.+116    	; 0x88a <__stack+0x2b>
     816:	23 e1       	ldi	r18, 0x13	; 19
     818:	28 9f       	mul	r18, r24
     81a:	f0 01       	movw	r30, r0
     81c:	29 9f       	mul	r18, r25
     81e:	f0 0d       	add	r31, r0
     820:	11 24       	eor	r1, r1
     822:	ef 58       	subi	r30, 0x8F	; 143
     824:	ff 4f       	sbci	r31, 0xFF	; 255
     826:	80 85       	ldd	r24, Z+8	; 0x08
     828:	83 17       	cp	r24, r19
     82a:	88 f1       	brcs	.+98     	; 0x88e <__stack+0x2f>
     82c:	8a 01       	movw	r16, r20
     82e:	d7 01       	movw	r26, r14
     830:	19 96       	adiw	r26, 0x09	; 9
     832:	ed 91       	ld	r30, X+
     834:	fc 91       	ld	r31, X
     836:	1a 97       	sbiw	r26, 0x0a	; 10
     838:	30 97       	sbiw	r30, 0x00	; 0
     83a:	31 f0       	breq	.+12     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     83c:	be 01       	movw	r22, r28
     83e:	6f 5f       	subi	r22, 0xFF	; 255
     840:	7f 4f       	sbci	r23, 0xFF	; 255
     842:	ca 01       	movw	r24, r20
     844:	09 95       	icall
     846:	01 c0       	rjmp	.+2      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	88 23       	and	r24, r24
     84c:	81 f0       	breq	.+32     	; 0x86e <__stack+0xf>
     84e:	20 c0       	rjmp	.+64     	; 0x890 <__stack+0x31>
     850:	d7 01       	movw	r26, r14
     852:	15 96       	adiw	r26, 0x05	; 5
     854:	ed 91       	ld	r30, X+
     856:	fc 91       	ld	r31, X
     858:	16 97       	sbiw	r26, 0x06	; 6
     85a:	e2 0f       	add	r30, r18
     85c:	f3 1f       	adc	r31, r19
     85e:	d8 01       	movw	r26, r16
     860:	a2 0f       	add	r26, r18
     862:	b3 1f       	adc	r27, r19
     864:	9c 91       	ld	r25, X
     866:	90 83       	st	Z, r25
     868:	2f 5f       	subi	r18, 0xFF	; 255
     86a:	3f 4f       	sbci	r19, 0xFF	; 255
     86c:	02 c0       	rjmp	.+4      	; 0x872 <__stack+0x13>
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	49 81       	ldd	r20, Y+1	; 0x01
     874:	50 e0       	ldi	r21, 0x00	; 0
     876:	24 17       	cp	r18, r20
     878:	35 07       	cpc	r19, r21
     87a:	54 f3       	brlt	.-44     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
     87c:	09 c0       	rjmp	.+18     	; 0x890 <__stack+0x31>
     87e:	81 e1       	ldi	r24, 0x11	; 17
     880:	07 c0       	rjmp	.+14     	; 0x890 <__stack+0x31>
     882:	80 e1       	ldi	r24, 0x10	; 16
     884:	05 c0       	rjmp	.+10     	; 0x890 <__stack+0x31>
     886:	8e e0       	ldi	r24, 0x0E	; 14
     888:	03 c0       	rjmp	.+6      	; 0x890 <__stack+0x31>
     88a:	8e e0       	ldi	r24, 0x0E	; 14
     88c:	01 c0       	rjmp	.+2      	; 0x890 <__stack+0x31>
     88e:	8e e0       	ldi	r24, 0x0E	; 14
     890:	0f 90       	pop	r0
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	1f 91       	pop	r17
     898:	0f 91       	pop	r16
     89a:	ff 90       	pop	r15
     89c:	ef 90       	pop	r14
     89e:	08 95       	ret

000008a0 <Buffer_GetBuffer>:
     8a0:	81 11       	cpse	r24, r1
     8a2:	0b c0       	rjmp	.+22     	; 0x8ba <Buffer_GetBuffer+0x1a>
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	9c 01       	movw	r18, r24
     8a8:	22 0f       	add	r18, r18
     8aa:	33 1f       	adc	r19, r19
     8ac:	82 0f       	add	r24, r18
     8ae:	93 1f       	adc	r25, r19
     8b0:	88 0f       	add	r24, r24
     8b2:	99 1f       	adc	r25, r25
     8b4:	83 5e       	subi	r24, 0xE3	; 227
     8b6:	9b 4f       	sbci	r25, 0xFB	; 251
     8b8:	08 95       	ret
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	08 95       	ret

000008c0 <Buffer_Create>:
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	cf 93       	push	r28
     8c6:	8b 01       	movw	r16, r22
     8c8:	c4 2f       	mov	r28, r20
     8ca:	0e 94 50 04 	call	0x8a0	; 0x8a0 <Buffer_GetBuffer>
     8ce:	00 97       	sbiw	r24, 0x00	; 0
     8d0:	69 f0       	breq	.+26     	; 0x8ec <Buffer_Create+0x2c>
     8d2:	fc 01       	movw	r30, r24
     8d4:	20 81       	ld	r18, Z
     8d6:	31 81       	ldd	r19, Z+1	; 0x01
     8d8:	23 2b       	or	r18, r19
     8da:	51 f4       	brne	.+20     	; 0x8f0 <Buffer_Create+0x30>
     8dc:	11 83       	std	Z+1, r17	; 0x01
     8de:	00 83       	st	Z, r16
     8e0:	c2 83       	std	Z+2, r28	; 0x02
     8e2:	14 82       	std	Z+4, r1	; 0x04
     8e4:	13 82       	std	Z+3, r1	; 0x03
     8e6:	15 82       	std	Z+5, r1	; 0x05
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	03 c0       	rjmp	.+6      	; 0x8f2 <Buffer_Create+0x32>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <Buffer_Create+0x32>
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	cf 91       	pop	r28
     8f4:	1f 91       	pop	r17
     8f6:	0f 91       	pop	r16
     8f8:	08 95       	ret

000008fa <Buffer_EnQueue>:
     8fa:	cf 93       	push	r28
     8fc:	c6 2f       	mov	r28, r22
     8fe:	0e 94 50 04 	call	0x8a0	; 0x8a0 <Buffer_GetBuffer>
     902:	fc 01       	movw	r30, r24
     904:	89 2b       	or	r24, r25
     906:	d9 f0       	breq	.+54     	; 0x93e <Buffer_EnQueue+0x44>
     908:	80 81       	ld	r24, Z
     90a:	91 81       	ldd	r25, Z+1	; 0x01
     90c:	00 97       	sbiw	r24, 0x00	; 0
     90e:	c9 f0       	breq	.+50     	; 0x942 <Buffer_EnQueue+0x48>
     910:	33 81       	ldd	r19, Z+3	; 0x03
     912:	22 81       	ldd	r18, Z+2	; 0x02
     914:	32 17       	cp	r19, r18
     916:	b8 f4       	brcc	.+46     	; 0x946 <Buffer_EnQueue+0x4c>
     918:	25 81       	ldd	r18, Z+5	; 0x05
     91a:	dc 01       	movw	r26, r24
     91c:	a2 0f       	add	r26, r18
     91e:	b1 1d       	adc	r27, r1
     920:	cc 93       	st	X, r28
     922:	85 81       	ldd	r24, Z+5	; 0x05
     924:	8f 5f       	subi	r24, 0xFF	; 255
     926:	85 83       	std	Z+5, r24	; 0x05
     928:	93 81       	ldd	r25, Z+3	; 0x03
     92a:	9f 5f       	subi	r25, 0xFF	; 255
     92c:	93 83       	std	Z+3, r25	; 0x03
     92e:	22 81       	ldd	r18, Z+2	; 0x02
     930:	82 13       	cpse	r24, r18
     932:	0b c0       	rjmp	.+22     	; 0x94a <Buffer_EnQueue+0x50>
     934:	92 17       	cp	r25, r18
     936:	58 f4       	brcc	.+22     	; 0x94e <Buffer_EnQueue+0x54>
     938:	15 82       	std	Z+5, r1	; 0x05
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	09 c0       	rjmp	.+18     	; 0x950 <Buffer_EnQueue+0x56>
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	07 c0       	rjmp	.+14     	; 0x950 <Buffer_EnQueue+0x56>
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	05 c0       	rjmp	.+10     	; 0x950 <Buffer_EnQueue+0x56>
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	03 c0       	rjmp	.+6      	; 0x950 <Buffer_EnQueue+0x56>
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	01 c0       	rjmp	.+2      	; 0x950 <Buffer_EnQueue+0x56>
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <Buffer_DeQueue>:
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	eb 01       	movw	r28, r22
     95a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <Buffer_GetBuffer>
     95e:	fc 01       	movw	r30, r24
     960:	89 2b       	or	r24, r25
     962:	21 f1       	breq	.+72     	; 0x9ac <Buffer_DeQueue+0x58>
     964:	80 81       	ld	r24, Z
     966:	91 81       	ldd	r25, Z+1	; 0x01
     968:	00 97       	sbiw	r24, 0x00	; 0
     96a:	11 f1       	breq	.+68     	; 0x9b0 <Buffer_DeQueue+0x5c>
     96c:	23 81       	ldd	r18, Z+3	; 0x03
     96e:	22 23       	and	r18, r18
     970:	09 f1       	breq	.+66     	; 0x9b4 <Buffer_DeQueue+0x60>
     972:	24 81       	ldd	r18, Z+4	; 0x04
     974:	dc 01       	movw	r26, r24
     976:	a2 0f       	add	r26, r18
     978:	b1 1d       	adc	r27, r1
     97a:	8c 91       	ld	r24, X
     97c:	88 83       	st	Y, r24
     97e:	a0 81       	ld	r26, Z
     980:	b1 81       	ldd	r27, Z+1	; 0x01
     982:	84 81       	ldd	r24, Z+4	; 0x04
     984:	a8 0f       	add	r26, r24
     986:	b1 1d       	adc	r27, r1
     988:	1c 92       	st	X, r1
     98a:	94 81       	ldd	r25, Z+4	; 0x04
     98c:	9f 5f       	subi	r25, 0xFF	; 255
     98e:	94 83       	std	Z+4, r25	; 0x04
     990:	83 81       	ldd	r24, Z+3	; 0x03
     992:	81 50       	subi	r24, 0x01	; 1
     994:	83 83       	std	Z+3, r24	; 0x03
     996:	22 81       	ldd	r18, Z+2	; 0x02
     998:	92 13       	cpse	r25, r18
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <Buffer_DeQueue+0x4c>
     99c:	81 11       	cpse	r24, r1
     99e:	14 82       	std	Z+4, r1	; 0x04
     9a0:	81 11       	cpse	r24, r1
     9a2:	0a c0       	rjmp	.+20     	; 0x9b8 <Buffer_DeQueue+0x64>
     9a4:	14 82       	std	Z+4, r1	; 0x04
     9a6:	15 82       	std	Z+5, r1	; 0x05
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	07 c0       	rjmp	.+14     	; 0x9ba <Buffer_DeQueue+0x66>
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	05 c0       	rjmp	.+10     	; 0x9ba <Buffer_DeQueue+0x66>
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	03 c0       	rjmp	.+6      	; 0x9ba <Buffer_DeQueue+0x66>
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	01 c0       	rjmp	.+2      	; 0x9ba <Buffer_DeQueue+0x66>
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	08 95       	ret

000009c0 <Buffer_Length>:
     9c0:	0e 94 50 04 	call	0x8a0	; 0x8a0 <Buffer_GetBuffer>
     9c4:	00 97       	sbiw	r24, 0x00	; 0
     9c6:	39 f0       	breq	.+14     	; 0x9d6 <Buffer_Length+0x16>
     9c8:	fc 01       	movw	r30, r24
     9ca:	20 81       	ld	r18, Z
     9cc:	31 81       	ldd	r19, Z+1	; 0x01
     9ce:	23 2b       	or	r18, r19
     9d0:	21 f0       	breq	.+8      	; 0x9da <Buffer_Length+0x1a>
     9d2:	83 81       	ldd	r24, Z+3	; 0x03
     9d4:	08 95       	ret
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	08 95       	ret
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	08 95       	ret

000009de <StringHelper_GetPointerAfter>:
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	fc 01       	movw	r30, r24
     9e8:	01 90       	ld	r0, Z+
     9ea:	00 20       	and	r0, r0
     9ec:	e9 f7       	brne	.-6      	; 0x9e8 <StringHelper_GetPointerAfter+0xa>
     9ee:	31 97       	sbiw	r30, 0x01	; 1
     9f0:	e8 1b       	sub	r30, r24
     9f2:	f9 0b       	sbc	r31, r25
     9f4:	db 01       	movw	r26, r22
     9f6:	0d 90       	ld	r0, X+
     9f8:	00 20       	and	r0, r0
     9fa:	e9 f7       	brne	.-6      	; 0x9f6 <StringHelper_GetPointerAfter+0x18>
     9fc:	11 97       	sbiw	r26, 0x01	; 1
     9fe:	ed 01       	movw	r28, r26
     a00:	c6 1b       	sub	r28, r22
     a02:	d7 0b       	sbc	r29, r23
     a04:	ce 17       	cp	r28, r30
     a06:	df 07       	cpc	r29, r31
     a08:	84 f4       	brge	.+32     	; 0xa2a <StringHelper_GetPointerAfter+0x4c>
     a0a:	20 97       	sbiw	r28, 0x00	; 0
     a0c:	71 f0       	breq	.+28     	; 0xa2a <StringHelper_GetPointerAfter+0x4c>
     a0e:	0e 94 26 14 	call	0x284c	; 0x284c <strstr>
     a12:	fc 01       	movw	r30, r24
     a14:	01 90       	ld	r0, Z+
     a16:	00 20       	and	r0, r0
     a18:	e9 f7       	brne	.-6      	; 0xa14 <StringHelper_GetPointerAfter+0x36>
     a1a:	31 97       	sbiw	r30, 0x01	; 1
     a1c:	e8 1b       	sub	r30, r24
     a1e:	f9 0b       	sbc	r31, r25
     a20:	ce 17       	cp	r28, r30
     a22:	df 07       	cpc	r29, r31
     a24:	11 f0       	breq	.+4      	; 0xa2a <StringHelper_GetPointerAfter+0x4c>
     a26:	8c 0f       	add	r24, r28
     a28:	9d 1f       	adc	r25, r29
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	1f 91       	pop	r17
     a30:	0f 91       	pop	r16
     a32:	08 95       	ret

00000a34 <StringHelper_SplitAndGet>:
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	dc 01       	movw	r26, r24
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	c0 e0       	ldi	r28, 0x00	; 0
     a44:	d0 e0       	ldi	r29, 0x00	; 0
     a46:	00 e0       	ldi	r16, 0x00	; 0
     a48:	10 e0       	ldi	r17, 0x00	; 0
     a4a:	0f c0       	rjmp	.+30     	; 0xa6a <StringHelper_SplitAndGet+0x36>
     a4c:	86 13       	cpse	r24, r22
     a4e:	0b c0       	rjmp	.+22     	; 0xa66 <StringHelper_SplitAndGet+0x32>
     a50:	0f 5f       	subi	r16, 0xFF	; 255
     a52:	1f 4f       	sbci	r17, 0xFF	; 255
     a54:	04 17       	cp	r16, r20
     a56:	15 07       	cpc	r17, r21
     a58:	21 f4       	brne	.+8      	; 0xa62 <StringHelper_SplitAndGet+0x2e>
     a5a:	b9 01       	movw	r22, r18
     a5c:	6c 1b       	sub	r22, r28
     a5e:	7d 0b       	sbc	r23, r29
     a60:	0c c0       	rjmp	.+24     	; 0xa7a <StringHelper_SplitAndGet+0x46>
     a62:	e9 01       	movw	r28, r18
     a64:	21 96       	adiw	r28, 0x01	; 1
     a66:	2f 5f       	subi	r18, 0xFF	; 255
     a68:	3f 4f       	sbci	r19, 0xFF	; 255
     a6a:	fd 01       	movw	r30, r26
     a6c:	e2 0f       	add	r30, r18
     a6e:	f3 1f       	adc	r31, r19
     a70:	80 81       	ld	r24, Z
     a72:	81 11       	cpse	r24, r1
     a74:	eb cf       	rjmp	.-42     	; 0xa4c <StringHelper_SplitAndGet+0x18>
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	61 15       	cp	r22, r1
     a7c:	71 05       	cpc	r23, r1
     a7e:	41 f4       	brne	.+16     	; 0xa90 <StringHelper_SplitAndGet+0x5c>
     a80:	0f 5f       	subi	r16, 0xFF	; 255
     a82:	1f 4f       	sbci	r17, 0xFF	; 255
     a84:	04 17       	cp	r16, r20
     a86:	15 07       	cpc	r17, r21
     a88:	19 f4       	brne	.+6      	; 0xa90 <StringHelper_SplitAndGet+0x5c>
     a8a:	b9 01       	movw	r22, r18
     a8c:	6c 1b       	sub	r22, r28
     a8e:	7d 0b       	sbc	r23, r29
     a90:	61 15       	cp	r22, r1
     a92:	71 05       	cpc	r23, r1
     a94:	09 f1       	breq	.+66     	; 0xad8 <StringHelper_SplitAndGet+0xa4>
     a96:	ab 01       	movw	r20, r22
     a98:	4f 5f       	subi	r20, 0xFF	; 255
     a9a:	5f 4f       	sbci	r21, 0xFF	; 255
     a9c:	4f 3f       	cpi	r20, 0xFF	; 255
     a9e:	51 05       	cpc	r21, r1
     aa0:	89 f0       	breq	.+34     	; 0xac4 <StringHelper_SplitAndGet+0x90>
     aa2:	80 f0       	brcs	.+32     	; 0xac4 <StringHelper_SplitAndGet+0x90>
     aa4:	40 e0       	ldi	r20, 0x00	; 0
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	19 c0       	rjmp	.+50     	; 0xadc <StringHelper_SplitAndGet+0xa8>
     aaa:	fd 01       	movw	r30, r26
     aac:	ec 0f       	add	r30, r28
     aae:	fd 1f       	adc	r31, r29
     ab0:	e2 0f       	add	r30, r18
     ab2:	f3 1f       	adc	r31, r19
     ab4:	90 81       	ld	r25, Z
     ab6:	f9 01       	movw	r30, r18
     ab8:	ed 5d       	subi	r30, 0xDD	; 221
     aba:	fb 4f       	sbci	r31, 0xFB	; 251
     abc:	90 83       	st	Z, r25
     abe:	2f 5f       	subi	r18, 0xFF	; 255
     ac0:	3f 4f       	sbci	r19, 0xFF	; 255
     ac2:	02 c0       	rjmp	.+4      	; 0xac8 <StringHelper_SplitAndGet+0x94>
     ac4:	20 e0       	ldi	r18, 0x00	; 0
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	26 17       	cp	r18, r22
     aca:	37 07       	cpc	r19, r23
     acc:	70 f3       	brcs	.-36     	; 0xaaa <StringHelper_SplitAndGet+0x76>
     ace:	f9 01       	movw	r30, r18
     ad0:	ed 5d       	subi	r30, 0xDD	; 221
     ad2:	fb 4f       	sbci	r31, 0xFB	; 251
     ad4:	10 82       	st	Z, r1
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <StringHelper_SplitAndGet+0xa8>
     ad8:	40 e0       	ldi	r20, 0x00	; 0
     ada:	50 e0       	ldi	r21, 0x00	; 0
     adc:	ca 01       	movw	r24, r20
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	08 95       	ret

00000ae8 <StringHelper_startsWith>:
     ae8:	cf 92       	push	r12
     aea:	df 92       	push	r13
     aec:	ef 92       	push	r14
     aee:	ff 92       	push	r15
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	fc 01       	movw	r30, r24
     af6:	01 90       	ld	r0, Z+
     af8:	00 20       	and	r0, r0
     afa:	e9 f7       	brne	.-6      	; 0xaf6 <StringHelper_startsWith+0xe>
     afc:	31 97       	sbiw	r30, 0x01	; 1
     afe:	af 01       	movw	r20, r30
     b00:	48 1b       	sub	r20, r24
     b02:	59 0b       	sbc	r21, r25
     b04:	6a 01       	movw	r12, r20
     b06:	e1 2c       	mov	r14, r1
     b08:	f1 2c       	mov	r15, r1
     b0a:	fb 01       	movw	r30, r22
     b0c:	01 90       	ld	r0, Z+
     b0e:	00 20       	and	r0, r0
     b10:	e9 f7       	brne	.-6      	; 0xb0c <StringHelper_startsWith+0x24>
     b12:	31 97       	sbiw	r30, 0x01	; 1
     b14:	8f 01       	movw	r16, r30
     b16:	06 1b       	sub	r16, r22
     b18:	17 0b       	sbc	r17, r23
     b1a:	20 e0       	ldi	r18, 0x00	; 0
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	0c 15       	cp	r16, r12
     b20:	1d 05       	cpc	r17, r13
     b22:	2e 05       	cpc	r18, r14
     b24:	3f 05       	cpc	r19, r15
     b26:	30 f0       	brcs	.+12     	; 0xb34 <StringHelper_startsWith+0x4c>
     b28:	0e 94 00 14 	call	0x2800	; 0x2800 <memcmp>
     b2c:	89 2b       	or	r24, r25
     b2e:	21 f0       	breq	.+8      	; 0xb38 <StringHelper_startsWith+0x50>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	03 c0       	rjmp	.+6      	; 0xb3a <StringHelper_startsWith+0x52>
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	01 c0       	rjmp	.+2      	; 0xb3a <StringHelper_startsWith+0x52>
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	df 90       	pop	r13
     b44:	cf 90       	pop	r12
     b46:	08 95       	ret

00000b48 <lcd_data>:
     b48:	84 ff       	sbrs	r24, 4
     b4a:	04 c0       	rjmp	.+8      	; 0xb54 <lcd_data+0xc>
     b4c:	92 b3       	in	r25, 0x12	; 18
     b4e:	90 61       	ori	r25, 0x10	; 16
     b50:	92 bb       	out	0x12, r25	; 18
     b52:	03 c0       	rjmp	.+6      	; 0xb5a <lcd_data+0x12>
     b54:	92 b3       	in	r25, 0x12	; 18
     b56:	9f 7e       	andi	r25, 0xEF	; 239
     b58:	92 bb       	out	0x12, r25	; 18
     b5a:	85 ff       	sbrs	r24, 5
     b5c:	04 c0       	rjmp	.+8      	; 0xb66 <lcd_data+0x1e>
     b5e:	92 b3       	in	r25, 0x12	; 18
     b60:	90 62       	ori	r25, 0x20	; 32
     b62:	92 bb       	out	0x12, r25	; 18
     b64:	03 c0       	rjmp	.+6      	; 0xb6c <lcd_data+0x24>
     b66:	92 b3       	in	r25, 0x12	; 18
     b68:	9f 7d       	andi	r25, 0xDF	; 223
     b6a:	92 bb       	out	0x12, r25	; 18
     b6c:	86 ff       	sbrs	r24, 6
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <lcd_data+0x30>
     b70:	92 b3       	in	r25, 0x12	; 18
     b72:	90 64       	ori	r25, 0x40	; 64
     b74:	92 bb       	out	0x12, r25	; 18
     b76:	03 c0       	rjmp	.+6      	; 0xb7e <lcd_data+0x36>
     b78:	92 b3       	in	r25, 0x12	; 18
     b7a:	9f 7b       	andi	r25, 0xBF	; 191
     b7c:	92 bb       	out	0x12, r25	; 18
     b7e:	88 23       	and	r24, r24
     b80:	24 f4       	brge	.+8      	; 0xb8a <lcd_data+0x42>
     b82:	82 b3       	in	r24, 0x12	; 18
     b84:	80 68       	ori	r24, 0x80	; 128
     b86:	82 bb       	out	0x12, r24	; 18
     b88:	08 95       	ret
     b8a:	82 b3       	in	r24, 0x12	; 18
     b8c:	8f 77       	andi	r24, 0x7F	; 127
     b8e:	82 bb       	out	0x12, r24	; 18
     b90:	08 95       	ret

00000b92 <lcd_cursor>:
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	0e 94 a4 05 	call	0xb48	; 0xb48 <lcd_data>
     b98:	88 b3       	in	r24, 0x18	; 24
     b9a:	87 7f       	andi	r24, 0xF7	; 247
     b9c:	88 bb       	out	0x18, r24	; 24
     b9e:	88 b3       	in	r24, 0x18	; 24
     ba0:	80 61       	ori	r24, 0x10	; 16
     ba2:	88 bb       	out	0x18, r24	; 24
     ba4:	8f ec       	ldi	r24, 0xCF	; 207
     ba6:	97 e0       	ldi	r25, 0x07	; 7
     ba8:	01 97       	sbiw	r24, 0x01	; 1
     baa:	f1 f7       	brne	.-4      	; 0xba8 <lcd_cursor+0x16>
     bac:	00 c0       	rjmp	.+0      	; 0xbae <lcd_cursor+0x1c>
     bae:	00 00       	nop
     bb0:	88 b3       	in	r24, 0x18	; 24
     bb2:	8f 7e       	andi	r24, 0xEF	; 239
     bb4:	88 bb       	out	0x18, r24	; 24
     bb6:	80 e2       	ldi	r24, 0x20	; 32
     bb8:	0e 94 a4 05 	call	0xb48	; 0xb48 <lcd_data>
     bbc:	88 b3       	in	r24, 0x18	; 24
     bbe:	87 7f       	andi	r24, 0xF7	; 247
     bc0:	88 bb       	out	0x18, r24	; 24
     bc2:	88 b3       	in	r24, 0x18	; 24
     bc4:	80 61       	ori	r24, 0x10	; 16
     bc6:	88 bb       	out	0x18, r24	; 24
     bc8:	8f ec       	ldi	r24, 0xCF	; 207
     bca:	97 e0       	ldi	r25, 0x07	; 7
     bcc:	01 97       	sbiw	r24, 0x01	; 1
     bce:	f1 f7       	brne	.-4      	; 0xbcc <lcd_cursor+0x3a>
     bd0:	00 c0       	rjmp	.+0      	; 0xbd2 <lcd_cursor+0x40>
     bd2:	00 00       	nop
     bd4:	88 b3       	in	r24, 0x18	; 24
     bd6:	8f 7e       	andi	r24, 0xEF	; 239
     bd8:	88 bb       	out	0x18, r24	; 24
     bda:	08 95       	ret

00000bdc <lcd_clrscr>:
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	0e 94 a4 05 	call	0xb48	; 0xb48 <lcd_data>
     be2:	88 b3       	in	r24, 0x18	; 24
     be4:	87 7f       	andi	r24, 0xF7	; 247
     be6:	88 bb       	out	0x18, r24	; 24
     be8:	88 b3       	in	r24, 0x18	; 24
     bea:	80 61       	ori	r24, 0x10	; 16
     bec:	88 bb       	out	0x18, r24	; 24
     bee:	8f ec       	ldi	r24, 0xCF	; 207
     bf0:	97 e0       	ldi	r25, 0x07	; 7
     bf2:	01 97       	sbiw	r24, 0x01	; 1
     bf4:	f1 f7       	brne	.-4      	; 0xbf2 <lcd_clrscr+0x16>
     bf6:	00 c0       	rjmp	.+0      	; 0xbf8 <lcd_clrscr+0x1c>
     bf8:	00 00       	nop
     bfa:	88 b3       	in	r24, 0x18	; 24
     bfc:	8f 7e       	andi	r24, 0xEF	; 239
     bfe:	88 bb       	out	0x18, r24	; 24
     c00:	80 e1       	ldi	r24, 0x10	; 16
     c02:	0e 94 a4 05 	call	0xb48	; 0xb48 <lcd_data>
     c06:	88 b3       	in	r24, 0x18	; 24
     c08:	87 7f       	andi	r24, 0xF7	; 247
     c0a:	88 bb       	out	0x18, r24	; 24
     c0c:	88 b3       	in	r24, 0x18	; 24
     c0e:	80 61       	ori	r24, 0x10	; 16
     c10:	88 bb       	out	0x18, r24	; 24
     c12:	8f ec       	ldi	r24, 0xCF	; 207
     c14:	97 e0       	ldi	r25, 0x07	; 7
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	f1 f7       	brne	.-4      	; 0xc16 <lcd_clrscr+0x3a>
     c1a:	00 c0       	rjmp	.+0      	; 0xc1c <lcd_clrscr+0x40>
     c1c:	00 00       	nop
     c1e:	88 b3       	in	r24, 0x18	; 24
     c20:	8f 7e       	andi	r24, 0xEF	; 239
     c22:	88 bb       	out	0x18, r24	; 24
     c24:	08 95       	ret

00000c26 <lcd_cmd>:
     c26:	cf 93       	push	r28
     c28:	c8 2f       	mov	r28, r24
     c2a:	80 7f       	andi	r24, 0xF0	; 240
     c2c:	0e 94 a4 05 	call	0xb48	; 0xb48 <lcd_data>
     c30:	88 b3       	in	r24, 0x18	; 24
     c32:	87 7f       	andi	r24, 0xF7	; 247
     c34:	88 bb       	out	0x18, r24	; 24
     c36:	88 b3       	in	r24, 0x18	; 24
     c38:	80 61       	ori	r24, 0x10	; 16
     c3a:	88 bb       	out	0x18, r24	; 24
     c3c:	82 e4       	ldi	r24, 0x42	; 66
     c3e:	8a 95       	dec	r24
     c40:	f1 f7       	brne	.-4      	; 0xc3e <lcd_cmd+0x18>
     c42:	00 c0       	rjmp	.+0      	; 0xc44 <lcd_cmd+0x1e>
     c44:	88 b3       	in	r24, 0x18	; 24
     c46:	8f 7e       	andi	r24, 0xEF	; 239
     c48:	88 bb       	out	0x18, r24	; 24
     c4a:	8c 2f       	mov	r24, r28
     c4c:	82 95       	swap	r24
     c4e:	80 7f       	andi	r24, 0xF0	; 240
     c50:	0e 94 a4 05 	call	0xb48	; 0xb48 <lcd_data>
     c54:	88 b3       	in	r24, 0x18	; 24
     c56:	87 7f       	andi	r24, 0xF7	; 247
     c58:	88 bb       	out	0x18, r24	; 24
     c5a:	88 b3       	in	r24, 0x18	; 24
     c5c:	80 61       	ori	r24, 0x10	; 16
     c5e:	88 bb       	out	0x18, r24	; 24
     c60:	82 e4       	ldi	r24, 0x42	; 66
     c62:	8a 95       	dec	r24
     c64:	f1 f7       	brne	.-4      	; 0xc62 <lcd_cmd+0x3c>
     c66:	00 c0       	rjmp	.+0      	; 0xc68 <lcd_cmd+0x42>
     c68:	88 b3       	in	r24, 0x18	; 24
     c6a:	8f 7e       	andi	r24, 0xEF	; 239
     c6c:	88 bb       	out	0x18, r24	; 24
     c6e:	cf 91       	pop	r28
     c70:	08 95       	ret

00000c72 <lcd_dat>:
     c72:	cf 93       	push	r28
     c74:	c8 2f       	mov	r28, r24
     c76:	80 7f       	andi	r24, 0xF0	; 240
     c78:	0e 94 a4 05 	call	0xb48	; 0xb48 <lcd_data>
     c7c:	88 b3       	in	r24, 0x18	; 24
     c7e:	88 60       	ori	r24, 0x08	; 8
     c80:	88 bb       	out	0x18, r24	; 24
     c82:	88 b3       	in	r24, 0x18	; 24
     c84:	80 61       	ori	r24, 0x10	; 16
     c86:	88 bb       	out	0x18, r24	; 24
     c88:	82 e4       	ldi	r24, 0x42	; 66
     c8a:	8a 95       	dec	r24
     c8c:	f1 f7       	brne	.-4      	; 0xc8a <lcd_dat+0x18>
     c8e:	00 c0       	rjmp	.+0      	; 0xc90 <lcd_dat+0x1e>
     c90:	88 b3       	in	r24, 0x18	; 24
     c92:	8f 7e       	andi	r24, 0xEF	; 239
     c94:	88 bb       	out	0x18, r24	; 24
     c96:	8c 2f       	mov	r24, r28
     c98:	82 95       	swap	r24
     c9a:	80 7f       	andi	r24, 0xF0	; 240
     c9c:	0e 94 a4 05 	call	0xb48	; 0xb48 <lcd_data>
     ca0:	88 b3       	in	r24, 0x18	; 24
     ca2:	88 60       	ori	r24, 0x08	; 8
     ca4:	88 bb       	out	0x18, r24	; 24
     ca6:	88 b3       	in	r24, 0x18	; 24
     ca8:	80 61       	ori	r24, 0x10	; 16
     caa:	88 bb       	out	0x18, r24	; 24
     cac:	82 e4       	ldi	r24, 0x42	; 66
     cae:	8a 95       	dec	r24
     cb0:	f1 f7       	brne	.-4      	; 0xcae <lcd_dat+0x3c>
     cb2:	00 c0       	rjmp	.+0      	; 0xcb4 <lcd_dat+0x42>
     cb4:	88 b3       	in	r24, 0x18	; 24
     cb6:	8f 7e       	andi	r24, 0xEF	; 239
     cb8:	88 bb       	out	0x18, r24	; 24
     cba:	cf 91       	pop	r28
     cbc:	08 95       	ret

00000cbe <lcd_cur_pos>:
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
     cc2:	c8 2f       	mov	r28, r24
     cc4:	d6 2f       	mov	r29, r22
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	21 f4       	brne	.+8      	; 0xcd2 <lcd_cur_pos+0x14>
     cca:	8f e7       	ldi	r24, 0x7F	; 127
     ccc:	86 0f       	add	r24, r22
     cce:	0e 94 13 06 	call	0xc26	; 0xc26 <lcd_cmd>
     cd2:	c2 30       	cpi	r28, 0x02	; 2
     cd4:	21 f4       	brne	.+8      	; 0xcde <lcd_cur_pos+0x20>
     cd6:	8f eb       	ldi	r24, 0xBF	; 191
     cd8:	8d 0f       	add	r24, r29
     cda:	0e 94 13 06 	call	0xc26	; 0xc26 <lcd_cmd>
     cde:	c3 30       	cpi	r28, 0x03	; 3
     ce0:	21 f4       	brne	.+8      	; 0xcea <lcd_cur_pos+0x2c>
     ce2:	83 e9       	ldi	r24, 0x93	; 147
     ce4:	8d 0f       	add	r24, r29
     ce6:	0e 94 13 06 	call	0xc26	; 0xc26 <lcd_cmd>
     cea:	c4 30       	cpi	r28, 0x04	; 4
     cec:	21 f4       	brne	.+8      	; 0xcf6 <lcd_cur_pos+0x38>
     cee:	83 ed       	ldi	r24, 0xD3	; 211
     cf0:	8d 0f       	add	r24, r29
     cf2:	0e 94 13 06 	call	0xc26	; 0xc26 <lcd_cmd>
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	08 95       	ret

00000cfc <lcd_string>:
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	ec 01       	movw	r28, r24
     d02:	03 c0       	rjmp	.+6      	; 0xd0a <lcd_string+0xe>
     d04:	21 96       	adiw	r28, 0x01	; 1
     d06:	0e 94 39 06 	call	0xc72	; 0xc72 <lcd_dat>
     d0a:	88 81       	ld	r24, Y
     d0c:	81 11       	cpse	r24, r1
     d0e:	fa cf       	rjmp	.-12     	; 0xd04 <lcd_string+0x8>
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	08 95       	ret

00000d16 <LCD_Init>:
     d16:	8f ef       	ldi	r24, 0xFF	; 255
     d18:	87 bb       	out	0x17, r24	; 23
     d1a:	18 ba       	out	0x18, r1	; 24
     d1c:	81 bb       	out	0x11, r24	; 17
     d1e:	12 ba       	out	0x12, r1	; 18
     d20:	0e 94 c9 05 	call	0xb92	; 0xb92 <lcd_cursor>
     d24:	88 e2       	ldi	r24, 0x28	; 40
     d26:	0e 94 13 06 	call	0xc26	; 0xc26 <lcd_cmd>
     d2a:	8e e0       	ldi	r24, 0x0E	; 14
     d2c:	0e 94 13 06 	call	0xc26	; 0xc26 <lcd_cmd>
     d30:	8c e0       	ldi	r24, 0x0C	; 12
     d32:	0e 94 13 06 	call	0xc26	; 0xc26 <lcd_cmd>
     d36:	86 e0       	ldi	r24, 0x06	; 6
     d38:	0e 94 13 06 	call	0xc26	; 0xc26 <lcd_cmd>
     d3c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <lcd_clrscr>
     d40:	80 e8       	ldi	r24, 0x80	; 128
     d42:	0e 94 13 06 	call	0xc26	; 0xc26 <lcd_cmd>
     d46:	61 e0       	ldi	r22, 0x01	; 1
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <lcd_cur_pos>
     d4e:	88 e9       	ldi	r24, 0x98	; 152
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	0e 94 7e 06 	call	0xcfc	; 0xcfc <lcd_string>
     d56:	08 95       	ret

00000d58 <DebugStringRow1>:
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	ec 01       	movw	r28, r24
     d5e:	80 e8       	ldi	r24, 0x80	; 128
     d60:	0e 94 13 06 	call	0xc26	; 0xc26 <lcd_cmd>
     d64:	ce 01       	movw	r24, r28
     d66:	0e 94 7e 06 	call	0xcfc	; 0xcfc <lcd_string>
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	08 95       	ret

00000d70 <DebugStringRow2>:
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	ec 01       	movw	r28, r24
     d76:	80 ec       	ldi	r24, 0xC0	; 192
     d78:	0e 94 13 06 	call	0xc26	; 0xc26 <lcd_cmd>
     d7c:	ce 01       	movw	r24, r28
     d7e:	0e 94 7e 06 	call	0xcfc	; 0xcfc <lcd_string>
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	08 95       	ret

00000d88 <SIMCOM_ResetJob>:
	if(SIMCOM_ComState == SIMCOM_WaitingForResponse)
	{
		SIMCOM_ReceptionIgnoreCommandCount = Count;

		// If there are multiple items to be received, then set the Incomplete timeout as the Job Timeout
		SIMCOM_IncompleteCounter = SIMCOM_CurrentJob.Timeout;
     d88:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <SIMCOM_ComState>
     d8c:	e6 ef       	ldi	r30, 0xF6	; 246
     d8e:	f5 e0       	ldi	r31, 0x05	; 5
     d90:	83 ea       	ldi	r24, 0xA3	; 163
     d92:	91 e0       	ldi	r25, 0x01	; 1
     d94:	91 83       	std	Z+1, r25	; 0x01
     d96:	80 83       	st	Z, r24
     d98:	12 82       	std	Z+2, r1	; 0x02
     d9a:	13 82       	std	Z+3, r1	; 0x03
     d9c:	14 82       	std	Z+4, r1	; 0x04
     d9e:	15 82       	std	Z+5, r1	; 0x05
     da0:	17 82       	std	Z+7, r1	; 0x07
     da2:	16 82       	std	Z+6, r1	; 0x06
     da4:	10 86       	std	Z+8, r1	; 0x08
     da6:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <SIMCOM_ReceptionIgnoreCommandCount>
     daa:	08 95       	ret

00000dac <SIMCOM_UpdateCurrentJobResponse>:
     dac:	ef 92       	push	r14
     dae:	ff 92       	push	r15
     db0:	1f 93       	push	r17
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	1f 92       	push	r1
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	88 ec       	ldi	r24, 0xC8	; 200
     dbe:	ee e2       	ldi	r30, 0x2E	; 46
     dc0:	f5 e0       	ldi	r31, 0x05	; 5
     dc2:	df 01       	movw	r26, r30
     dc4:	1d 92       	st	X+, r1
     dc6:	8a 95       	dec	r24
     dc8:	e9 f7       	brne	.-6      	; 0xdc4 <SIMCOM_UpdateCurrentJobResponse+0x18>
     dca:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <SIMCOM_ResponseLength>
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	0e 94 50 04 	call	0x8a0	; 0x8a0 <Buffer_GetBuffer>
     dd4:	62 ea       	ldi	r22, 0xA2	; 162
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	fc 01       	movw	r30, r24
     dda:	80 81       	ld	r24, Z
     ddc:	91 81       	ldd	r25, Z+1	; 0x01
     dde:	0e 94 26 14 	call	0x284c	; 0x284c <strstr>
     de2:	0e 94 b8 06 	call	0xd70	; 0xd70 <DebugStringRow2>
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <Buffer_Length>
     dec:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <SIMCOM_ResponseLength>
     df0:	10 e0       	ldi	r17, 0x00	; 0
     df2:	13 c0       	rjmp	.+38     	; 0xe1a <SIMCOM_UpdateCurrentJobResponse+0x6e>
     df4:	e1 2e       	mov	r14, r17
     df6:	f1 2c       	mov	r15, r1
     df8:	19 82       	std	Y+1, r1	; 0x01
     dfa:	be 01       	movw	r22, r28
     dfc:	6f 5f       	subi	r22, 0xFF	; 255
     dfe:	7f 4f       	sbci	r23, 0xFF	; 255
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	0e 94 aa 04 	call	0x954	; 0x954 <Buffer_DeQueue>
     e06:	81 11       	cpse	r24, r1
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <SIMCOM_UpdateCurrentJobResponse+0x62>
     e0a:	0e 94 c9 0c 	call	0x1992	; 0x1992 <COSMIC_SIMCOM_Error_Callback>
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	f7 01       	movw	r30, r14
     e12:	e2 5d       	subi	r30, 0xD2	; 210
     e14:	fa 4f       	sbci	r31, 0xFA	; 250
     e16:	80 83       	st	Z, r24
     e18:	1f 5f       	subi	r17, 0xFF	; 255
     e1a:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_ResponseLength>
     e1e:	18 17       	cp	r17, r24
     e20:	48 f3       	brcs	.-46     	; 0xdf4 <SIMCOM_UpdateCurrentJobResponse+0x48>
     e22:	6e e2       	ldi	r22, 0x2E	; 46
     e24:	75 e0       	ldi	r23, 0x05	; 5
     e26:	87 ea       	ldi	r24, 0xA7	; 167
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 74 05 	call	0xae8	; 0xae8 <StringHelper_startsWith>
     e2e:	88 23       	and	r24, r24
     e30:	39 f0       	breq	.+14     	; 0xe40 <SIMCOM_UpdateCurrentJobResponse+0x94>
     e32:	88 b3       	in	r24, 0x18	; 24
     e34:	80 95       	com	r24
     e36:	88 bb       	out	0x18, r24	; 24
     e38:	88 e3       	ldi	r24, 0x38	; 56
     e3a:	95 e0       	ldi	r25, 0x05	; 5
     e3c:	0e 94 ac 06 	call	0xd58	; 0xd58 <DebugStringRow1>
     e40:	0f 90       	pop	r0
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	1f 91       	pop	r17
     e48:	ff 90       	pop	r15
     e4a:	ef 90       	pop	r14
     e4c:	08 95       	ret

00000e4e <SIMCOM_Send_Command>:
     e4e:	09 c0       	rjmp	.+18     	; 0xe62 <SIMCOM_Send_Command+0x14>
     e50:	0e 94 a3 00 	call	0x146	; 0x146 <SIM_Send_Data>
     e54:	e6 ef       	ldi	r30, 0xF6	; 246
     e56:	f5 e0       	ldi	r31, 0x05	; 5
     e58:	80 81       	ld	r24, Z
     e5a:	91 81       	ldd	r25, Z+1	; 0x01
     e5c:	01 96       	adiw	r24, 0x01	; 1
     e5e:	91 83       	std	Z+1, r25	; 0x01
     e60:	80 83       	st	Z, r24
     e62:	e0 91 f6 05 	lds	r30, 0x05F6	; 0x8005f6 <SIMCOM_CurrentJob>
     e66:	f0 91 f7 05 	lds	r31, 0x05F7	; 0x8005f7 <SIMCOM_CurrentJob+0x1>
     e6a:	80 81       	ld	r24, Z
     e6c:	81 11       	cpse	r24, r1
     e6e:	f0 cf       	rjmp	.-32     	; 0xe50 <SIMCOM_Send_Command+0x2>
     e70:	8d e0       	ldi	r24, 0x0D	; 13
     e72:	0e 94 a3 00 	call	0x146	; 0x146 <SIM_Send_Data>
     e76:	08 95       	ret

00000e78 <SIMCOM_GetResponseWithoutHead_fromBuffer>:
     e78:	bc 01       	movw	r22, r24
     e7a:	8e e2       	ldi	r24, 0x2E	; 46
     e7c:	95 e0       	ldi	r25, 0x05	; 5
     e7e:	0e 94 ef 04 	call	0x9de	; 0x9de <StringHelper_GetPointerAfter>
     e82:	08 95       	ret

00000e84 <SIMCOM_GetSeparated_String_fromBuffer>:
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	d6 2f       	mov	r29, r22
     e8a:	c4 2f       	mov	r28, r20
     e8c:	0e 94 3c 07 	call	0xe78	; 0xe78 <SIMCOM_GetResponseWithoutHead_fromBuffer>
     e90:	4c 2f       	mov	r20, r28
     e92:	50 e0       	ldi	r21, 0x00	; 0
     e94:	6d 2f       	mov	r22, r29
     e96:	0e 94 1a 05 	call	0xa34	; 0xa34 <StringHelper_SplitAndGet>
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	08 95       	ret

00000ea0 <SIMCOM_Init>:
     ea0:	0e 94 c4 06 	call	0xd88	; 0xd88 <SIMCOM_ResetJob>
     ea4:	88 ec       	ldi	r24, 0xC8	; 200
     ea6:	ee e2       	ldi	r30, 0x2E	; 46
     ea8:	f5 e0       	ldi	r31, 0x05	; 5
     eaa:	df 01       	movw	r26, r30
     eac:	1d 92       	st	X+, r1
     eae:	8a 95       	dec	r24
     eb0:	e9 f7       	brne	.-6      	; 0xeac <SIMCOM_Init+0xc>
     eb2:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <SIMCOM_ResponseLength>
     eb6:	48 ec       	ldi	r20, 0xC8	; 200
     eb8:	6d e8       	ldi	r22, 0x8D	; 141
     eba:	76 e0       	ldi	r23, 0x06	; 6
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	0e 94 60 04 	call	0x8c0	; 0x8c0 <Buffer_Create>
     ec2:	08 95       	ret

00000ec4 <SIMCOM_Schedule_Job>:
     ec4:	e0 91 0e 04 	lds	r30, 0x040E	; 0x80040e <SIMCOM_ComState>
     ec8:	e1 11       	cpse	r30, r1
     eca:	38 c0       	rjmp	.+112    	; 0xf3c <SIMCOM_Schedule_Job+0x78>
     ecc:	e1 e0       	ldi	r30, 0x01	; 1
     ece:	e0 93 0e 04 	sts	0x040E, r30	; 0x80040e <SIMCOM_ComState>
     ed2:	e6 ef       	ldi	r30, 0xF6	; 246
     ed4:	f5 e0       	ldi	r31, 0x05	; 5
     ed6:	91 83       	std	Z+1, r25	; 0x01
     ed8:	80 83       	st	Z, r24
     eda:	42 83       	std	Z+2, r20	; 0x02
     edc:	53 83       	std	Z+3, r21	; 0x03
     ede:	64 83       	std	Z+4, r22	; 0x04
     ee0:	75 83       	std	Z+5, r23	; 0x05
     ee2:	37 83       	std	Z+7, r19	; 0x07
     ee4:	26 83       	std	Z+6, r18	; 0x06
     ee6:	10 86       	std	Z+8, r1	; 0x08
     ee8:	8a e0       	ldi	r24, 0x0A	; 10
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	a0 e0       	ldi	r26, 0x00	; 0
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <SIMCOM_IncompleteCounter>
     ef4:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <SIMCOM_IncompleteCounter+0x1>
     ef8:	a0 93 68 00 	sts	0x0068, r26	; 0x800068 <SIMCOM_IncompleteCounter+0x2>
     efc:	b0 93 69 00 	sts	0x0069, r27	; 0x800069 <SIMCOM_IncompleteCounter+0x3>
     f00:	80 e6       	ldi	r24, 0x60	; 96
     f02:	9a ee       	ldi	r25, 0xEA	; 234
     f04:	a0 e0       	ldi	r26, 0x00	; 0
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <SIMCOM_Aliveness_Counter>
     f0c:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <SIMCOM_Aliveness_Counter+0x1>
     f10:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <SIMCOM_Aliveness_Counter+0x2>
     f14:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <SIMCOM_Aliveness_Counter+0x3>
     f18:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <SIMCOM_ReceptionIgnoreCommandCount>
     f1c:	88 ec       	ldi	r24, 0xC8	; 200
     f1e:	ee e2       	ldi	r30, 0x2E	; 46
     f20:	f5 e0       	ldi	r31, 0x05	; 5
     f22:	df 01       	movw	r26, r30
     f24:	1d 92       	st	X+, r1
     f26:	8a 95       	dec	r24
     f28:	e9 f7       	brne	.-6      	; 0xf24 <SIMCOM_Schedule_Job+0x60>
     f2a:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <SIMCOM_ResponseLength>
     f2e:	0e 94 27 07 	call	0xe4e	; 0xe4e <SIMCOM_Send_Command>
     f32:	83 e0       	ldi	r24, 0x03	; 3
     f34:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <SIMCOM_ComState>
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	08 95       	ret
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	08 95       	ret

00000f40 <SIMCOM_Data_Read>:
     f40:	cf 93       	push	r28
     f42:	c8 2f       	mov	r28, r24
     f44:	8d 30       	cpi	r24, 0x0D	; 13
     f46:	11 f0       	breq	.+4      	; 0xf4c <SIMCOM_Data_Read+0xc>
     f48:	8a 30       	cpi	r24, 0x0A	; 10
     f4a:	71 f5       	brne	.+92     	; 0xfa8 <SIMCOM_Data_Read+0x68>
     f4c:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <__data_end>
     f50:	8d 30       	cpi	r24, 0x0D	; 13
     f52:	89 f5       	brne	.+98     	; 0xfb6 <SIMCOM_Data_Read+0x76>
     f54:	ca 30       	cpi	r28, 0x0A	; 10
     f56:	91 f5       	brne	.+100    	; 0xfbc <SIMCOM_Data_Read+0x7c>
     f58:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <SIMCOM_ComState>
     f5c:	83 30       	cpi	r24, 0x03	; 3
     f5e:	31 f4       	brne	.+12     	; 0xf6c <SIMCOM_Data_Read+0x2c>
     f60:	82 e0       	ldi	r24, 0x02	; 2
     f62:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <SIMCOM_ComState>
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	30 c0       	rjmp	.+96     	; 0xfcc <SIMCOM_Data_Read+0x8c>
     f6c:	82 30       	cpi	r24, 0x02	; 2
     f6e:	a1 f4       	brne	.+40     	; 0xf98 <SIMCOM_Data_Read+0x58>
     f70:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <SIMCOM_ReceptionIgnoreCommandCount>
     f74:	81 11       	cpse	r24, r1
     f76:	06 c0       	rjmp	.+12     	; 0xf84 <SIMCOM_Data_Read+0x44>
     f78:	84 e0       	ldi	r24, 0x04	; 4
     f7a:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <SIMCOM_ComState>
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	24 c0       	rjmp	.+72     	; 0xfcc <SIMCOM_Data_Read+0x8c>
     f84:	81 50       	subi	r24, 0x01	; 1
     f86:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <SIMCOM_ReceptionIgnoreCommandCount>
     f8a:	6e e7       	ldi	r22, 0x7E	; 126
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <Buffer_EnQueue>
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	1a c0       	rjmp	.+52     	; 0xfcc <SIMCOM_Data_Read+0x8c>
     f98:	81 11       	cpse	r24, r1
     f9a:	13 c0       	rjmp	.+38     	; 0xfc2 <SIMCOM_Data_Read+0x82>
     f9c:	82 e0       	ldi	r24, 0x02	; 2
     f9e:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <SIMCOM_ComState>
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	12 c0       	rjmp	.+36     	; 0xfcc <SIMCOM_Data_Read+0x8c>
     fa8:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <SIMCOM_ComState>
     fac:	82 30       	cpi	r24, 0x02	; 2
     fae:	61 f0       	breq	.+24     	; 0xfc8 <SIMCOM_Data_Read+0x88>
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	0b c0       	rjmp	.+22     	; 0xfcc <SIMCOM_Data_Read+0x8c>
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	08 c0       	rjmp	.+16     	; 0xfcc <SIMCOM_Data_Read+0x8c>
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	05 c0       	rjmp	.+10     	; 0xfcc <SIMCOM_Data_Read+0x8c>
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <SIMCOM_Data_Read+0x8c>
     fc8:	91 e0       	ldi	r25, 0x01	; 1
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	91 30       	cpi	r25, 0x01	; 1
     fce:	21 f4       	brne	.+8      	; 0xfd8 <SIMCOM_Data_Read+0x98>
     fd0:	6c 2f       	mov	r22, r28
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	0e 94 7d 04 	call	0x8fa	; 0x8fa <Buffer_EnQueue>
     fd8:	c0 93 0a 04 	sts	0x040A, r28	; 0x80040a <__data_end>
     fdc:	cf 91       	pop	r28
     fde:	08 95       	ret

00000fe0 <SIMCOM_GetCSV_Number_fromBuffer>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                     SIMCOM Helper Functions                    */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
ULONG SIMCOM_GetCSV_Number_fromBuffer(const char * ResponseHead, UBYTE Position)
{
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	2c 97       	sbiw	r28, 0x0c	; 12
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61
     ff4:	46 2f       	mov	r20, r22
	ULONG retval = 0;

	if(SIMCOM_GetSeparated_String_fromBuffer(ResponseHead, ',', Position) > 0)
     ff6:	6c e2       	ldi	r22, 0x2C	; 44
     ff8:	0e 94 42 07 	call	0xe84	; 0xe84 <SIMCOM_GetSeparated_String_fromBuffer>
     ffc:	89 2b       	or	r24, r25
     ffe:	b1 f0       	breq	.+44     	; 0x102c <SIMCOM_GetCSV_Number_fromBuffer+0x4c>
	memset(StringHelper_Buffer, '\0', StringHelper_Buffer_LENGTH);
}

static inline void StringHelper_GetString(char * Str)
{
	strcpy(Str, StringHelper_Buffer);
    1000:	63 e2       	ldi	r22, 0x23	; 35
    1002:	74 e0       	ldi	r23, 0x04	; 4
    1004:	ce 01       	movw	r24, r28
    1006:	01 96       	adiw	r24, 0x01	; 1
    1008:	0e 94 1f 14 	call	0x283e	; 0x283e <strcpy>
/* Function Declarations */
/*************************/

static inline void StringHelper_ClearBuffer(void)
{
	memset(StringHelper_Buffer, '\0', StringHelper_Buffer_LENGTH);
    100c:	8f ef       	ldi	r24, 0xFF	; 255
    100e:	e3 e2       	ldi	r30, 0x23	; 35
    1010:	f4 e0       	ldi	r31, 0x04	; 4
    1012:	df 01       	movw	r26, r30
    1014:	1d 92       	st	X+, r1
    1016:	8a 95       	dec	r24
    1018:	e9 f7       	brne	.-6      	; 0x1014 <SIMCOM_GetCSV_Number_fromBuffer+0x34>
	{
		char NumberString[12];

		StringHelper_GetString(NumberString);

		retval = atoi(NumberString);
    101a:	ce 01       	movw	r24, r28
    101c:	01 96       	adiw	r24, 0x01	; 1
    101e:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <atoi>
    1022:	bc 01       	movw	r22, r24
    1024:	99 0f       	add	r25, r25
    1026:	88 0b       	sbc	r24, r24
    1028:	99 0b       	sbc	r25, r25
    102a:	03 c0       	rjmp	.+6      	; 0x1032 <SIMCOM_GetCSV_Number_fromBuffer+0x52>
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                     SIMCOM Helper Functions                    */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
ULONG SIMCOM_GetCSV_Number_fromBuffer(const char * ResponseHead, UBYTE Position)
{
	ULONG retval = 0;
    102c:	60 e0       	ldi	r22, 0x00	; 0
    102e:	70 e0       	ldi	r23, 0x00	; 0
    1030:	cb 01       	movw	r24, r22

		retval = atoi(NumberString);
	}

	return retval;
}
    1032:	2c 96       	adiw	r28, 0x0c	; 12
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	de bf       	out	0x3e, r29	; 62
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	cd bf       	out	0x3d, r28	; 61
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	08 95       	ret

00001044 <SIMCOM_Callback>:

	SIMCOM_SEND_BYTE(CARRIAGE_RETURN);
}

static void SIMCOM_Callback(SIMCOM_Job_Result_EN JobState)
{
    1044:	8f 92       	push	r8
    1046:	9f 92       	push	r9
    1048:	af 92       	push	r10
    104a:	bf 92       	push	r11
    104c:	cf 92       	push	r12
    104e:	df 92       	push	r13
    1050:	ef 92       	push	r14
    1052:	ff 92       	push	r15
    1054:	cf 93       	push	r28
    1056:	c8 2f       	mov	r28, r24
	
	if(SIMCOM_CurrentJob.Callback != NULL_PTR)
    1058:	e0 91 fc 05 	lds	r30, 0x05FC	; 0x8005fc <SIMCOM_CurrentJob+0x6>
    105c:	f0 91 fd 05 	lds	r31, 0x05FD	; 0x8005fd <SIMCOM_CurrentJob+0x7>
    1060:	30 97       	sbiw	r30, 0x00	; 0
    1062:	21 f0       	breq	.+8      	; 0x106c <SIMCOM_Callback+0x28>
	{
		SIMCOM_CurrentJob.State = JobState;
    1064:	80 93 fe 05 	sts	0x05FE, r24	; 0x8005fe <SIMCOM_CurrentJob+0x8>
		SIMCOM_CurrentJob.Callback(JobState);
    1068:	09 95       	icall
    106a:	93 c0       	rjmp	.+294    	; 0x1192 <SIMCOM_Callback+0x14e>
	}
	else
	{
		if(IsSIMCOM_ResponseStartsWith("+CTZV:"))
    106c:	6e e2       	ldi	r22, 0x2E	; 46
    106e:	75 e0       	ldi	r23, 0x05	; 5
    1070:	86 eb       	ldi	r24, 0xB6	; 182
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 94 74 05 	call	0xae8	; 0xae8 <StringHelper_startsWith>
    1078:	88 23       	and	r24, r24
    107a:	41 f0       	breq	.+16     	; 0x108c <SIMCOM_Callback+0x48>
		{
			/* If there are any problem with the SIMCOM or it's sub modules, and received a feedback from GSM, then possibly the Network might have disconnected */
			if(IsSIMCOM_Module_Error() || IsSIMCOM_SubModule_Error())
    107c:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <SIMCOM_State>
    1080:	8d 30       	cpi	r24, 0x0D	; 13
    1082:	09 f0       	breq	.+2      	; 0x1086 <SIMCOM_Callback+0x42>
    1084:	86 c0       	rjmp	.+268    	; 0x1192 <SIMCOM_Callback+0x14e>
			{
				// So retry evaluating
				SIMCOM_ReEvaluate_State();
    1086:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <SIMCOM_State>
    108a:	83 c0       	rjmp	.+262    	; 0x1192 <SIMCOM_Callback+0x14e>
			}
		}
		else if(IsSIMCOM_ResponseStartsWith("+CMQTTRXSTART:"))
    108c:	6e e2       	ldi	r22, 0x2E	; 46
    108e:	75 e0       	ldi	r23, 0x05	; 5
    1090:	87 ea       	ldi	r24, 0xA7	; 167
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 74 05 	call	0xae8	; 0xae8 <StringHelper_startsWith>
    1098:	81 11       	cpse	r24, r1
    109a:	7b c0       	rjmp	.+246    	; 0x1192 <SIMCOM_Callback+0x14e>
		{
			//PORTA ^= 0xFF;

		}
		else if(IsSIMCOM_ResponseStartsWith("+CMQTTCONNECT:"))
    109c:	6e e2       	ldi	r22, 0x2E	; 46
    109e:	75 e0       	ldi	r23, 0x05	; 5
    10a0:	8d eb       	ldi	r24, 0xBD	; 189
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	0e 94 74 05 	call	0xae8	; 0xae8 <StringHelper_startsWith>
    10a8:	88 23       	and	r24, r24
    10aa:	d1 f0       	breq	.+52     	; 0x10e0 <SIMCOM_Callback+0x9c>
		{
			ULONG ConnectResponse1 = SIMCOM_GetCSV_Number_fromBuffer("+CMQTTCONNECT:", 1);
    10ac:	61 e0       	ldi	r22, 0x01	; 1
    10ae:	8d eb       	ldi	r24, 0xBD	; 189
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <SIMCOM_GetCSV_Number_fromBuffer>
    10b6:	6b 01       	movw	r12, r22
    10b8:	7c 01       	movw	r14, r24
			ULONG ConnectResponse2 = SIMCOM_GetCSV_Number_fromBuffer("+CMQTTCONNECT:", 2);
    10ba:	62 e0       	ldi	r22, 0x02	; 2
    10bc:	8d eb       	ldi	r24, 0xBD	; 189
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <SIMCOM_GetCSV_Number_fromBuffer>
			// Check if the response is OK or not.
			if((ConnectResponse1==0)&&(ConnectResponse2==0))
    10c4:	cd 28       	or	r12, r13
    10c6:	ce 28       	or	r12, r14
    10c8:	cf 28       	or	r12, r15
    10ca:	09 f0       	breq	.+2      	; 0x10ce <SIMCOM_Callback+0x8a>
    10cc:	62 c0       	rjmp	.+196    	; 0x1192 <SIMCOM_Callback+0x14e>
    10ce:	67 2b       	or	r22, r23
    10d0:	68 2b       	or	r22, r24
    10d2:	69 2b       	or	r22, r25
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <SIMCOM_Callback+0x94>
    10d6:	5d c0       	rjmp	.+186    	; 0x1192 <SIMCOM_Callback+0x14e>
			{
				MQTT_State = MQTT_SubscribeTopic_Config;// Move to next state
    10d8:	88 e0       	ldi	r24, 0x08	; 8
    10da:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <MQTT_State>
    10de:	59 c0       	rjmp	.+178    	; 0x1192 <SIMCOM_Callback+0x14e>
			}
		}
		else if(IsSIMCOM_ResponseStartsWith("+CMQTTDISCONNLOST:"))
    10e0:	6e e2       	ldi	r22, 0x2E	; 46
    10e2:	75 e0       	ldi	r23, 0x05	; 5
    10e4:	8c ec       	ldi	r24, 0xCC	; 204
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	0e 94 74 05 	call	0xae8	; 0xae8 <StringHelper_startsWith>
    10ec:	88 23       	and	r24, r24
    10ee:	19 f0       	breq	.+6      	; 0x10f6 <SIMCOM_Callback+0xb2>
		{
			SIMCOM_ERROR_CALLBACK();
    10f0:	0e 94 c9 0c 	call	0x1992	; 0x1992 <COSMIC_SIMCOM_Error_Callback>
    10f4:	4e c0       	rjmp	.+156    	; 0x1192 <SIMCOM_Callback+0x14e>
		}
		
		else if(IsSIMCOM_ResponseStartsWith("+CMQTTPUB:"))
    10f6:	6e e2       	ldi	r22, 0x2E	; 46
    10f8:	75 e0       	ldi	r23, 0x05	; 5
    10fa:	8f ed       	ldi	r24, 0xDF	; 223
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	0e 94 74 05 	call	0xae8	; 0xae8 <StringHelper_startsWith>
    1102:	88 23       	and	r24, r24
    1104:	e9 f0       	breq	.+58     	; 0x1140 <SIMCOM_Callback+0xfc>
		{
			
			ULONG PublishResponse1 = SIMCOM_GetCSV_Number_fromBuffer("+CMQTTPUB:", 1);
    1106:	61 e0       	ldi	r22, 0x01	; 1
    1108:	8f ed       	ldi	r24, 0xDF	; 223
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <SIMCOM_GetCSV_Number_fromBuffer>
    1110:	6b 01       	movw	r12, r22
    1112:	7c 01       	movw	r14, r24
			ULONG PublishResponse2 = SIMCOM_GetCSV_Number_fromBuffer("+CMQTTPUB:", 2);
    1114:	62 e0       	ldi	r22, 0x02	; 2
    1116:	8f ed       	ldi	r24, 0xDF	; 223
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <SIMCOM_GetCSV_Number_fromBuffer>
			// Check if the response is OK or not.
			if((PublishResponse1==0)&&(PublishResponse2==0))
    111e:	cd 28       	or	r12, r13
    1120:	ce 28       	or	r12, r14
    1122:	cf 28       	or	r12, r15
    1124:	51 f4       	brne	.+20     	; 0x113a <SIMCOM_Callback+0xf6>
    1126:	67 2b       	or	r22, r23
    1128:	68 2b       	or	r22, r24
    112a:	69 2b       	or	r22, r25
    112c:	31 f4       	brne	.+12     	; 0x113a <SIMCOM_Callback+0xf6>
			{
				PublishStatus = 1;
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <PublishStatus>
				Publish_State = MQTT_Publish_Idle;
    1134:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <Publish_State>
    1138:	2c c0       	rjmp	.+88     	; 0x1192 <SIMCOM_Callback+0x14e>
			}
			else
			{
				PublishStatus = 0;
    113a:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <PublishStatus>
    113e:	29 c0       	rjmp	.+82     	; 0x1192 <SIMCOM_Callback+0x14e>
			}
		}
		
		else if(IsSIMCOM_ResponseStartsWith("+CMQTTSUB:"))
    1140:	6e e2       	ldi	r22, 0x2E	; 46
    1142:	75 e0       	ldi	r23, 0x05	; 5
    1144:	8a ee       	ldi	r24, 0xEA	; 234
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	0e 94 74 05 	call	0xae8	; 0xae8 <StringHelper_startsWith>
    114c:	88 23       	and	r24, r24
    114e:	f1 f0       	breq	.+60     	; 0x118c <SIMCOM_Callback+0x148>
		{
			ULONG SubscribeResponse1 = SIMCOM_GetCSV_Number_fromBuffer("+CMQTTSUB:", 1);
    1150:	61 e0       	ldi	r22, 0x01	; 1
    1152:	8a ee       	ldi	r24, 0xEA	; 234
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <SIMCOM_GetCSV_Number_fromBuffer>
    115a:	4b 01       	movw	r8, r22
    115c:	5c 01       	movw	r10, r24
			ULONG SubscribeResponse2 = SIMCOM_GetCSV_Number_fromBuffer("+CMQTTSUB:", 2);
    115e:	62 e0       	ldi	r22, 0x02	; 2
    1160:	8a ee       	ldi	r24, 0xEA	; 234
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <SIMCOM_GetCSV_Number_fromBuffer>
    1168:	6b 01       	movw	r12, r22
    116a:	7c 01       	movw	r14, r24
			DebugStringRow2("SUB");
    116c:	85 ef       	ldi	r24, 0xF5	; 245
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 b8 06 	call	0xd70	; 0xd70 <DebugStringRow2>
			// Check if the response is OK or not.
			if((SubscribeResponse1 ==0)&&(SubscribeResponse2 ==0))
    1174:	89 28       	or	r8, r9
    1176:	8a 28       	or	r8, r10
    1178:	8b 28       	or	r8, r11
    117a:	59 f4       	brne	.+22     	; 0x1192 <SIMCOM_Callback+0x14e>
    117c:	cd 28       	or	r12, r13
    117e:	ce 28       	or	r12, r14
    1180:	cf 28       	or	r12, r15
    1182:	39 f4       	brne	.+14     	; 0x1192 <SIMCOM_Callback+0x14e>
			{
				MQTT_State = MQTT_Ready;
    1184:	8d e0       	ldi	r24, 0x0D	; 13
    1186:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <MQTT_State>
    118a:	03 c0       	rjmp	.+6      	; 0x1192 <SIMCOM_Callback+0x14e>
		}
		
		else
		{
			// If something else is received, then give a call to the Application layer to handle
			SIMCOM_GENERIC_CALLBACK(JobState);
    118c:	8c 2f       	mov	r24, r28
    118e:	0e 94 a0 12 	call	0x2540	; 0x2540 <COSMIC_Generic_SIMCOM_Callback>
		}
	}
}
    1192:	cf 91       	pop	r28
    1194:	ff 90       	pop	r15
    1196:	ef 90       	pop	r14
    1198:	df 90       	pop	r13
    119a:	cf 90       	pop	r12
    119c:	bf 90       	pop	r11
    119e:	af 90       	pop	r10
    11a0:	9f 90       	pop	r9
    11a2:	8f 90       	pop	r8
    11a4:	08 95       	ret

000011a6 <SIMCOM_MainFunction>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                      SIMCOM Main Function                      */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
void SIMCOM_MainFunction(void)
{
	MQTTRecoonectCount--; 
    11a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    11aa:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    11ae:	01 97       	sbiw	r24, 0x01	; 1
    11b0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    11b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	switch(SIMCOM_ComState)
    11b8:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <SIMCOM_ComState>
    11bc:	82 30       	cpi	r24, 0x02	; 2
    11be:	b9 f1       	breq	.+110    	; 0x122e <SIMCOM_MainFunction+0x88>
    11c0:	18 f4       	brcc	.+6      	; 0x11c8 <SIMCOM_MainFunction+0x22>
    11c2:	81 30       	cpi	r24, 0x01	; 1
    11c4:	81 f1       	breq	.+96     	; 0x1226 <SIMCOM_MainFunction+0x80>
    11c6:	06 c0       	rjmp	.+12     	; 0x11d4 <SIMCOM_MainFunction+0x2e>
    11c8:	83 30       	cpi	r24, 0x03	; 3
    11ca:	09 f4       	brne	.+2      	; 0x11ce <SIMCOM_MainFunction+0x28>
    11cc:	53 c0       	rjmp	.+166    	; 0x1274 <SIMCOM_MainFunction+0xce>
    11ce:	84 30       	cpi	r24, 0x04	; 4
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <SIMCOM_MainFunction+0x2e>
    11d2:	71 c0       	rjmp	.+226    	; 0x12b6 <SIMCOM_MainFunction+0x110>
	{
		default:
		case SIMCOM_Idle:
		{
			SIMCOM_ResetJob();
    11d4:	0e 94 c4 06 	call	0xd88	; 0xd88 <SIMCOM_ResetJob>

			// Check for aliveness
			if(SIMCOM_Aliveness_Counter > 0)
    11d8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <SIMCOM_Aliveness_Counter>
    11dc:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <SIMCOM_Aliveness_Counter+0x1>
    11e0:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <SIMCOM_Aliveness_Counter+0x2>
    11e4:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <SIMCOM_Aliveness_Counter+0x3>
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	a1 05       	cpc	r26, r1
    11ec:	b1 05       	cpc	r27, r1
    11ee:	61 f0       	breq	.+24     	; 0x1208 <SIMCOM_MainFunction+0x62>
			{
				SIMCOM_Aliveness_Counter -= P_SIMCOM_TASK_CYCLE_FACTOR;
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	a1 09       	sbc	r26, r1
    11f4:	b1 09       	sbc	r27, r1
    11f6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <SIMCOM_Aliveness_Counter>
    11fa:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <SIMCOM_Aliveness_Counter+0x1>
    11fe:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <SIMCOM_Aliveness_Counter+0x2>
    1202:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <SIMCOM_Aliveness_Counter+0x3>
    1206:	5e c0       	rjmp	.+188    	; 0x12c4 <SIMCOM_MainFunction+0x11e>
			}
			else
			{
				SIMCOM_ERROR_CALLBACK(); // Report Error
    1208:	0e 94 c9 0c 	call	0x1992	; 0x1992 <COSMIC_SIMCOM_Error_Callback>
				SIMCOM_Aliveness_Counter = P_SIMCOM_ALIVENESS_ERROR_TIME; // Reload Timer
    120c:	80 e6       	ldi	r24, 0x60	; 96
    120e:	9a ee       	ldi	r25, 0xEA	; 234
    1210:	a0 e0       	ldi	r26, 0x00	; 0
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <SIMCOM_Aliveness_Counter>
    1218:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <SIMCOM_Aliveness_Counter+0x1>
    121c:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <SIMCOM_Aliveness_Counter+0x2>
    1220:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <SIMCOM_Aliveness_Counter+0x3>
    1224:	4f c0       	rjmp	.+158    	; 0x12c4 <SIMCOM_MainFunction+0x11e>
		break;

		case SIMCOM_WriteInProgress:
		{
			// Do Nothing
			SIMCOM_Callback(SIMCOM_Job_InProgress);
    1226:	82 e0       	ldi	r24, 0x02	; 2
    1228:	0e 94 22 08 	call	0x1044	; 0x1044 <SIMCOM_Callback>
		}
		break;
    122c:	4b c0       	rjmp	.+150    	; 0x12c4 <SIMCOM_MainFunction+0x11e>

		case SIMCOM_ReadInProgress:
		{
			// If the Read is in progress for one Task Cycle, then give a callback that the SIMCOM is in Progress
			SIMCOM_Callback(SIMCOM_Job_InProgress);
    122e:	82 e0       	ldi	r24, 0x02	; 2
    1230:	0e 94 22 08 	call	0x1044	; 0x1044 <SIMCOM_Callback>

			if(SIMCOM_IncompleteCounter != 0)
    1234:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <SIMCOM_IncompleteCounter>
    1238:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <SIMCOM_IncompleteCounter+0x1>
    123c:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <SIMCOM_IncompleteCounter+0x2>
    1240:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <SIMCOM_IncompleteCounter+0x3>
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	a1 05       	cpc	r26, r1
    1248:	b1 05       	cpc	r27, r1
    124a:	61 f0       	breq	.+24     	; 0x1264 <SIMCOM_MainFunction+0xbe>
			{
				SIMCOM_IncompleteCounter--;
    124c:	01 97       	sbiw	r24, 0x01	; 1
    124e:	a1 09       	sbc	r26, r1
    1250:	b1 09       	sbc	r27, r1
    1252:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <SIMCOM_IncompleteCounter>
    1256:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <SIMCOM_IncompleteCounter+0x1>
    125a:	a0 93 68 00 	sts	0x0068, r26	; 0x800068 <SIMCOM_IncompleteCounter+0x2>
    125e:	b0 93 69 00 	sts	0x0069, r27	; 0x800069 <SIMCOM_IncompleteCounter+0x3>
    1262:	30 c0       	rjmp	.+96     	; 0x12c4 <SIMCOM_MainFunction+0x11e>
			else
			{
//				Debug_SendString("Incomplete Response");

				// Update the Response to the SIMCOM Response Buffer even if it is incomplete, the caller will take care of the received response
				SIMCOM_UpdateCurrentJobResponse();
    1264:	0e 94 d6 06 	call	0xdac	; 0xdac <SIMCOM_UpdateCurrentJobResponse>

				// If the Read is in progress for long time, then there might be a problem with the reception.
				SIMCOM_Callback(SIMCOM_Job_Incomplete);
    1268:	84 e0       	ldi	r24, 0x04	; 4
    126a:	0e 94 22 08 	call	0x1044	; 0x1044 <SIMCOM_Callback>

				SIMCOM_ResetJob();
    126e:	0e 94 c4 06 	call	0xd88	; 0xd88 <SIMCOM_ResetJob>
    1272:	28 c0       	rjmp	.+80     	; 0x12c4 <SIMCOM_MainFunction+0x11e>
		break;

		case SIMCOM_WaitingForResponse:
		{
			// If waiting for response, then decrement the counter
			if(SIMCOM_CurrentJob.Timeout != 0)
    1274:	80 91 f8 05 	lds	r24, 0x05F8	; 0x8005f8 <SIMCOM_CurrentJob+0x2>
    1278:	90 91 f9 05 	lds	r25, 0x05F9	; 0x8005f9 <SIMCOM_CurrentJob+0x3>
    127c:	a0 91 fa 05 	lds	r26, 0x05FA	; 0x8005fa <SIMCOM_CurrentJob+0x4>
    1280:	b0 91 fb 05 	lds	r27, 0x05FB	; 0x8005fb <SIMCOM_CurrentJob+0x5>
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	a1 05       	cpc	r26, r1
    1288:	b1 05       	cpc	r27, r1
    128a:	79 f0       	breq	.+30     	; 0x12aa <SIMCOM_MainFunction+0x104>
			{
				SIMCOM_CurrentJob.Timeout--;
    128c:	01 97       	sbiw	r24, 0x01	; 1
    128e:	a1 09       	sbc	r26, r1
    1290:	b1 09       	sbc	r27, r1
    1292:	80 93 f8 05 	sts	0x05F8, r24	; 0x8005f8 <SIMCOM_CurrentJob+0x2>
    1296:	90 93 f9 05 	sts	0x05F9, r25	; 0x8005f9 <SIMCOM_CurrentJob+0x3>
    129a:	a0 93 fa 05 	sts	0x05FA, r26	; 0x8005fa <SIMCOM_CurrentJob+0x4>
    129e:	b0 93 fb 05 	sts	0x05FB, r27	; 0x8005fb <SIMCOM_CurrentJob+0x5>

				SIMCOM_Callback(SIMCOM_Job_InProgress);
    12a2:	82 e0       	ldi	r24, 0x02	; 2
    12a4:	0e 94 22 08 	call	0x1044	; 0x1044 <SIMCOM_Callback>
    12a8:	0d c0       	rjmp	.+26     	; 0x12c4 <SIMCOM_MainFunction+0x11e>
			else
			{
//				Debug_SendString("Response Timeout");

				// If the response has timed out, then give a callback stating error
				SIMCOM_Callback(SIMCOM_Job_Timeout);
    12aa:	83 e0       	ldi	r24, 0x03	; 3
    12ac:	0e 94 22 08 	call	0x1044	; 0x1044 <SIMCOM_Callback>

				SIMCOM_ResetJob();
    12b0:	0e 94 c4 06 	call	0xd88	; 0xd88 <SIMCOM_ResetJob>
    12b4:	07 c0       	rjmp	.+14     	; 0x12c4 <SIMCOM_MainFunction+0x11e>
		break;

		case SIMCOM_ReceptionCompleted:
		{
			// Update the Response to the SIMCOM Response Buffer
			SIMCOM_UpdateCurrentJobResponse();
    12b6:	0e 94 d6 06 	call	0xdac	; 0xdac <SIMCOM_UpdateCurrentJobResponse>

			// Once the reception is completed, then give a callback to read the data
			SIMCOM_Callback(SIMCOM_Job_Completed);
    12ba:	85 e0       	ldi	r24, 0x05	; 5
    12bc:	0e 94 22 08 	call	0x1044	; 0x1044 <SIMCOM_Callback>

			SIMCOM_ResetJob();
    12c0:	0e 94 c4 06 	call	0xd88	; 0xd88 <SIMCOM_ResetJob>
		}
	}

	if(SIMCOM_ComState != SIMCOM_Idle)
    12c4:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <SIMCOM_ComState>
    12c8:	88 23       	and	r24, r24
    12ca:	61 f0       	breq	.+24     	; 0x12e4 <SIMCOM_MainFunction+0x13e>
	{
		SIMCOM_Aliveness_Counter = P_SIMCOM_ALIVENESS_ERROR_TIME; // Reload Timer
    12cc:	80 e6       	ldi	r24, 0x60	; 96
    12ce:	9a ee       	ldi	r25, 0xEA	; 234
    12d0:	a0 e0       	ldi	r26, 0x00	; 0
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <SIMCOM_Aliveness_Counter>
    12d8:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <SIMCOM_Aliveness_Counter+0x1>
    12dc:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <SIMCOM_Aliveness_Counter+0x2>
    12e0:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <SIMCOM_Aliveness_Counter+0x3>
	}

	/* Call the Main Functions of the SIMCOM Sub Modules */

	SIMCOM_StateMachine();
    12e4:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <SIMCOM_StateMachine>
	SIMCOM_SSL_CONFIG_MainFunction();
    12e8:	0e 94 3b 11 	call	0x2276	; 0x2276 <SIMCOM_SSL_CONFIG_MainFunction>
	MQTT_StateMachine();
    12ec:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <MQTT_StateMachine>
	MQTT_Publish_StateMachine();
    12f0:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <MQTT_Publish_StateMachine>
	MQTT_AppMain();
    12f4:	0e 94 36 13 	call	0x266c	; 0x266c <MQTT_AppMain>
    12f8:	08 95       	ret

000012fa <SIMCOM_StateMachine_Callback>:
static void SIMCOM_StateMachine_Callback(SIMCOM_Job_Result_EN result)
{
	// This function will be called by the SIMCOM handler upon successful reception of the response

	// This will be read in the Main function, so simply set the value
	SIMCOM_Job_Result = result;
    12fa:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <SIMCOM_Job_Result>
    12fe:	08 95       	ret

00001300 <APN_Selection>:
}

void APN_Selection(char *checkstring)
{
    1300:	0f 93       	push	r16
    1302:	1f 93       	push	r17
    1304:	cf 93       	push	r28
    1306:	df 93       	push	r29
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
    130c:	6e 97       	sbiw	r28, 0x1e	; 30
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	f8 94       	cli
    1312:	de bf       	out	0x3e, r29	; 62
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	cd bf       	out	0x3d, r28	; 61
	checkstring = checkstring+5;
    1318:	dc 01       	movw	r26, r24
    131a:	15 96       	adiw	r26, 0x05	; 5
	UBYTE i;
	char *APN,temp[30];
	ULONG val;
	for(i=0;i<=3;i++)
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	09 c0       	rjmp	.+18     	; 0x1332 <APN_Selection+0x32>
	{
		temp[i] = *checkstring;
    1320:	8d 91       	ld	r24, X+
    1322:	e1 e0       	ldi	r30, 0x01	; 1
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	ec 0f       	add	r30, r28
    1328:	fd 1f       	adc	r31, r29
    132a:	e9 0f       	add	r30, r25
    132c:	f1 1d       	adc	r31, r1
    132e:	80 83       	st	Z, r24
{
	checkstring = checkstring+5;
	UBYTE i;
	char *APN,temp[30];
	ULONG val;
	for(i=0;i<=3;i++)
    1330:	9f 5f       	subi	r25, 0xFF	; 255
    1332:	94 30       	cpi	r25, 0x04	; 4
    1334:	a8 f3       	brcs	.-22     	; 0x1320 <APN_Selection+0x20>
	{
		temp[i] = *checkstring;
		checkstring++;
	}
	val = atoi(temp);
    1336:	ce 01       	movw	r24, r28
    1338:	01 96       	adiw	r24, 0x01	; 1
    133a:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <atoi>
    133e:	09 2e       	mov	r0, r25
    1340:	00 0c       	add	r0, r0
    1342:	aa 0b       	sbc	r26, r26
    1344:	bb 0b       	sbc	r27, r27
	if(val == 4044)
    1346:	8c 3c       	cpi	r24, 0xCC	; 204
    1348:	2f e0       	ldi	r18, 0x0F	; 15
    134a:	92 07       	cpc	r25, r18
    134c:	a1 05       	cpc	r26, r1
    134e:	b1 05       	cpc	r27, r1
    1350:	91 f0       	breq	.+36     	; 0x1376 <APN_Selection+0x76>
	{
		APN = VI;
	}
	else if(val == 4058)
    1352:	8a 3d       	cpi	r24, 0xDA	; 218
    1354:	2f e0       	ldi	r18, 0x0F	; 15
    1356:	92 07       	cpc	r25, r18
    1358:	a1 05       	cpc	r26, r1
    135a:	b1 05       	cpc	r27, r1
    135c:	79 f0       	breq	.+30     	; 0x137c <APN_Selection+0x7c>
	{
		APN = JIO;
	}
	else if(val == 4049)
    135e:	81 3d       	cpi	r24, 0xD1	; 209
    1360:	2f e0       	ldi	r18, 0x0F	; 15
    1362:	92 07       	cpc	r25, r18
    1364:	a1 05       	cpc	r26, r1
    1366:	b1 05       	cpc	r27, r1
    1368:	61 f0       	breq	.+24     	; 0x1382 <APN_Selection+0x82>
	{
		APN = AIRTEL;
	}
	else if(val == 4048)
    136a:	80 3d       	cpi	r24, 0xD0	; 208
    136c:	9f 40       	sbci	r25, 0x0F	; 15
    136e:	a1 05       	cpc	r26, r1
    1370:	b1 05       	cpc	r27, r1
    1372:	61 f4       	brne	.+24     	; 0x138c <APN_Selection+0x8c>
    1374:	09 c0       	rjmp	.+18     	; 0x1388 <APN_Selection+0x88>
		checkstring++;
	}
	val = atoi(temp);
	if(val == 4044)
	{
		APN = VI;
    1376:	09 ef       	ldi	r16, 0xF9	; 249
    1378:	10 e0       	ldi	r17, 0x00	; 0
    137a:	08 c0       	rjmp	.+16     	; 0x138c <APN_Selection+0x8c>
	}
	else if(val == 4058)
	{
		APN = JIO;
    137c:	04 e0       	ldi	r16, 0x04	; 4
    137e:	11 e0       	ldi	r17, 0x01	; 1
    1380:	05 c0       	rjmp	.+10     	; 0x138c <APN_Selection+0x8c>
	}
	else if(val == 4049)
	{
		APN = AIRTEL;
    1382:	0d e0       	ldi	r16, 0x0D	; 13
    1384:	11 e0       	ldi	r17, 0x01	; 1
    1386:	02 c0       	rjmp	.+4      	; 0x138c <APN_Selection+0x8c>
	}
	else if(val == 4048)
	{
		APN = BSNL;
    1388:	0e e1       	ldi	r16, 0x1E	; 30
    138a:	11 e0       	ldi	r17, 0x01	; 1
	}
	sprintf(APN_name,"AT+CGDCONT=1,\"IP\",%s",APN);
    138c:	1f 93       	push	r17
    138e:	0f 93       	push	r16
    1390:	88 e2       	ldi	r24, 0x28	; 40
    1392:	91 e0       	ldi	r25, 0x01	; 1
    1394:	9f 93       	push	r25
    1396:	8f 93       	push	r24
    1398:	8f ef       	ldi	r24, 0xFF	; 255
    139a:	95 e0       	ldi	r25, 0x05	; 5
    139c:	9f 93       	push	r25
    139e:	8f 93       	push	r24
    13a0:	0e 94 48 14 	call	0x2890	; 0x2890 <sprintf>
}
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	6e 96       	adiw	r28, 0x1e	; 30
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	f8 94       	cli
    13b6:	de bf       	out	0x3e, r29	; 62
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	cd bf       	out	0x3d, r28	; 61
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	1f 91       	pop	r17
    13c2:	0f 91       	pop	r16
    13c4:	08 95       	ret

000013c6 <SIMCOM_StateMachine>:
/*****************************************/
/* Function Definitions                  */
/*****************************************/

void SIMCOM_StateMachine(void)
{
    13c6:	cf 93       	push	r28
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
    13c8:	c0 91 10 04 	lds	r28, 0x0410	; 0x800410 <SIMCOM_State>
	
	BOOL RetryInNextCycle = FALSE;

	switch(SIMCOM_State)
    13cc:	8c 2f       	mov	r24, r28
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	8c 30       	cpi	r24, 0x0C	; 12
    13d2:	91 05       	cpc	r25, r1
    13d4:	08 f0       	brcs	.+2      	; 0x13d8 <SIMCOM_StateMachine+0x12>
    13d6:	45 c2       	rjmp	.+1162   	; 0x1862 <SIMCOM_StateMachine+0x49c>
    13d8:	fc 01       	movw	r30, r24
    13da:	e6 5d       	subi	r30, 0xD6	; 214
    13dc:	ff 4f       	sbci	r31, 0xFF	; 255
    13de:	0c 94 dc 13 	jmp	0x27b8	; 0x27b8 <__tablejump2__>
	{
		case SIMCOM_SM_Init:
		{
			// First Ensure the SIMCOM Module is Connected
			if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    13e2:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <SIMCOM_Job_Result>
    13e6:	81 11       	cpse	r24, r1
    13e8:	11 c0       	rjmp	.+34     	; 0x140c <SIMCOM_StateMachine+0x46>
			{
				// Send AT Command and wait for response
				if(SIMCOM_Schedule_Job("AT", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
    13ea:	2d e7       	ldi	r18, 0x7D	; 125
    13ec:	39 e0       	ldi	r19, 0x09	; 9
    13ee:	40 ed       	ldi	r20, 0xD0	; 208
    13f0:	57 e0       	ldi	r21, 0x07	; 7
    13f2:	60 e0       	ldi	r22, 0x00	; 0
    13f4:	70 e0       	ldi	r23, 0x00	; 0
    13f6:	8d e3       	ldi	r24, 0x3D	; 61
    13f8:	91 e0       	ldi	r25, 0x01	; 1
    13fa:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    13fe:	81 30       	cpi	r24, 0x01	; 1
    1400:	09 f0       	breq	.+2      	; 0x1404 <SIMCOM_StateMachine+0x3e>
    1402:	31 c2       	rjmp	.+1122   	; 0x1866 <SIMCOM_StateMachine+0x4a0>
				{	
					// Set it to Scheduled only when the SIMCOM Module Accepted it
					SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1404:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <SIMCOM_Job_Result>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	72 c2       	rjmp	.+1252   	; 0x18f0 <SIMCOM_StateMachine+0x52a>
			}
			else
			{
				
				// Cyclic part for the response
				if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    140c:	85 30       	cpi	r24, 0x05	; 5
    140e:	c9 f4       	brne	.+50     	; 0x1442 <SIMCOM_StateMachine+0x7c>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    1410:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_ResponseLength>
    1414:	82 30       	cpi	r24, 0x02	; 2
    1416:	51 f4       	brne	.+20     	; 0x142c <SIMCOM_StateMachine+0x66>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    1418:	60 e4       	ldi	r22, 0x40	; 64
    141a:	71 e0       	ldi	r23, 0x01	; 1
    141c:	8e e2       	ldi	r24, 0x2E	; 46
    141e:	95 e0       	ldi	r25, 0x05	; 5
    1420:	0e 94 16 14 	call	0x282c	; 0x282c <strcmp>
    1424:	89 2b       	or	r24, r25
    1426:	21 f0       	breq	.+8      	; 0x1430 <SIMCOM_StateMachine+0x6a>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	03 c0       	rjmp	.+6      	; 0x1432 <SIMCOM_StateMachine+0x6c>
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	01 c0       	rjmp	.+2      	; 0x1432 <SIMCOM_StateMachine+0x6c>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    1430:	81 e0       	ldi	r24, 0x01	; 1
				{
					// Job has been completed
					
					// Check if the response is OK or not.
					if(SIMCOM_IsResponseOK())
    1432:	88 23       	and	r24, r24
    1434:	09 f4       	brne	.+2      	; 0x1438 <SIMCOM_StateMachine+0x72>
    1436:	19 c2       	rjmp	.+1074   	; 0x186a <SIMCOM_StateMachine+0x4a4>
					{
						SIMCOM_State = SIMCOM_SM_SIM_Check;
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <SIMCOM_State>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	57 c2       	rjmp	.+1198   	; 0x18f0 <SIMCOM_StateMachine+0x52a>
						// If the returned value is ERROR or something else, then act accordingly
						// TODO: Later
						RetryInNextCycle = TRUE;
					}
				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1442:	83 50       	subi	r24, 0x03	; 3
    1444:	82 30       	cpi	r24, 0x02	; 2
    1446:	08 f4       	brcc	.+2      	; 0x144a <SIMCOM_StateMachine+0x84>
    1448:	12 c2       	rjmp	.+1060   	; 0x186e <SIMCOM_StateMachine+0x4a8>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	51 c2       	rjmp	.+1186   	; 0x18f0 <SIMCOM_StateMachine+0x52a>
		}
		break;
		case SIMCOM_SM_SIM_Check:
		{
			// First Ensure the SIMCOM Module is Connected
			if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    144e:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <SIMCOM_Job_Result>
    1452:	81 11       	cpse	r24, r1
    1454:	11 c0       	rjmp	.+34     	; 0x1478 <SIMCOM_StateMachine+0xb2>
			{

				// Send AT Command and wait for response
				if(SIMCOM_Schedule_Job("AT+CPIN?", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
    1456:	2d e7       	ldi	r18, 0x7D	; 125
    1458:	39 e0       	ldi	r19, 0x09	; 9
    145a:	40 ed       	ldi	r20, 0xD0	; 208
    145c:	57 e0       	ldi	r21, 0x07	; 7
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	70 e0       	ldi	r23, 0x00	; 0
    1462:	83 e4       	ldi	r24, 0x43	; 67
    1464:	91 e0       	ldi	r25, 0x01	; 1
    1466:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    146a:	81 30       	cpi	r24, 0x01	; 1
    146c:	09 f0       	breq	.+2      	; 0x1470 <SIMCOM_StateMachine+0xaa>
    146e:	01 c2       	rjmp	.+1026   	; 0x1872 <SIMCOM_StateMachine+0x4ac>
				{
					// Set it to Scheduled only when the SIMCOM Module Accepted it
					SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1470:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <SIMCOM_Job_Result>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	3c c2       	rjmp	.+1144   	; 0x18f0 <SIMCOM_StateMachine+0x52a>
			}
			else
			{
						
				// Cyclic part for the response
				if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1478:	85 30       	cpi	r24, 0x05	; 5
    147a:	f9 f4       	brne	.+62     	; 0x14ba <SIMCOM_StateMachine+0xf4>
				{
					// Job has been completed
					char * RxString = StringHelper_GetPointerAfter(SIMCOM_GetResponseBuffer(), "+CPIN: ");
    147c:	6c e4       	ldi	r22, 0x4C	; 76
    147e:	71 e0       	ldi	r23, 0x01	; 1
    1480:	8e e2       	ldi	r24, 0x2E	; 46
    1482:	95 e0       	ldi	r25, 0x05	; 5
    1484:	0e 94 ef 04 	call	0x9de	; 0x9de <StringHelper_GetPointerAfter>
							

					if(strcmp(RxString, "READY") == 0)
    1488:	6a e5       	ldi	r22, 0x5A	; 90
    148a:	71 e0       	ldi	r23, 0x01	; 1
    148c:	0e 94 16 14 	call	0x282c	; 0x282c <strcmp>
    1490:	89 2b       	or	r24, r25
    1492:	09 f0       	breq	.+2      	; 0x1496 <SIMCOM_StateMachine+0xd0>
    1494:	f0 c1       	rjmp	.+992    	; 0x1876 <SIMCOM_StateMachine+0x4b0>
					{
						char * RxString = StringHelper_GetPointerAfter(SIMCOM_GetResponseBuffer(), "+CPIN:READY");
    1496:	64 e5       	ldi	r22, 0x54	; 84
    1498:	71 e0       	ldi	r23, 0x01	; 1
    149a:	8e e2       	ldi	r24, 0x2E	; 46
    149c:	95 e0       	ldi	r25, 0x05	; 5
    149e:	0e 94 ef 04 	call	0x9de	; 0x9de <StringHelper_GetPointerAfter>
								
						// Check if the response is OK or not.
						if(strcmp(RxString,"OK"))
    14a2:	60 e4       	ldi	r22, 0x40	; 64
    14a4:	71 e0       	ldi	r23, 0x01	; 1
    14a6:	0e 94 16 14 	call	0x282c	; 0x282c <strcmp>
    14aa:	89 2b       	or	r24, r25
    14ac:	09 f4       	brne	.+2      	; 0x14b0 <SIMCOM_StateMachine+0xea>
    14ae:	e5 c1       	rjmp	.+970    	; 0x187a <SIMCOM_StateMachine+0x4b4>
						{
							SIMCOM_State = SIMCOM_DisableCall;
    14b0:	85 e0       	ldi	r24, 0x05	; 5
    14b2:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <SIMCOM_State>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	1b c2       	rjmp	.+1078   	; 0x18f0 <SIMCOM_StateMachine+0x52a>
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}			
				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    14ba:	83 50       	subi	r24, 0x03	; 3
    14bc:	82 30       	cpi	r24, 0x02	; 2
    14be:	08 f4       	brcc	.+2      	; 0x14c2 <SIMCOM_StateMachine+0xfc>
    14c0:	de c1       	rjmp	.+956    	; 0x187e <SIMCOM_StateMachine+0x4b8>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	15 c2       	rjmp	.+1066   	; 0x18f0 <SIMCOM_StateMachine+0x52a>
		}
		break;
		
		case SIMCOM_DisableCall:
		{
			if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    14c6:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <SIMCOM_Job_Result>
    14ca:	81 11       	cpse	r24, r1
    14cc:	11 c0       	rjmp	.+34     	; 0x14f0 <SIMCOM_StateMachine+0x12a>
			{
				// Send AT Command and wait for response
				if(SIMCOM_Schedule_Job("AT+CRC=0", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
    14ce:	2d e7       	ldi	r18, 0x7D	; 125
    14d0:	39 e0       	ldi	r19, 0x09	; 9
    14d2:	40 ed       	ldi	r20, 0xD0	; 208
    14d4:	57 e0       	ldi	r21, 0x07	; 7
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	80 e6       	ldi	r24, 0x60	; 96
    14dc:	91 e0       	ldi	r25, 0x01	; 1
    14de:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    14e2:	81 30       	cpi	r24, 0x01	; 1
    14e4:	09 f0       	breq	.+2      	; 0x14e8 <SIMCOM_StateMachine+0x122>
    14e6:	cd c1       	rjmp	.+922    	; 0x1882 <SIMCOM_StateMachine+0x4bc>
				{
					// Set it to Scheduled only when the SIMCOM Module Accepted it
					SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    14e8:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <SIMCOM_Job_Result>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	00 c2       	rjmp	.+1024   	; 0x18f0 <SIMCOM_StateMachine+0x52a>
				}
			}
			else
			{
				// Cyclic part for the response
				if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    14f0:	85 30       	cpi	r24, 0x05	; 5
    14f2:	c9 f4       	brne	.+50     	; 0x1526 <SIMCOM_StateMachine+0x160>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    14f4:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_ResponseLength>
    14f8:	82 30       	cpi	r24, 0x02	; 2
    14fa:	51 f4       	brne	.+20     	; 0x1510 <SIMCOM_StateMachine+0x14a>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    14fc:	60 e4       	ldi	r22, 0x40	; 64
    14fe:	71 e0       	ldi	r23, 0x01	; 1
    1500:	8e e2       	ldi	r24, 0x2E	; 46
    1502:	95 e0       	ldi	r25, 0x05	; 5
    1504:	0e 94 16 14 	call	0x282c	; 0x282c <strcmp>
    1508:	89 2b       	or	r24, r25
    150a:	21 f0       	breq	.+8      	; 0x1514 <SIMCOM_StateMachine+0x14e>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	03 c0       	rjmp	.+6      	; 0x1516 <SIMCOM_StateMachine+0x150>
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	01 c0       	rjmp	.+2      	; 0x1516 <SIMCOM_StateMachine+0x150>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    1514:	81 e0       	ldi	r24, 0x01	; 1
				{
					/* Accept both Roaming and Local Registration */
					if(SIMCOM_IsResponseOK())
    1516:	88 23       	and	r24, r24
    1518:	09 f4       	brne	.+2      	; 0x151c <SIMCOM_StateMachine+0x156>
    151a:	b5 c1       	rjmp	.+874    	; 0x1886 <SIMCOM_StateMachine+0x4c0>
					{
						SIMCOM_State = SIMCOM_DisableMsg; // Move to next state
    151c:	86 e0       	ldi	r24, 0x06	; 6
    151e:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <SIMCOM_State>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	e5 c1       	rjmp	.+970    	; 0x18f0 <SIMCOM_StateMachine+0x52a>

						RetryInNextCycle = TRUE;
					}

				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1526:	83 50       	subi	r24, 0x03	; 3
    1528:	82 30       	cpi	r24, 0x02	; 2
    152a:	08 f4       	brcc	.+2      	; 0x152e <SIMCOM_StateMachine+0x168>
    152c:	ae c1       	rjmp	.+860    	; 0x188a <SIMCOM_StateMachine+0x4c4>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	df c1       	rjmp	.+958    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
		}
		break;
		
		case SIMCOM_DisableMsg:
		{
			if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1532:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <SIMCOM_Job_Result>
    1536:	81 11       	cpse	r24, r1
    1538:	11 c0       	rjmp	.+34     	; 0x155c <SIMCOM_StateMachine+0x196>
			{
				// Send AT Command and wait for response
				if(SIMCOM_Schedule_Job("AT+CNMI=0,0,0,0", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
    153a:	2d e7       	ldi	r18, 0x7D	; 125
    153c:	39 e0       	ldi	r19, 0x09	; 9
    153e:	40 ed       	ldi	r20, 0xD0	; 208
    1540:	57 e0       	ldi	r21, 0x07	; 7
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	89 e6       	ldi	r24, 0x69	; 105
    1548:	91 e0       	ldi	r25, 0x01	; 1
    154a:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    154e:	81 30       	cpi	r24, 0x01	; 1
    1550:	09 f0       	breq	.+2      	; 0x1554 <SIMCOM_StateMachine+0x18e>
    1552:	9d c1       	rjmp	.+826    	; 0x188e <SIMCOM_StateMachine+0x4c8>
				{
					// Set it to Scheduled only when the SIMCOM Module Accepted it
					SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1554:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <SIMCOM_Job_Result>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	ca c1       	rjmp	.+916    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
				}
			}
			else
			{
				// Cyclic part for the response
				if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    155c:	85 30       	cpi	r24, 0x05	; 5
    155e:	c9 f4       	brne	.+50     	; 0x1592 <SIMCOM_StateMachine+0x1cc>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    1560:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_ResponseLength>
    1564:	82 30       	cpi	r24, 0x02	; 2
    1566:	51 f4       	brne	.+20     	; 0x157c <SIMCOM_StateMachine+0x1b6>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    1568:	60 e4       	ldi	r22, 0x40	; 64
    156a:	71 e0       	ldi	r23, 0x01	; 1
    156c:	8e e2       	ldi	r24, 0x2E	; 46
    156e:	95 e0       	ldi	r25, 0x05	; 5
    1570:	0e 94 16 14 	call	0x282c	; 0x282c <strcmp>
    1574:	89 2b       	or	r24, r25
    1576:	21 f0       	breq	.+8      	; 0x1580 <SIMCOM_StateMachine+0x1ba>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	03 c0       	rjmp	.+6      	; 0x1582 <SIMCOM_StateMachine+0x1bc>
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	01 c0       	rjmp	.+2      	; 0x1582 <SIMCOM_StateMachine+0x1bc>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    1580:	81 e0       	ldi	r24, 0x01	; 1
				{
					/* Accept both Roaming and Local Registration */
					if(SIMCOM_IsResponseOK())
    1582:	88 23       	and	r24, r24
    1584:	09 f4       	brne	.+2      	; 0x1588 <SIMCOM_StateMachine+0x1c2>
    1586:	85 c1       	rjmp	.+778    	; 0x1892 <SIMCOM_StateMachine+0x4cc>
					{
						SIMCOM_State = SIMCOM_DisableGPRS_URC; // Move to next state
    1588:	87 e0       	ldi	r24, 0x07	; 7
    158a:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <SIMCOM_State>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	af c1       	rjmp	.+862    	; 0x18f0 <SIMCOM_StateMachine+0x52a>

						RetryInNextCycle = TRUE;
					}

				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1592:	83 50       	subi	r24, 0x03	; 3
    1594:	82 30       	cpi	r24, 0x02	; 2
    1596:	08 f4       	brcc	.+2      	; 0x159a <SIMCOM_StateMachine+0x1d4>
    1598:	7e c1       	rjmp	.+764    	; 0x1896 <SIMCOM_StateMachine+0x4d0>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	a9 c1       	rjmp	.+850    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
		}
		break;
		
		case SIMCOM_DisableGPRS_URC:
		{
			if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    159e:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <SIMCOM_Job_Result>
    15a2:	81 11       	cpse	r24, r1
    15a4:	11 c0       	rjmp	.+34     	; 0x15c8 <SIMCOM_StateMachine+0x202>
			{
				// Send AT Command and wait for response
				if(SIMCOM_Schedule_Job("AT+CSSN=0,0", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
    15a6:	2d e7       	ldi	r18, 0x7D	; 125
    15a8:	39 e0       	ldi	r19, 0x09	; 9
    15aa:	40 ed       	ldi	r20, 0xD0	; 208
    15ac:	57 e0       	ldi	r21, 0x07	; 7
    15ae:	60 e0       	ldi	r22, 0x00	; 0
    15b0:	70 e0       	ldi	r23, 0x00	; 0
    15b2:	89 e7       	ldi	r24, 0x79	; 121
    15b4:	91 e0       	ldi	r25, 0x01	; 1
    15b6:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    15ba:	81 30       	cpi	r24, 0x01	; 1
    15bc:	09 f0       	breq	.+2      	; 0x15c0 <SIMCOM_StateMachine+0x1fa>
    15be:	6d c1       	rjmp	.+730    	; 0x189a <SIMCOM_StateMachine+0x4d4>
				{
					// Set it to Scheduled only when the SIMCOM Module Accepted it
					SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    15c0:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <SIMCOM_Job_Result>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	94 c1       	rjmp	.+808    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
				}
			}
			else
			{
				// Cyclic part for the response
				if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    15c8:	85 30       	cpi	r24, 0x05	; 5
    15ca:	c9 f4       	brne	.+50     	; 0x15fe <SIMCOM_StateMachine+0x238>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    15cc:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_ResponseLength>
    15d0:	82 30       	cpi	r24, 0x02	; 2
    15d2:	51 f4       	brne	.+20     	; 0x15e8 <SIMCOM_StateMachine+0x222>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    15d4:	60 e4       	ldi	r22, 0x40	; 64
    15d6:	71 e0       	ldi	r23, 0x01	; 1
    15d8:	8e e2       	ldi	r24, 0x2E	; 46
    15da:	95 e0       	ldi	r25, 0x05	; 5
    15dc:	0e 94 16 14 	call	0x282c	; 0x282c <strcmp>
    15e0:	89 2b       	or	r24, r25
    15e2:	21 f0       	breq	.+8      	; 0x15ec <SIMCOM_StateMachine+0x226>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	03 c0       	rjmp	.+6      	; 0x15ee <SIMCOM_StateMachine+0x228>
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	01 c0       	rjmp	.+2      	; 0x15ee <SIMCOM_StateMachine+0x228>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
				{
					/* Accept both Roaming and Local Registration */
					if(SIMCOM_IsResponseOK())
    15ee:	88 23       	and	r24, r24
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <SIMCOM_StateMachine+0x22e>
    15f2:	55 c1       	rjmp	.+682    	; 0x189e <SIMCOM_StateMachine+0x4d8>
					{
						SIMCOM_State = SIMCOM_SM_Check_signal_strength; // Move to next state
    15f4:	82 e0       	ldi	r24, 0x02	; 2
    15f6:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <SIMCOM_State>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	79 c1       	rjmp	.+754    	; 0x18f0 <SIMCOM_StateMachine+0x52a>

						RetryInNextCycle = TRUE;
					}

				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    15fe:	83 50       	subi	r24, 0x03	; 3
    1600:	82 30       	cpi	r24, 0x02	; 2
    1602:	08 f4       	brcc	.+2      	; 0x1606 <SIMCOM_StateMachine+0x240>
    1604:	4e c1       	rjmp	.+668    	; 0x18a2 <SIMCOM_StateMachine+0x4dc>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	73 c1       	rjmp	.+742    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
		break;
		
		case SIMCOM_SM_Check_signal_strength:
		{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    160a:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <SIMCOM_Job_Result>
    160e:	81 11       	cpse	r24, r1
    1610:	11 c0       	rjmp	.+34     	; 0x1634 <SIMCOM_StateMachine+0x26e>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CSQ", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
    1612:	2d e7       	ldi	r18, 0x7D	; 125
    1614:	39 e0       	ldi	r19, 0x09	; 9
    1616:	40 ed       	ldi	r20, 0xD0	; 208
    1618:	57 e0       	ldi	r21, 0x07	; 7
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	85 e8       	ldi	r24, 0x85	; 133
    1620:	91 e0       	ldi	r25, 0x01	; 1
    1622:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1626:	81 30       	cpi	r24, 0x01	; 1
    1628:	09 f0       	breq	.+2      	; 0x162c <SIMCOM_StateMachine+0x266>
    162a:	3d c1       	rjmp	.+634    	; 0x18a6 <SIMCOM_StateMachine+0x4e0>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    162c:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <SIMCOM_Job_Result>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	5e c1       	rjmp	.+700    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1634:	85 30       	cpi	r24, 0x05	; 5
    1636:	81 f4       	brne	.+32     	; 0x1658 <SIMCOM_StateMachine+0x292>
						// Job has been completed

						// Positive Response would be -> +CLTS: <mode>
						// <mode> : 0 Disable   1 Enable

						ULONG NetworkStrength = SIMCOM_GetCSV_Number_fromBuffer("+CSQ: ", 1);
    1638:	61 e0       	ldi	r22, 0x01	; 1
    163a:	8c e8       	ldi	r24, 0x8C	; 140
    163c:	91 e0       	ldi	r25, 0x01	; 1
    163e:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <SIMCOM_GetCSV_Number_fromBuffer>

						/* Accept both Roaming and Local Registration */
						if(NetworkStrength <= 31)
    1642:	60 32       	cpi	r22, 0x20	; 32
    1644:	71 05       	cpc	r23, r1
    1646:	81 05       	cpc	r24, r1
    1648:	91 05       	cpc	r25, r1
    164a:	08 f0       	brcs	.+2      	; 0x164e <SIMCOM_StateMachine+0x288>
    164c:	2e c1       	rjmp	.+604    	; 0x18aa <SIMCOM_StateMachine+0x4e4>
						{
						
							SIMCOM_State = SIMCOM_SM_NW_Registration_Check; // Move to next state
    164e:	83 e0       	ldi	r24, 0x03	; 3
    1650:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <SIMCOM_State>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	4c c1       	rjmp	.+664    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
							}

							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1658:	83 50       	subi	r24, 0x03	; 3
    165a:	82 30       	cpi	r24, 0x02	; 2
    165c:	08 f4       	brcc	.+2      	; 0x1660 <SIMCOM_StateMachine+0x29a>
    165e:	27 c1       	rjmp	.+590    	; 0x18ae <SIMCOM_StateMachine+0x4e8>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	46 c1       	rjmp	.+652    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
		}
		break;

		case SIMCOM_SM_NW_Registration_Check:
		{
			if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1664:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <SIMCOM_Job_Result>
    1668:	81 11       	cpse	r24, r1
    166a:	11 c0       	rjmp	.+34     	; 0x168e <SIMCOM_StateMachine+0x2c8>
			{
				// Send AT Command and wait for response
				if(SIMCOM_Schedule_Job("AT+CREG?", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
    166c:	2d e7       	ldi	r18, 0x7D	; 125
    166e:	39 e0       	ldi	r19, 0x09	; 9
    1670:	40 ed       	ldi	r20, 0xD0	; 208
    1672:	57 e0       	ldi	r21, 0x07	; 7
    1674:	60 e0       	ldi	r22, 0x00	; 0
    1676:	70 e0       	ldi	r23, 0x00	; 0
    1678:	83 e9       	ldi	r24, 0x93	; 147
    167a:	91 e0       	ldi	r25, 0x01	; 1
    167c:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1680:	81 30       	cpi	r24, 0x01	; 1
    1682:	09 f0       	breq	.+2      	; 0x1686 <SIMCOM_StateMachine+0x2c0>
    1684:	16 c1       	rjmp	.+556    	; 0x18b2 <SIMCOM_StateMachine+0x4ec>
				{
					// Set it to Scheduled only when the SIMCOM Module Accepted it
					SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1686:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <SIMCOM_Job_Result>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	31 c1       	rjmp	.+610    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
				}
			}
			else
			{
				// Cyclic part for the response
				if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    168e:	85 30       	cpi	r24, 0x05	; 5
    1690:	a9 f4       	brne	.+42     	; 0x16bc <SIMCOM_StateMachine+0x2f6>
								3 Registration denied
								4 Unknown
								5 Registered, roaming
					 */

					ULONG NetworkRegistrationStatus = SIMCOM_GetCSV_Number_fromBuffer("+CREG: ", 2);
    1692:	62 e0       	ldi	r22, 0x02	; 2
    1694:	8c e9       	ldi	r24, 0x9C	; 156
    1696:	91 e0       	ldi	r25, 0x01	; 1
    1698:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <SIMCOM_GetCSV_Number_fromBuffer>

					/* Accept both Roaming and Local Registration */
					if((NetworkRegistrationStatus == 1) || (NetworkRegistrationStatus == 5))
    169c:	61 30       	cpi	r22, 0x01	; 1
    169e:	71 05       	cpc	r23, r1
    16a0:	81 05       	cpc	r24, r1
    16a2:	91 05       	cpc	r25, r1
    16a4:	31 f0       	breq	.+12     	; 0x16b2 <SIMCOM_StateMachine+0x2ec>
    16a6:	65 30       	cpi	r22, 0x05	; 5
    16a8:	71 05       	cpc	r23, r1
    16aa:	81 05       	cpc	r24, r1
    16ac:	91 05       	cpc	r25, r1
    16ae:	09 f0       	breq	.+2      	; 0x16b2 <SIMCOM_StateMachine+0x2ec>
    16b0:	02 c1       	rjmp	.+516    	; 0x18b6 <SIMCOM_StateMachine+0x4f0>
					{
						
						SIMCOM_State = SIMCOM_SM_CheckNetwork; // Move to next state
    16b2:	8a e0       	ldi	r24, 0x0A	; 10
    16b4:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <SIMCOM_State>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    16b8:	80 e0       	ldi	r24, 0x00	; 0

					/* Accept both Roaming and Local Registration */
					if((NetworkRegistrationStatus == 1) || (NetworkRegistrationStatus == 5))
					{
						
						SIMCOM_State = SIMCOM_SM_CheckNetwork; // Move to next state
    16ba:	1a c1       	rjmp	.+564    	; 0x18f0 <SIMCOM_StateMachine+0x52a>

						RetryInNextCycle = TRUE;
					}

				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    16bc:	83 50       	subi	r24, 0x03	; 3
    16be:	82 30       	cpi	r24, 0x02	; 2
    16c0:	08 f4       	brcc	.+2      	; 0x16c4 <SIMCOM_StateMachine+0x2fe>
    16c2:	fb c0       	rjmp	.+502    	; 0x18ba <SIMCOM_StateMachine+0x4f4>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	14 c1       	rjmp	.+552    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
		break;
		
		case SIMCOM_SM_CheckNetwork:
		{
			// First Ensure the SIMCOM Module is Connected
			if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    16c8:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <SIMCOM_Job_Result>
    16cc:	81 11       	cpse	r24, r1
    16ce:	11 c0       	rjmp	.+34     	; 0x16f2 <SIMCOM_StateMachine+0x32c>
			{
				// Send AT Command and wait for response
				if(SIMCOM_Schedule_Job("AT+COPS?", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
    16d0:	2d e7       	ldi	r18, 0x7D	; 125
    16d2:	39 e0       	ldi	r19, 0x09	; 9
    16d4:	40 ed       	ldi	r20, 0xD0	; 208
    16d6:	57 e0       	ldi	r21, 0x07	; 7
    16d8:	60 e0       	ldi	r22, 0x00	; 0
    16da:	70 e0       	ldi	r23, 0x00	; 0
    16dc:	84 ea       	ldi	r24, 0xA4	; 164
    16de:	91 e0       	ldi	r25, 0x01	; 1
    16e0:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    16e4:	81 30       	cpi	r24, 0x01	; 1
    16e6:	09 f0       	breq	.+2      	; 0x16ea <SIMCOM_StateMachine+0x324>
    16e8:	ea c0       	rjmp	.+468    	; 0x18be <SIMCOM_StateMachine+0x4f8>
				{
					//Display_String("AT");
					// Set it to Scheduled only when the SIMCOM Module Accepted it
					SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    16ea:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <SIMCOM_Job_Result>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	ff c0       	rjmp	.+510    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
				}
			}
			else
			{
				// Cyclic part for the response
				if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    16f2:	85 30       	cpi	r24, 0x05	; 5
    16f4:	b1 f4       	brne	.+44     	; 0x1722 <SIMCOM_StateMachine+0x35c>
				{
					// Job has been completed
									
					// Check if the response is OK or not.
					if(IsSIMCOM_ResponseStartsWith("+COPS: "))
    16f6:	6e e2       	ldi	r22, 0x2E	; 46
    16f8:	75 e0       	ldi	r23, 0x05	; 5
    16fa:	8d ea       	ldi	r24, 0xAD	; 173
    16fc:	91 e0       	ldi	r25, 0x01	; 1
    16fe:	0e 94 74 05 	call	0xae8	; 0xae8 <StringHelper_startsWith>
    1702:	88 23       	and	r24, r24
    1704:	09 f4       	brne	.+2      	; 0x1708 <SIMCOM_StateMachine+0x342>
    1706:	dd c0       	rjmp	.+442    	; 0x18c2 <SIMCOM_StateMachine+0x4fc>
					{
						char *Netstr = StringHelper_GetPointerAfter(SIMCOM_GetResponseBuffer(), "+COPS: ");
    1708:	6d ea       	ldi	r22, 0xAD	; 173
    170a:	71 e0       	ldi	r23, 0x01	; 1
    170c:	8e e2       	ldi	r24, 0x2E	; 46
    170e:	95 e0       	ldi	r25, 0x05	; 5
    1710:	0e 94 ef 04 	call	0x9de	; 0x9de <StringHelper_GetPointerAfter>
						APN_Selection(Netstr);
    1714:	0e 94 80 09 	call	0x1300	; 0x1300 <APN_Selection>
						SIMCOM_State = SIMCOM_SM_SelectNetwork;
    1718:	8b e0       	ldi	r24, 0x0B	; 11
    171a:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <SIMCOM_State>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	e7 c0       	rjmp	.+462    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
						// If the returned value is ERROR or something else, then act accordingly
						// TODO: Later
						RetryInNextCycle = TRUE;
					}
				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1722:	83 50       	subi	r24, 0x03	; 3
    1724:	82 30       	cpi	r24, 0x02	; 2
    1726:	08 f4       	brcc	.+2      	; 0x172a <SIMCOM_StateMachine+0x364>
    1728:	ce c0       	rjmp	.+412    	; 0x18c6 <SIMCOM_StateMachine+0x500>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	e1 c0       	rjmp	.+450    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
		break;

		case SIMCOM_SM_SelectNetwork:
		{
			// First Ensure the SIMCOM Module is Connected
			if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    172e:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <SIMCOM_Job_Result>
    1732:	81 11       	cpse	r24, r1
    1734:	11 c0       	rjmp	.+34     	; 0x1758 <SIMCOM_StateMachine+0x392>
			{

				// Send AT Command and wait for response
				if(SIMCOM_Schedule_Job(APN_name, SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
    1736:	2d e7       	ldi	r18, 0x7D	; 125
    1738:	39 e0       	ldi	r19, 0x09	; 9
    173a:	40 ed       	ldi	r20, 0xD0	; 208
    173c:	57 e0       	ldi	r21, 0x07	; 7
    173e:	60 e0       	ldi	r22, 0x00	; 0
    1740:	70 e0       	ldi	r23, 0x00	; 0
    1742:	8f ef       	ldi	r24, 0xFF	; 255
    1744:	95 e0       	ldi	r25, 0x05	; 5
    1746:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    174a:	81 30       	cpi	r24, 0x01	; 1
    174c:	09 f0       	breq	.+2      	; 0x1750 <SIMCOM_StateMachine+0x38a>
    174e:	bd c0       	rjmp	.+378    	; 0x18ca <SIMCOM_StateMachine+0x504>
				{
					//Display_String("AT");
					// Set it to Scheduled only when the SIMCOM Module Accepted it
					SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1750:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <SIMCOM_Job_Result>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	cc c0       	rjmp	.+408    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
				}
			}
			else
			{
				// Cyclic part for the response
				if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1758:	85 30       	cpi	r24, 0x05	; 5
    175a:	c9 f4       	brne	.+50     	; 0x178e <SIMCOM_StateMachine+0x3c8>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    175c:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_ResponseLength>
    1760:	82 30       	cpi	r24, 0x02	; 2
    1762:	51 f4       	brne	.+20     	; 0x1778 <SIMCOM_StateMachine+0x3b2>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    1764:	60 e4       	ldi	r22, 0x40	; 64
    1766:	71 e0       	ldi	r23, 0x01	; 1
    1768:	8e e2       	ldi	r24, 0x2E	; 46
    176a:	95 e0       	ldi	r25, 0x05	; 5
    176c:	0e 94 16 14 	call	0x282c	; 0x282c <strcmp>
    1770:	89 2b       	or	r24, r25
    1772:	21 f0       	breq	.+8      	; 0x177c <SIMCOM_StateMachine+0x3b6>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	03 c0       	rjmp	.+6      	; 0x177e <SIMCOM_StateMachine+0x3b8>
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	01 c0       	rjmp	.+2      	; 0x177e <SIMCOM_StateMachine+0x3b8>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    177c:	81 e0       	ldi	r24, 0x01	; 1
				{
					// Job has been completed

					// Check if the response is OK or not.
					if(SIMCOM_IsResponseOK())
    177e:	88 23       	and	r24, r24
    1780:	09 f4       	brne	.+2      	; 0x1784 <SIMCOM_StateMachine+0x3be>
    1782:	a5 c0       	rjmp	.+330    	; 0x18ce <SIMCOM_StateMachine+0x508>
					{
						SIMCOM_State = SIMCOM_SM_LTE_Check;
    1784:	88 e0       	ldi	r24, 0x08	; 8
    1786:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <SIMCOM_State>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	b1 c0       	rjmp	.+354    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
						// If the returned value is ERROR or something else, then act accordingly
						// TODO: Later
						RetryInNextCycle = TRUE;
					}
				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    178e:	83 50       	subi	r24, 0x03	; 3
    1790:	82 30       	cpi	r24, 0x02	; 2
    1792:	08 f4       	brcc	.+2      	; 0x1796 <SIMCOM_StateMachine+0x3d0>
    1794:	9e c0       	rjmp	.+316    	; 0x18d2 <SIMCOM_StateMachine+0x50c>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	ab c0       	rjmp	.+342    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
		}
		break;
		
		case SIMCOM_SM_LTE_Check:
		{
			if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    179a:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <SIMCOM_Job_Result>
    179e:	81 11       	cpse	r24, r1
    17a0:	11 c0       	rjmp	.+34     	; 0x17c4 <SIMCOM_StateMachine+0x3fe>
			{
				if(SIMCOM_Schedule_Job("AT+CPSI?", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
    17a2:	2d e7       	ldi	r18, 0x7D	; 125
    17a4:	39 e0       	ldi	r19, 0x09	; 9
    17a6:	40 ed       	ldi	r20, 0xD0	; 208
    17a8:	57 e0       	ldi	r21, 0x07	; 7
    17aa:	60 e0       	ldi	r22, 0x00	; 0
    17ac:	70 e0       	ldi	r23, 0x00	; 0
    17ae:	85 eb       	ldi	r24, 0xB5	; 181
    17b0:	91 e0       	ldi	r25, 0x01	; 1
    17b2:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    17b6:	81 30       	cpi	r24, 0x01	; 1
    17b8:	09 f0       	breq	.+2      	; 0x17bc <SIMCOM_StateMachine+0x3f6>
    17ba:	8d c0       	rjmp	.+282    	; 0x18d6 <SIMCOM_StateMachine+0x510>
				{
					// Set it to Scheduled only when the SIMCOM Module Accepted it
					SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    17bc:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <SIMCOM_Job_Result>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	96 c0       	rjmp	.+300    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
				}
			}
			else
			{
				// Cyclic part for the response
				if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    17c4:	85 30       	cpi	r24, 0x05	; 5
    17c6:	d1 f4       	brne	.+52     	; 0x17fc <SIMCOM_StateMachine+0x436>
				{
					// Job has been completed
					char * RxString = StringHelper_GetPointerAfter(SIMCOM_GetResponseBuffer(), "+CPIN: ");
    17c8:	6c e4       	ldi	r22, 0x4C	; 76
    17ca:	71 e0       	ldi	r23, 0x01	; 1
    17cc:	8e e2       	ldi	r24, 0x2E	; 46
    17ce:	95 e0       	ldi	r25, 0x05	; 5
    17d0:	0e 94 ef 04 	call	0x9de	; 0x9de <StringHelper_GetPointerAfter>
				
					if (*RxString)
    17d4:	fc 01       	movw	r30, r24
    17d6:	20 81       	ld	r18, Z
    17d8:	22 23       	and	r18, r18
    17da:	09 f4       	brne	.+2      	; 0x17de <SIMCOM_StateMachine+0x418>
    17dc:	7e c0       	rjmp	.+252    	; 0x18da <SIMCOM_StateMachine+0x514>
					{
						if (memcmp("LTE,Online",RxString,10))
    17de:	4a e0       	ldi	r20, 0x0A	; 10
    17e0:	50 e0       	ldi	r21, 0x00	; 0
    17e2:	bc 01       	movw	r22, r24
    17e4:	8e eb       	ldi	r24, 0xBE	; 190
    17e6:	91 e0       	ldi	r25, 0x01	; 1
    17e8:	0e 94 00 14 	call	0x2800	; 0x2800 <memcmp>
    17ec:	89 2b       	or	r24, r25
    17ee:	09 f4       	brne	.+2      	; 0x17f2 <SIMCOM_StateMachine+0x42c>
    17f0:	76 c0       	rjmp	.+236    	; 0x18de <SIMCOM_StateMachine+0x518>
						{
											
							//do next job
							RetryInNextCycle = FALSE;
							SIMCOM_State = SIMCOM_PDP_context;
    17f2:	84 e0       	ldi	r24, 0x04	; 4
    17f4:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <SIMCOM_State>
					{
						if (memcmp("LTE,Online",RxString,10))
						{
											
							//do next job
							RetryInNextCycle = FALSE;
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	7a c0       	rjmp	.+244    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
						//TODO: Later
						RetryInNextCycle = TRUE;
					}

				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    17fc:	83 50       	subi	r24, 0x03	; 3
    17fe:	82 30       	cpi	r24, 0x02	; 2
    1800:	08 f4       	brcc	.+2      	; 0x1804 <SIMCOM_StateMachine+0x43e>
    1802:	6f c0       	rjmp	.+222    	; 0x18e2 <SIMCOM_StateMachine+0x51c>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	74 c0       	rjmp	.+232    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
		break;
		
		case SIMCOM_PDP_context:
		{
			// First Ensure the SIMCOM Module is Connected
			if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1808:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <SIMCOM_Job_Result>
    180c:	81 11       	cpse	r24, r1
    180e:	11 c0       	rjmp	.+34     	; 0x1832 <SIMCOM_StateMachine+0x46c>
			{
				// Send AT Command and wait for response
				if(SIMCOM_Schedule_Job("AT+CGATT?", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
    1810:	2d e7       	ldi	r18, 0x7D	; 125
    1812:	39 e0       	ldi	r19, 0x09	; 9
    1814:	40 ed       	ldi	r20, 0xD0	; 208
    1816:	57 e0       	ldi	r21, 0x07	; 7
    1818:	60 e0       	ldi	r22, 0x00	; 0
    181a:	70 e0       	ldi	r23, 0x00	; 0
    181c:	89 ec       	ldi	r24, 0xC9	; 201
    181e:	91 e0       	ldi	r25, 0x01	; 1
    1820:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	09 f0       	breq	.+2      	; 0x182a <SIMCOM_StateMachine+0x464>
    1828:	5e c0       	rjmp	.+188    	; 0x18e6 <SIMCOM_StateMachine+0x520>
				{
					// Set it to Scheduled only when the SIMCOM Module Accepted it
					SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    182a:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <SIMCOM_Job_Result>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	5f c0       	rjmp	.+190    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
				}
			}
			else
			{
				// Cyclic part for the response
				if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1832:	85 30       	cpi	r24, 0x05	; 5
    1834:	81 f4       	brne	.+32     	; 0x1856 <SIMCOM_StateMachine+0x490>
					// Job has been completed

					// Positive Response would be -> +CLTS: <mode>
					// <mode> : 0 Disable   1 Enable

					ULONG PDP_Context = SIMCOM_GetCSV_Number_fromBuffer("+CGATT: ", 1);
    1836:	61 e0       	ldi	r22, 0x01	; 1
    1838:	83 ed       	ldi	r24, 0xD3	; 211
    183a:	91 e0       	ldi	r25, 0x01	; 1
    183c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <SIMCOM_GetCSV_Number_fromBuffer>

					/* Accept both Roaming and Local Registration */
					if(PDP_Context == 1)
    1840:	61 30       	cpi	r22, 0x01	; 1
    1842:	71 05       	cpc	r23, r1
    1844:	81 05       	cpc	r24, r1
    1846:	91 05       	cpc	r25, r1
    1848:	09 f0       	breq	.+2      	; 0x184c <SIMCOM_StateMachine+0x486>
    184a:	4f c0       	rjmp	.+158    	; 0x18ea <SIMCOM_StateMachine+0x524>
					{
						
						SIMCOM_State = SIMCOM_SM_Ready; // Move to next state		
    184c:	8c e0       	ldi	r24, 0x0C	; 12
    184e:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <SIMCOM_State>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	4d c0       	rjmp	.+154    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
						}

						RetryInNextCycle = TRUE;
					}
				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1856:	83 50       	subi	r24, 0x03	; 3
    1858:	82 30       	cpi	r24, 0x02	; 2
    185a:	08 f4       	brcc	.+2      	; 0x185e <SIMCOM_StateMachine+0x498>
    185c:	48 c0       	rjmp	.+144    	; 0x18ee <SIMCOM_StateMachine+0x528>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	47 c0       	rjmp	.+142    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	45 c0       	rjmp	.+138    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	43 c0       	rjmp	.+134    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
					}
					else
					{
						// If the returned value is ERROR or something else, then act accordingly
						// TODO: Later
						RetryInNextCycle = TRUE;
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	41 c0       	rjmp	.+130    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
					}
				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
				{
					// If there is a problem in reception, retry sending the command
					RetryInNextCycle = TRUE;
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	3f c0       	rjmp	.+126    	; 0x18f0 <SIMCOM_StateMachine+0x52a>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	3d c0       	rjmp	.+122    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	3b c0       	rjmp	.+118    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	39 c0       	rjmp	.+114    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
					}			
				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
				{
					// If there is a problem in reception, retry sending the command
					RetryInNextCycle = TRUE;
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	37 c0       	rjmp	.+110    	; 0x18f0 <SIMCOM_StateMachine+0x52a>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	35 c0       	rjmp	.+106    	; 0x18f0 <SIMCOM_StateMachine+0x52a>
						{
							// Network Not Registered.
							// TODO: Throw Error including the Status returned by the SIM800 module
						}

						RetryInNextCycle = TRUE;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	33 c0       	rjmp	.+102    	; 0x18f0 <SIMCOM_StateMachine+0x52a>

				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
				{
					// If there is a problem in reception, retry sending the command
					RetryInNextCycle = TRUE;
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	31 c0       	rjmp	.+98     	; 0x18f0 <SIMCOM_StateMachine+0x52a>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	2f c0       	rjmp	.+94     	; 0x18f0 <SIMCOM_StateMachine+0x52a>
						{
							// Network Not Registered.
							// TODO: Throw Error including the Status returned by the SIM800 module
						}

						RetryInNextCycle = TRUE;
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	2d c0       	rjmp	.+90     	; 0x18f0 <SIMCOM_StateMachine+0x52a>

				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
				{
					// If there is a problem in reception, retry sending the command
					RetryInNextCycle = TRUE;
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	2b c0       	rjmp	.+86     	; 0x18f0 <SIMCOM_StateMachine+0x52a>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	29 c0       	rjmp	.+82     	; 0x18f0 <SIMCOM_StateMachine+0x52a>
						{
							// Network Not Registered.
							// TODO: Throw Error including the Status returned by the SIM800 module
						}

						RetryInNextCycle = TRUE;
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	27 c0       	rjmp	.+78     	; 0x18f0 <SIMCOM_StateMachine+0x52a>

				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
				{
					// If there is a problem in reception, retry sending the command
					RetryInNextCycle = TRUE;
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	25 c0       	rjmp	.+74     	; 0x18f0 <SIMCOM_StateMachine+0x52a>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	23 c0       	rjmp	.+70     	; 0x18f0 <SIMCOM_StateMachine+0x52a>
							{
								// Network Not Registered.
								// TODO: Throw Error including the Status returned by the SIM800 module
							}

							RetryInNextCycle = TRUE;
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	21 c0       	rjmp	.+66     	; 0x18f0 <SIMCOM_StateMachine+0x52a>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	1f c0       	rjmp	.+62     	; 0x18f0 <SIMCOM_StateMachine+0x52a>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	1d c0       	rjmp	.+58     	; 0x18f0 <SIMCOM_StateMachine+0x52a>
						{
							// Network Not Registered.
							// TODO: Throw Error including the Status returned by the SIM800 module
						}

						RetryInNextCycle = TRUE;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	1b c0       	rjmp	.+54     	; 0x18f0 <SIMCOM_StateMachine+0x52a>

				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
				{
					// If there is a problem in reception, retry sending the command
					RetryInNextCycle = TRUE;
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	19 c0       	rjmp	.+50     	; 0x18f0 <SIMCOM_StateMachine+0x52a>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	17 c0       	rjmp	.+46     	; 0x18f0 <SIMCOM_StateMachine+0x52a>
					}
					else
					{
						// If the returned value is ERROR or something else, then act accordingly
						// TODO: Later
						RetryInNextCycle = TRUE;
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	15 c0       	rjmp	.+42     	; 0x18f0 <SIMCOM_StateMachine+0x52a>
					}
				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
				{
					// If there is a problem in reception, retry sending the command
					RetryInNextCycle = TRUE;
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	13 c0       	rjmp	.+38     	; 0x18f0 <SIMCOM_StateMachine+0x52a>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	11 c0       	rjmp	.+34     	; 0x18f0 <SIMCOM_StateMachine+0x52a>
					}
					else
					{
						// If the returned value is ERROR or something else, then act accordingly
						// TODO: Later
						RetryInNextCycle = TRUE;
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	0f c0       	rjmp	.+30     	; 0x18f0 <SIMCOM_StateMachine+0x52a>
					}
				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
				{
					// If there is a problem in reception, retry sending the command
					RetryInNextCycle = TRUE;
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	0d c0       	rjmp	.+26     	; 0x18f0 <SIMCOM_StateMachine+0x52a>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	0b c0       	rjmp	.+22     	; 0x18f0 <SIMCOM_StateMachine+0x52a>
					}
					else
					{
						// If the returned value is ERROR or something else, then act accordingly
						//TODO: Later
						RetryInNextCycle = TRUE;
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	09 c0       	rjmp	.+18     	; 0x18f0 <SIMCOM_StateMachine+0x52a>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							//TODO: Later
							RetryInNextCycle = TRUE;
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	07 c0       	rjmp	.+14     	; 0x18f0 <SIMCOM_StateMachine+0x52a>

				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
				{
					// If there is a problem in reception, retry sending the command
					RetryInNextCycle = TRUE;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	05 c0       	rjmp	.+10     	; 0x18f0 <SIMCOM_StateMachine+0x52a>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	03 c0       	rjmp	.+6      	; 0x18f0 <SIMCOM_StateMachine+0x52a>
						{
							// Network Not Registered.
							// TODO: Throw Error including the Status returned by the SIM800 module
						}

						RetryInNextCycle = TRUE;
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	01 c0       	rjmp	.+2      	; 0x18f0 <SIMCOM_StateMachine+0x52a>
					}
				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
				{
					// If there is a problem in reception, retry sending the command
					RetryInNextCycle = TRUE;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
			// Do Nothing, The state machine has been completed
		}
		break;
	}

	if(RetryInNextCycle == TRUE)
    18f0:	81 30       	cpi	r24, 0x01	; 1
    18f2:	69 f4       	brne	.+26     	; 0x190e <SIMCOM_StateMachine+0x548>
	{
		// If Retry is allowed
		if(SIMCOM_SM_Retry_Count != 0)
    18f4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <SIMCOM_SM_Retry_Count>
    18f8:	88 23       	and	r24, r24
    18fa:	31 f0       	breq	.+12     	; 0x1908 <SIMCOM_StateMachine+0x542>
		{
			SIMCOM_SM_Retry_Count--; // Decrement the Retry Count
    18fc:	81 50       	subi	r24, 0x01	; 1
    18fe:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <SIMCOM_SM_Retry_Count>

			SIMCOM_Job_Result = SIMCOM_Job_Idle; // Setting the Job to Idle will retry the Job again in next cycle.
    1902:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <SIMCOM_Job_Result>
    1906:	03 c0       	rjmp	.+6      	; 0x190e <SIMCOM_StateMachine+0x548>
		}
		else
		{
			// RETRY Mechanism expired, abort the Job and do not move the state
			SIMCOM_Job_Result = SIMCOM_Job_Aborted;
    1908:	86 e0       	ldi	r24, 0x06	; 6
    190a:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <SIMCOM_Job_Result>
		}
	}

	if(SIMCOM_Job_Result == SIMCOM_Job_Aborted)
    190e:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <SIMCOM_Job_Result>
    1912:	86 30       	cpi	r24, 0x06	; 6
    1914:	29 f4       	brne	.+10     	; 0x1920 <SIMCOM_StateMachine+0x55a>
	{
		// If in any of the state, the Job is aborted, then move to the Error State
		
		SIMCOM_State = SIMCOM_SM_Error;
    1916:	8d e0       	ldi	r24, 0x0D	; 13
    1918:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <SIMCOM_State>
				case SIMCOM_SM_NW_Registration_Check     : ErrorState = SIMCOM_Error_NetworkNotRegistered; break;
				default:
					// Do Nothing, SIMCOM Module will timeout and report error
					break;
			}
			SIMCOM_ERROR_CALLBACK();
    191c:	0e 94 c9 0c 	call	0x1992	; 0x1992 <COSMIC_SIMCOM_Error_Callback>
		}
	}

	/* Check if the state changed after execution */
	if(SIMCOM_State_Before_Execution != SIMCOM_State)
    1920:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <SIMCOM_State>
    1924:	c8 17       	cp	r28, r24
    1926:	29 f0       	breq	.+10     	; 0x1932 <SIMCOM_StateMachine+0x56c>
	{
		// If changed, the Set the New Job Result as Idle for the next state to proceed further
		SIMCOM_Job_Result = SIMCOM_Job_Idle; // Reset the Job state so that next command will be sent
    1928:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <SIMCOM_Job_Result>

		SIMCOM_SM_Retry_Count = P_SIMCOM_DEFAULT_FAILURE_RETRY_COUNT; // Reset the Retry Count
    192c:	8a e0       	ldi	r24, 0x0A	; 10
    192e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <SIMCOM_SM_Retry_Count>
	}
}
    1932:	cf 91       	pop	r28
    1934:	08 95       	ret

00001936 <PRC_SYS_INIT>:
    1936:	0e 94 cb 13 	call	0x2796	; 0x2796 <FUN_SYS_Internal_Init>
    193a:	08 95       	ret

0000193c <FUN_SYS_Evaluate_Tasks_x1>:
    193c:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <SysOS_Ctrl>
    1940:	80 fd       	sbrc	r24, 0
    1942:	07 c0       	rjmp	.+14     	; 0x1952 <FUN_SYS_Evaluate_Tasks_x1+0x16>
    1944:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <FUN_SYS_Internal_Evaluate_Tasks_x1>
    1948:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <SysOS_Ctrl>
    194c:	81 60       	ori	r24, 0x01	; 1
    194e:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <SysOS_Ctrl>
    1952:	08 95       	ret

00001954 <FUN_SYS_Execute_Tasks>:
    1954:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <SysOS_Ctrl>
    1958:	80 ff       	sbrs	r24, 0
    195a:	07 c0       	rjmp	.+14     	; 0x196a <FUN_SYS_Execute_Tasks+0x16>
    195c:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <FUN_SYS_Internal_Execute_Tasks>
    1960:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <SysOS_Ctrl>
    1964:	8e 7f       	andi	r24, 0xFE	; 254
    1966:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <SysOS_Ctrl>
    196a:	08 95       	ret

0000196c <FUN_SYS_Timer_x1>:
    196c:	0e 94 9e 0c 	call	0x193c	; 0x193c <FUN_SYS_Evaluate_Tasks_x1>
    1970:	08 95       	ret

00001972 <SysOs_Main>:
    1972:	0e 94 9b 0c 	call	0x1936	; 0x1936 <PRC_SYS_INIT>
    1976:	02 c0       	rjmp	.+4      	; 0x197c <SysOs_Main+0xa>
    1978:	0e 94 aa 0c 	call	0x1954	; 0x1954 <FUN_SYS_Execute_Tasks>
    197c:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <g_Fatal_Error_B>
    1980:	88 23       	and	r24, r24
    1982:	d1 f3       	breq	.-12     	; 0x1978 <SysOs_Main+0x6>
    1984:	08 95       	ret

00001986 <Avr_Init>:
#include <avr/io.h>
#include "stdio.h"

void Avr_Init()
{
	DDRA  = 0XFF;
    1986:	8f ef       	ldi	r24, 0xFF	; 255
    1988:	8a bb       	out	0x1a, r24	; 26
	DDRB  = 0xFF;
    198a:	87 bb       	out	0x17, r24	; 23
	PORTA = 0X00;
    198c:	1b ba       	out	0x1b, r1	; 27
	PORTB = 0xFF;
    198e:	88 bb       	out	0x18, r24	; 24
    1990:	08 95       	ret

00001992 <COSMIC_SIMCOM_Error_Callback>:
}
void COSMIC_SIMCOM_Error_Callback()
{
	SIMCOM_State = SIMCOM_SM_Init;
    1992:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <SIMCOM_State>
	C_MQTT_SSL_Config_State = C_MQTT_SSL_Init;
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <C_MQTT_SSL_Config_State>
	MQTT_State = MQTTSTART;
    199c:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <MQTT_State>
	Publish_State = MQTT_Publish_Idle;
    19a0:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <Publish_State>
    19a4:	08 95       	ret

000019a6 <MQTT_CALLBACK>:
static void MQTT_CALLBACK(SIMCOM_Job_Result_EN result)
{
	// This function will be called by the SIMCOM handler upon successful reception of the response

	// This will be read in the Main function, so simply set the value
	SIMCOM_Job_Result = result;
    19a6:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <SIMCOM_Job_Result>
    19aa:	08 95       	ret

000019ac <MQTT_StateMachine>:
/*****************************************/
/* Function Definitions                  */
/*****************************************/

void MQTT_StateMachine(void)
{
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;
    19b0:	c0 91 6d 00 	lds	r28, 0x006D	; 0x80006d <MQTT_State>

	if(MQTTRecoonectCount == 0)
    19b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    19b8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    19bc:	89 2b       	or	r24, r25
    19be:	49 f4       	brne	.+18     	; 0x19d2 <MQTT_StateMachine+0x26>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
    19c0:	86 e0       	ldi	r24, 0x06	; 6
    19c2:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <MQTT_State>
		MQTTRecoonectCount = 60;
    19c6:	8c e3       	ldi	r24, 0x3C	; 60
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    19ce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}

	BOOL RetryInNextCycle = FALSE;

	if(IsMQTT_SSL_Configuration_Completed())
    19d2:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <C_MQTT_SSL_Config_State>
    19d6:	86 30       	cpi	r24, 0x06	; 6
    19d8:	09 f0       	breq	.+2      	; 0x19dc <MQTT_StateMachine+0x30>
    19da:	b6 c2       	rjmp	.+1388   	; 0x1f48 <MQTT_StateMachine+0x59c>
	{
		switch(MQTT_State)
    19dc:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <MQTT_State>
    19e0:	8e 2f       	mov	r24, r30
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	fc 01       	movw	r30, r24
    19e6:	31 97       	sbiw	r30, 0x01	; 1
    19e8:	ec 30       	cpi	r30, 0x0C	; 12
    19ea:	f1 05       	cpc	r31, r1
    19ec:	08 f0       	brcs	.+2      	; 0x19f0 <MQTT_StateMachine+0x44>
    19ee:	53 c2       	rjmp	.+1190   	; 0x1e96 <MQTT_StateMachine+0x4ea>
    19f0:	ea 5c       	subi	r30, 0xCA	; 202
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	0c 94 dc 13 	jmp	0x27b8	; 0x27b8 <__tablejump2__>
		{
			case MQTTSTART:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    19f8:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <SIMCOM_Job_Result>
    19fc:	81 11       	cpse	r24, r1
    19fe:	11 c0       	rjmp	.+34     	; 0x1a22 <MQTT_StateMachine+0x76>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CMQTTSTART", SIMCOM_DEFAULT_TIMEOUT, MQTT_CALLBACK) == TRUE)
    1a00:	23 ed       	ldi	r18, 0xD3	; 211
    1a02:	3c e0       	ldi	r19, 0x0C	; 12
    1a04:	40 ed       	ldi	r20, 0xD0	; 208
    1a06:	57 e0       	ldi	r21, 0x07	; 7
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	70 e0       	ldi	r23, 0x00	; 0
    1a0c:	8c ed       	ldi	r24, 0xDC	; 220
    1a0e:	91 e0       	ldi	r25, 0x01	; 1
    1a10:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1a14:	81 30       	cpi	r24, 0x01	; 1
    1a16:	09 f0       	breq	.+2      	; 0x1a1a <MQTT_StateMachine+0x6e>
    1a18:	40 c2       	rjmp	.+1152   	; 0x1e9a <MQTT_StateMachine+0x4ee>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1a1a:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <SIMCOM_Job_Result>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	75 c2       	rjmp	.+1258   	; 0x1f0c <MQTT_StateMachine+0x560>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1a22:	85 30       	cpi	r24, 0x05	; 5
    1a24:	39 f5       	brne	.+78     	; 0x1a74 <MQTT_StateMachine+0xc8>
					{
						// Job has been completed
						// Positive Response would be -> +CLTS: <mode>
						// <mode> : 0 Disable   1 Enable
						
						ULONG MQTTStatus = SIMCOM_GetCSV_Number_fromBuffer("+CMQTTSTART: ", 1);
    1a26:	61 e0       	ldi	r22, 0x01	; 1
    1a28:	8a ee       	ldi	r24, 0xEA	; 234
    1a2a:	91 e0       	ldi	r25, 0x01	; 1
    1a2c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <SIMCOM_GetCSV_Number_fromBuffer>
						
						if(MQTTStatus == 0)
    1a30:	67 2b       	or	r22, r23
    1a32:	68 2b       	or	r22, r24
    1a34:	69 2b       	or	r22, r25
    1a36:	29 f4       	brne	.+10     	; 0x1a42 <MQTT_StateMachine+0x96>
						{
							MQTT_State = MQTT_Accquire;
    1a38:	82 e0       	ldi	r24, 0x02	; 2
    1a3a:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <MQTT_State>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	65 c2       	rjmp	.+1226   	; 0x1f0c <MQTT_StateMachine+0x560>

static inline BOOL SIMCOM_IsResponseError()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 5)
    1a42:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_ResponseLength>
    1a46:	85 30       	cpi	r24, 0x05	; 5
    1a48:	51 f4       	brne	.+20     	; 0x1a5e <MQTT_StateMachine+0xb2>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "ERROR") == 0)
    1a4a:	68 ef       	ldi	r22, 0xF8	; 248
    1a4c:	71 e0       	ldi	r23, 0x01	; 1
    1a4e:	8e e2       	ldi	r24, 0x2E	; 46
    1a50:	95 e0       	ldi	r25, 0x05	; 5
    1a52:	0e 94 16 14 	call	0x282c	; 0x282c <strcmp>
    1a56:	89 2b       	or	r24, r25
    1a58:	21 f0       	breq	.+8      	; 0x1a62 <MQTT_StateMachine+0xb6>
	return retval;
}

static inline BOOL SIMCOM_IsResponseError()
{
	BOOL retval = FALSE;
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	03 c0       	rjmp	.+6      	; 0x1a64 <MQTT_StateMachine+0xb8>
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	01 c0       	rjmp	.+2      	; 0x1a64 <MQTT_StateMachine+0xb8>

	if(SIMCOM_GetResponseLength() == 5)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "ERROR") == 0)
		{
			retval = TRUE;
    1a62:	81 e0       	ldi	r24, 0x01	; 1
						if(MQTTStatus == 0)
						{
							MQTT_State = MQTT_Accquire;
							
						}
						else if(SIMCOM_IsResponseError())
    1a64:	88 23       	and	r24, r24
    1a66:	09 f4       	brne	.+2      	; 0x1a6a <MQTT_StateMachine+0xbe>
    1a68:	1a c2       	rjmp	.+1076   	; 0x1e9e <MQTT_StateMachine+0x4f2>
						{
							MQTT_State = MQTT_Accquire;
    1a6a:	82 e0       	ldi	r24, 0x02	; 2
    1a6c:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <MQTT_State>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	4c c2       	rjmp	.+1176   	; 0x1f0c <MQTT_StateMachine+0x560>
						else if(SIMCOM_IsResponseError())
						{
							MQTT_State = MQTT_Accquire;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1a74:	83 50       	subi	r24, 0x03	; 3
    1a76:	82 30       	cpi	r24, 0x02	; 2
    1a78:	08 f4       	brcc	.+2      	; 0x1a7c <MQTT_StateMachine+0xd0>
    1a7a:	13 c2       	rjmp	.+1062   	; 0x1ea2 <MQTT_StateMachine+0x4f6>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	46 c2       	rjmp	.+1164   	; 0x1f0c <MQTT_StateMachine+0x560>


			case MQTT_Accquire:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1a80:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <SIMCOM_Job_Result>
    1a84:	81 11       	cpse	r24, r1
    1a86:	11 c0       	rjmp	.+34     	; 0x1aaa <MQTT_StateMachine+0xfe>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CMQTTACCQ=0,\"COSMIC_Device01\",1", SIMCOM_DEFAULT_TIMEOUT, MQTT_CALLBACK) == TRUE)
    1a88:	23 ed       	ldi	r18, 0xD3	; 211
    1a8a:	3c e0       	ldi	r19, 0x0C	; 12
    1a8c:	40 ed       	ldi	r20, 0xD0	; 208
    1a8e:	57 e0       	ldi	r21, 0x07	; 7
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	70 e0       	ldi	r23, 0x00	; 0
    1a94:	8e ef       	ldi	r24, 0xFE	; 254
    1a96:	91 e0       	ldi	r25, 0x01	; 1
    1a98:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1a9c:	81 30       	cpi	r24, 0x01	; 1
    1a9e:	09 f0       	breq	.+2      	; 0x1aa2 <MQTT_StateMachine+0xf6>
    1aa0:	02 c2       	rjmp	.+1028   	; 0x1ea6 <MQTT_StateMachine+0x4fa>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1aa2:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <SIMCOM_Job_Result>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	31 c2       	rjmp	.+1122   	; 0x1f0c <MQTT_StateMachine+0x560>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1aaa:	85 30       	cpi	r24, 0x05	; 5
    1aac:	79 f5       	brne	.+94     	; 0x1b0c <MQTT_StateMachine+0x160>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    1aae:	d0 91 0d 04 	lds	r29, 0x040D	; 0x80040d <SIMCOM_ResponseLength>
    1ab2:	d2 30       	cpi	r29, 0x02	; 2
    1ab4:	51 f4       	brne	.+20     	; 0x1aca <MQTT_StateMachine+0x11e>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    1ab6:	60 e4       	ldi	r22, 0x40	; 64
    1ab8:	71 e0       	ldi	r23, 0x01	; 1
    1aba:	8e e2       	ldi	r24, 0x2E	; 46
    1abc:	95 e0       	ldi	r25, 0x05	; 5
    1abe:	0e 94 16 14 	call	0x282c	; 0x282c <strcmp>
    1ac2:	89 2b       	or	r24, r25
    1ac4:	21 f0       	breq	.+8      	; 0x1ace <MQTT_StateMachine+0x122>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	03 c0       	rjmp	.+6      	; 0x1ad0 <MQTT_StateMachine+0x124>
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	01 c0       	rjmp	.+2      	; 0x1ad0 <MQTT_StateMachine+0x124>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    1ad0:	88 23       	and	r24, r24
    1ad2:	29 f0       	breq	.+10     	; 0x1ade <MQTT_StateMachine+0x132>
						{
							MQTT_State = MQTT_SSL_Configure;
    1ad4:	84 e0       	ldi	r24, 0x04	; 4
    1ad6:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <MQTT_State>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	17 c2       	rjmp	.+1070   	; 0x1f0c <MQTT_StateMachine+0x560>

static inline BOOL SIMCOM_IsResponseError()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 5)
    1ade:	d5 30       	cpi	r29, 0x05	; 5
    1ae0:	51 f4       	brne	.+20     	; 0x1af6 <MQTT_StateMachine+0x14a>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "ERROR") == 0)
    1ae2:	68 ef       	ldi	r22, 0xF8	; 248
    1ae4:	71 e0       	ldi	r23, 0x01	; 1
    1ae6:	8e e2       	ldi	r24, 0x2E	; 46
    1ae8:	95 e0       	ldi	r25, 0x05	; 5
    1aea:	0e 94 16 14 	call	0x282c	; 0x282c <strcmp>
    1aee:	89 2b       	or	r24, r25
    1af0:	21 f0       	breq	.+8      	; 0x1afa <MQTT_StateMachine+0x14e>
	return retval;
}

static inline BOOL SIMCOM_IsResponseError()
{
	BOOL retval = FALSE;
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	03 c0       	rjmp	.+6      	; 0x1afc <MQTT_StateMachine+0x150>
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	01 c0       	rjmp	.+2      	; 0x1afc <MQTT_StateMachine+0x150>

	if(SIMCOM_GetResponseLength() == 5)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "ERROR") == 0)
		{
			retval = TRUE;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
						{
							MQTT_State = MQTT_SSL_Configure;

							// Move to next state
						}
						else if(SIMCOM_IsResponseError())
    1afc:	88 23       	and	r24, r24
    1afe:	09 f4       	brne	.+2      	; 0x1b02 <MQTT_StateMachine+0x156>
    1b00:	d4 c1       	rjmp	.+936    	; 0x1eaa <MQTT_StateMachine+0x4fe>
						{
							MQTT_State = MQTT_ClientRelease;
    1b02:	83 e0       	ldi	r24, 0x03	; 3
    1b04:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <MQTT_State>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	00 c2       	rjmp	.+1024   	; 0x1f0c <MQTT_StateMachine+0x560>
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
						
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1b0c:	83 50       	subi	r24, 0x03	; 3
    1b0e:	82 30       	cpi	r24, 0x02	; 2
    1b10:	08 f4       	brcc	.+2      	; 0x1b14 <MQTT_StateMachine+0x168>
    1b12:	cd c1       	rjmp	.+922    	; 0x1eae <MQTT_StateMachine+0x502>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	fa c1       	rjmp	.+1012   	; 0x1f0c <MQTT_StateMachine+0x560>
			break;

			case MQTT_ClientRelease:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1b18:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <SIMCOM_Job_Result>
    1b1c:	81 11       	cpse	r24, r1
    1b1e:	11 c0       	rjmp	.+34     	; 0x1b42 <MQTT_StateMachine+0x196>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CMQTTREL=0", SIMCOM_DEFAULT_TIMEOUT, MQTT_CALLBACK) == TRUE)
    1b20:	23 ed       	ldi	r18, 0xD3	; 211
    1b22:	3c e0       	ldi	r19, 0x0C	; 12
    1b24:	40 ed       	ldi	r20, 0xD0	; 208
    1b26:	57 e0       	ldi	r21, 0x07	; 7
    1b28:	60 e0       	ldi	r22, 0x00	; 0
    1b2a:	70 e0       	ldi	r23, 0x00	; 0
    1b2c:	81 e2       	ldi	r24, 0x21	; 33
    1b2e:	92 e0       	ldi	r25, 0x02	; 2
    1b30:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1b34:	81 30       	cpi	r24, 0x01	; 1
    1b36:	09 f0       	breq	.+2      	; 0x1b3a <MQTT_StateMachine+0x18e>
    1b38:	bc c1       	rjmp	.+888    	; 0x1eb2 <MQTT_StateMachine+0x506>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1b3a:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <SIMCOM_Job_Result>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	e5 c1       	rjmp	.+970    	; 0x1f0c <MQTT_StateMachine+0x560>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1b42:	85 30       	cpi	r24, 0x05	; 5
    1b44:	79 f5       	brne	.+94     	; 0x1ba4 <MQTT_StateMachine+0x1f8>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    1b46:	d0 91 0d 04 	lds	r29, 0x040D	; 0x80040d <SIMCOM_ResponseLength>
    1b4a:	d2 30       	cpi	r29, 0x02	; 2
    1b4c:	51 f4       	brne	.+20     	; 0x1b62 <MQTT_StateMachine+0x1b6>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    1b4e:	60 e4       	ldi	r22, 0x40	; 64
    1b50:	71 e0       	ldi	r23, 0x01	; 1
    1b52:	8e e2       	ldi	r24, 0x2E	; 46
    1b54:	95 e0       	ldi	r25, 0x05	; 5
    1b56:	0e 94 16 14 	call	0x282c	; 0x282c <strcmp>
    1b5a:	89 2b       	or	r24, r25
    1b5c:	21 f0       	breq	.+8      	; 0x1b66 <MQTT_StateMachine+0x1ba>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	03 c0       	rjmp	.+6      	; 0x1b68 <MQTT_StateMachine+0x1bc>
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	01 c0       	rjmp	.+2      	; 0x1b68 <MQTT_StateMachine+0x1bc>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    1b66:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    1b68:	88 23       	and	r24, r24
    1b6a:	29 f0       	breq	.+10     	; 0x1b76 <MQTT_StateMachine+0x1ca>
						{
							MQTT_State = MQTT_Accquire;
    1b6c:	82 e0       	ldi	r24, 0x02	; 2
    1b6e:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <MQTT_State>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	cb c1       	rjmp	.+918    	; 0x1f0c <MQTT_StateMachine+0x560>

static inline BOOL SIMCOM_IsResponseError()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 5)
    1b76:	d5 30       	cpi	r29, 0x05	; 5
    1b78:	51 f4       	brne	.+20     	; 0x1b8e <MQTT_StateMachine+0x1e2>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "ERROR") == 0)
    1b7a:	68 ef       	ldi	r22, 0xF8	; 248
    1b7c:	71 e0       	ldi	r23, 0x01	; 1
    1b7e:	8e e2       	ldi	r24, 0x2E	; 46
    1b80:	95 e0       	ldi	r25, 0x05	; 5
    1b82:	0e 94 16 14 	call	0x282c	; 0x282c <strcmp>
    1b86:	89 2b       	or	r24, r25
    1b88:	21 f0       	breq	.+8      	; 0x1b92 <MQTT_StateMachine+0x1e6>
	return retval;
}

static inline BOOL SIMCOM_IsResponseError()
{
	BOOL retval = FALSE;
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	03 c0       	rjmp	.+6      	; 0x1b94 <MQTT_StateMachine+0x1e8>
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	01 c0       	rjmp	.+2      	; 0x1b94 <MQTT_StateMachine+0x1e8>

	if(SIMCOM_GetResponseLength() == 5)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "ERROR") == 0)
		{
			retval = TRUE;
    1b92:	81 e0       	ldi	r24, 0x01	; 1
						{
							MQTT_State = MQTT_Accquire;

							// Move to next state
						}
						else  if(SIMCOM_IsResponseError())
    1b94:	88 23       	and	r24, r24
    1b96:	09 f4       	brne	.+2      	; 0x1b9a <MQTT_StateMachine+0x1ee>
    1b98:	8e c1       	rjmp	.+796    	; 0x1eb6 <MQTT_StateMachine+0x50a>
						{
							MQTT_State = MQTTSTOP;
    1b9a:	8c e0       	ldi	r24, 0x0C	; 12
    1b9c:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <MQTT_State>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	b4 c1       	rjmp	.+872    	; 0x1f0c <MQTT_StateMachine+0x560>
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
						
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1ba4:	83 50       	subi	r24, 0x03	; 3
    1ba6:	82 30       	cpi	r24, 0x02	; 2
    1ba8:	08 f4       	brcc	.+2      	; 0x1bac <MQTT_StateMachine+0x200>
    1baa:	87 c1       	rjmp	.+782    	; 0x1eba <MQTT_StateMachine+0x50e>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	ae c1       	rjmp	.+860    	; 0x1f0c <MQTT_StateMachine+0x560>
			break;

			case MQTT_SSL_Configure:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1bb0:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <SIMCOM_Job_Result>
    1bb4:	81 11       	cpse	r24, r1
    1bb6:	11 c0       	rjmp	.+34     	; 0x1bda <MQTT_StateMachine+0x22e>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CMQTTSSLCFG=0,0", SIMCOM_DEFAULT_TIMEOUT, MQTT_CALLBACK) == TRUE)
    1bb8:	23 ed       	ldi	r18, 0xD3	; 211
    1bba:	3c e0       	ldi	r19, 0x0C	; 12
    1bbc:	40 ed       	ldi	r20, 0xD0	; 208
    1bbe:	57 e0       	ldi	r21, 0x07	; 7
    1bc0:	60 e0       	ldi	r22, 0x00	; 0
    1bc2:	70 e0       	ldi	r23, 0x00	; 0
    1bc4:	8f e2       	ldi	r24, 0x2F	; 47
    1bc6:	92 e0       	ldi	r25, 0x02	; 2
    1bc8:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1bcc:	81 30       	cpi	r24, 0x01	; 1
    1bce:	09 f0       	breq	.+2      	; 0x1bd2 <MQTT_StateMachine+0x226>
    1bd0:	76 c1       	rjmp	.+748    	; 0x1ebe <MQTT_StateMachine+0x512>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1bd2:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <SIMCOM_Job_Result>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	99 c1       	rjmp	.+818    	; 0x1f0c <MQTT_StateMachine+0x560>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1bda:	85 30       	cpi	r24, 0x05	; 5
    1bdc:	c9 f4       	brne	.+50     	; 0x1c10 <MQTT_StateMachine+0x264>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    1bde:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_ResponseLength>
    1be2:	82 30       	cpi	r24, 0x02	; 2
    1be4:	51 f4       	brne	.+20     	; 0x1bfa <MQTT_StateMachine+0x24e>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    1be6:	60 e4       	ldi	r22, 0x40	; 64
    1be8:	71 e0       	ldi	r23, 0x01	; 1
    1bea:	8e e2       	ldi	r24, 0x2E	; 46
    1bec:	95 e0       	ldi	r25, 0x05	; 5
    1bee:	0e 94 16 14 	call	0x282c	; 0x282c <strcmp>
    1bf2:	89 2b       	or	r24, r25
    1bf4:	21 f0       	breq	.+8      	; 0x1bfe <MQTT_StateMachine+0x252>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	03 c0       	rjmp	.+6      	; 0x1c00 <MQTT_StateMachine+0x254>
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	01 c0       	rjmp	.+2      	; 0x1c00 <MQTT_StateMachine+0x254>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    1c00:	88 23       	and	r24, r24
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <MQTT_StateMachine+0x25a>
    1c04:	5e c1       	rjmp	.+700    	; 0x1ec2 <MQTT_StateMachine+0x516>
						{
							MQTT_State = MQTT_Connect; // Move to next state
    1c06:	85 e0       	ldi	r24, 0x05	; 5
    1c08:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <MQTT_State>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	7e c1       	rjmp	.+764    	; 0x1f0c <MQTT_StateMachine+0x560>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1c10:	83 50       	subi	r24, 0x03	; 3
    1c12:	82 30       	cpi	r24, 0x02	; 2
    1c14:	08 f4       	brcc	.+2      	; 0x1c18 <MQTT_StateMachine+0x26c>
    1c16:	57 c1       	rjmp	.+686    	; 0x1ec6 <MQTT_StateMachine+0x51a>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	78 c1       	rjmp	.+752    	; 0x1f0c <MQTT_StateMachine+0x560>
			}
			break;
			case MQTT_Connect:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1c1c:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <SIMCOM_Job_Result>
    1c20:	81 11       	cpse	r24, r1
    1c22:	11 c0       	rjmp	.+34     	; 0x1c46 <MQTT_StateMachine+0x29a>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CMQTTCONNECT=0,\"tcp://a1nwcqrp1qjjtm-ats.iot.ap-south-1.amazonaws.com:8883\",3,1", SIMCOM_DEFAULT_TIMEOUT, MQTT_CALLBACK) == TRUE)
    1c24:	23 ed       	ldi	r18, 0xD3	; 211
    1c26:	3c e0       	ldi	r19, 0x0C	; 12
    1c28:	40 ed       	ldi	r20, 0xD0	; 208
    1c2a:	57 e0       	ldi	r21, 0x07	; 7
    1c2c:	60 e0       	ldi	r22, 0x00	; 0
    1c2e:	70 e0       	ldi	r23, 0x00	; 0
    1c30:	82 e4       	ldi	r24, 0x42	; 66
    1c32:	92 e0       	ldi	r25, 0x02	; 2
    1c34:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1c38:	81 30       	cpi	r24, 0x01	; 1
    1c3a:	09 f0       	breq	.+2      	; 0x1c3e <MQTT_StateMachine+0x292>
    1c3c:	46 c1       	rjmp	.+652    	; 0x1eca <MQTT_StateMachine+0x51e>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1c3e:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <SIMCOM_Job_Result>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	63 c1       	rjmp	.+710    	; 0x1f0c <MQTT_StateMachine+0x560>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1c46:	85 30       	cpi	r24, 0x05	; 5
    1c48:	c9 f4       	brne	.+50     	; 0x1c7c <MQTT_StateMachine+0x2d0>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    1c4a:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_ResponseLength>
    1c4e:	82 30       	cpi	r24, 0x02	; 2
    1c50:	51 f4       	brne	.+20     	; 0x1c66 <MQTT_StateMachine+0x2ba>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    1c52:	60 e4       	ldi	r22, 0x40	; 64
    1c54:	71 e0       	ldi	r23, 0x01	; 1
    1c56:	8e e2       	ldi	r24, 0x2E	; 46
    1c58:	95 e0       	ldi	r25, 0x05	; 5
    1c5a:	0e 94 16 14 	call	0x282c	; 0x282c <strcmp>
    1c5e:	89 2b       	or	r24, r25
    1c60:	21 f0       	breq	.+8      	; 0x1c6a <MQTT_StateMachine+0x2be>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	03 c0       	rjmp	.+6      	; 0x1c6c <MQTT_StateMachine+0x2c0>
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	01 c0       	rjmp	.+2      	; 0x1c6c <MQTT_StateMachine+0x2c0>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    1c6c:	88 23       	and	r24, r24
    1c6e:	09 f4       	brne	.+2      	; 0x1c72 <MQTT_StateMachine+0x2c6>
    1c70:	2e c1       	rjmp	.+604    	; 0x1ece <MQTT_StateMachine+0x522>
						{
							MQTT_State = MQTT_WaitForConnectResponce; // Move to next state
    1c72:	87 e0       	ldi	r24, 0x07	; 7
    1c74:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <MQTT_State>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	48 c1       	rjmp	.+656    	; 0x1f0c <MQTT_StateMachine+0x560>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1c7c:	83 50       	subi	r24, 0x03	; 3
    1c7e:	82 30       	cpi	r24, 0x02	; 2
    1c80:	08 f4       	brcc	.+2      	; 0x1c84 <MQTT_StateMachine+0x2d8>
    1c82:	27 c1       	rjmp	.+590    	; 0x1ed2 <MQTT_StateMachine+0x526>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	42 c1       	rjmp	.+644    	; 0x1f0c <MQTT_StateMachine+0x560>
			break;
			
			case MQTTCONNECTIONCHECK:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1c88:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <SIMCOM_Job_Result>
    1c8c:	81 11       	cpse	r24, r1
    1c8e:	11 c0       	rjmp	.+34     	; 0x1cb2 <MQTT_StateMachine+0x306>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CMQTTCONNECT?", SIMCOM_DEFAULT_TIMEOUT, MQTT_CALLBACK) == TRUE)
    1c90:	23 ed       	ldi	r18, 0xD3	; 211
    1c92:	3c e0       	ldi	r19, 0x0C	; 12
    1c94:	40 ed       	ldi	r20, 0xD0	; 208
    1c96:	57 e0       	ldi	r21, 0x07	; 7
    1c98:	60 e0       	ldi	r22, 0x00	; 0
    1c9a:	70 e0       	ldi	r23, 0x00	; 0
    1c9c:	85 e9       	ldi	r24, 0x95	; 149
    1c9e:	92 e0       	ldi	r25, 0x02	; 2
    1ca0:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1ca4:	81 30       	cpi	r24, 0x01	; 1
    1ca6:	09 f0       	breq	.+2      	; 0x1caa <MQTT_StateMachine+0x2fe>
    1ca8:	16 c1       	rjmp	.+556    	; 0x1ed6 <MQTT_StateMachine+0x52a>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1caa:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <SIMCOM_Job_Result>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	2d c1       	rjmp	.+602    	; 0x1f0c <MQTT_StateMachine+0x560>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1cb2:	85 30       	cpi	r24, 0x05	; 5
    1cb4:	b1 f4       	brne	.+44     	; 0x1ce2 <MQTT_StateMachine+0x336>
					{
						// Job has been completed
						// Positive Response would be -> +CLTS: <mode>
						// <mode> : 0 Disable   1 Enable
						if(IsSIMCOM_ResponseStartsWith("+CMQTTCONNECT: 0,\"tcp:"))
    1cb6:	6e e2       	ldi	r22, 0x2E	; 46
    1cb8:	75 e0       	ldi	r23, 0x05	; 5
    1cba:	86 ea       	ldi	r24, 0xA6	; 166
    1cbc:	92 e0       	ldi	r25, 0x02	; 2
    1cbe:	0e 94 74 05 	call	0xae8	; 0xae8 <StringHelper_startsWith>
    1cc2:	88 23       	and	r24, r24
    1cc4:	29 f0       	breq	.+10     	; 0x1cd0 <MQTT_StateMachine+0x324>
						{
							MQTT_State = MQTT_Ready;
    1cc6:	8d e0       	ldi	r24, 0x0D	; 13
    1cc8:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <MQTT_State>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	1e c1       	rjmp	.+572    	; 0x1f0c <MQTT_StateMachine+0x560>
						{
							MQTT_State = MQTT_Ready;
						}
						else
						{
							C_MQTT_SSL_Config_State = C_MQTT_SSL_Init;
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <C_MQTT_SSL_Config_State>
							MQTT_State = MQTTSTART;
    1cd6:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <MQTT_State>
							Publish_State = MQTT_Publish_Idle;
    1cda:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <Publish_State>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	15 c1       	rjmp	.+554    	; 0x1f0c <MQTT_StateMachine+0x560>
							MQTT_State = MQTTSTART;
							Publish_State = MQTT_Publish_Idle;
							
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1ce2:	83 50       	subi	r24, 0x03	; 3
    1ce4:	82 30       	cpi	r24, 0x02	; 2
    1ce6:	08 f4       	brcc	.+2      	; 0x1cea <MQTT_StateMachine+0x33e>
    1ce8:	f8 c0       	rjmp	.+496    	; 0x1eda <MQTT_StateMachine+0x52e>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	0f c1       	rjmp	.+542    	; 0x1f0c <MQTT_StateMachine+0x560>
			}
			break;
			
			case MQTT_WaitForConnectResponce:
			{
				MQTTConnectWaittime--;
    1cee:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <MQTTConnectWaittime>
    1cf2:	81 50       	subi	r24, 0x01	; 1
    1cf4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <MQTTConnectWaittime>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
				if(MQTTConnectWaittime <= 0)
				{
					
				}
			}
			break;
    1cfa:	08 c1       	rjmp	.+528    	; 0x1f0c <MQTT_StateMachine+0x560>
			
			
			case MQTT_SubscribeTopic_Config:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1cfc:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <SIMCOM_Job_Result>
    1d00:	81 11       	cpse	r24, r1
    1d02:	11 c0       	rjmp	.+34     	; 0x1d26 <MQTT_StateMachine+0x37a>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CMQTTSUBTOPIC=0,16,1", SIMCOM_DEFAULT_TIMEOUT, MQTT_CALLBACK) == TRUE)
    1d04:	23 ed       	ldi	r18, 0xD3	; 211
    1d06:	3c e0       	ldi	r19, 0x0C	; 12
    1d08:	40 ed       	ldi	r20, 0xD0	; 208
    1d0a:	57 e0       	ldi	r21, 0x07	; 7
    1d0c:	60 e0       	ldi	r22, 0x00	; 0
    1d0e:	70 e0       	ldi	r23, 0x00	; 0
    1d10:	8d eb       	ldi	r24, 0xBD	; 189
    1d12:	92 e0       	ldi	r25, 0x02	; 2
    1d14:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1d18:	81 30       	cpi	r24, 0x01	; 1
    1d1a:	09 f0       	breq	.+2      	; 0x1d1e <MQTT_StateMachine+0x372>
    1d1c:	e0 c0       	rjmp	.+448    	; 0x1ede <MQTT_StateMachine+0x532>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1d1e:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <SIMCOM_Job_Result>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	f3 c0       	rjmp	.+486    	; 0x1f0c <MQTT_StateMachine+0x560>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1d26:	85 30       	cpi	r24, 0x05	; 5
    1d28:	c9 f4       	brne	.+50     	; 0x1d5c <MQTT_StateMachine+0x3b0>

static inline BOOL SIMCOM_IsResponse_Entermessage()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 1)
    1d2a:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_ResponseLength>
    1d2e:	81 30       	cpi	r24, 0x01	; 1
    1d30:	51 f4       	brne	.+20     	; 0x1d46 <MQTT_StateMachine+0x39a>
	{
		if(strcmp(SIMCOM_ResponseBuffer,ENTER_MESSAGE) == 0)
    1d32:	65 ed       	ldi	r22, 0xD5	; 213
    1d34:	72 e0       	ldi	r23, 0x02	; 2
    1d36:	8e e2       	ldi	r24, 0x2E	; 46
    1d38:	95 e0       	ldi	r25, 0x05	; 5
    1d3a:	0e 94 16 14 	call	0x282c	; 0x282c <strcmp>
    1d3e:	89 2b       	or	r24, r25
    1d40:	21 f0       	breq	.+8      	; 0x1d4a <MQTT_StateMachine+0x39e>
}


static inline BOOL SIMCOM_IsResponse_Entermessage()
{
	BOOL retval = FALSE;
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	03 c0       	rjmp	.+6      	; 0x1d4c <MQTT_StateMachine+0x3a0>
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	01 c0       	rjmp	.+2      	; 0x1d4c <MQTT_StateMachine+0x3a0>

	if(SIMCOM_GetResponseLength() == 1)
	{
		if(strcmp(SIMCOM_ResponseBuffer,ENTER_MESSAGE) == 0)
		{
			retval = TRUE;
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponse_Entermessage())
    1d4c:	88 23       	and	r24, r24
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <MQTT_StateMachine+0x3a6>
    1d50:	c8 c0       	rjmp	.+400    	; 0x1ee2 <MQTT_StateMachine+0x536>
						{
							MQTT_State = MQTT_SubTopic_Name_Config; // Move to next state
    1d52:	89 e0       	ldi	r24, 0x09	; 9
    1d54:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <MQTT_State>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	d8 c0       	rjmp	.+432    	; 0x1f0c <MQTT_StateMachine+0x560>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1d5c:	83 50       	subi	r24, 0x03	; 3
    1d5e:	82 30       	cpi	r24, 0x02	; 2
    1d60:	08 f4       	brcc	.+2      	; 0x1d64 <MQTT_StateMachine+0x3b8>
    1d62:	c1 c0       	rjmp	.+386    	; 0x1ee6 <MQTT_StateMachine+0x53a>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	d2 c0       	rjmp	.+420    	; 0x1f0c <MQTT_StateMachine+0x560>
			break;
			
			case MQTT_SubTopic_Name_Config:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1d68:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <SIMCOM_Job_Result>
    1d6c:	81 11       	cpse	r24, r1
    1d6e:	11 c0       	rjmp	.+34     	; 0x1d92 <MQTT_StateMachine+0x3e6>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job(SUBTOPIC, SIMCOM_DEFAULT_TIMEOUT, MQTT_CALLBACK) == TRUE)
    1d70:	23 ed       	ldi	r18, 0xD3	; 211
    1d72:	3c e0       	ldi	r19, 0x0C	; 12
    1d74:	40 ed       	ldi	r20, 0xD0	; 208
    1d76:	57 e0       	ldi	r21, 0x07	; 7
    1d78:	60 e0       	ldi	r22, 0x00	; 0
    1d7a:	70 e0       	ldi	r23, 0x00	; 0
    1d7c:	87 ed       	ldi	r24, 0xD7	; 215
    1d7e:	92 e0       	ldi	r25, 0x02	; 2
    1d80:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1d84:	81 30       	cpi	r24, 0x01	; 1
    1d86:	09 f0       	breq	.+2      	; 0x1d8a <MQTT_StateMachine+0x3de>
    1d88:	b0 c0       	rjmp	.+352    	; 0x1eea <MQTT_StateMachine+0x53e>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1d8a:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <SIMCOM_Job_Result>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	bd c0       	rjmp	.+378    	; 0x1f0c <MQTT_StateMachine+0x560>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1d92:	85 30       	cpi	r24, 0x05	; 5
    1d94:	c9 f4       	brne	.+50     	; 0x1dc8 <MQTT_StateMachine+0x41c>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    1d96:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_ResponseLength>
    1d9a:	82 30       	cpi	r24, 0x02	; 2
    1d9c:	51 f4       	brne	.+20     	; 0x1db2 <MQTT_StateMachine+0x406>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    1d9e:	60 e4       	ldi	r22, 0x40	; 64
    1da0:	71 e0       	ldi	r23, 0x01	; 1
    1da2:	8e e2       	ldi	r24, 0x2E	; 46
    1da4:	95 e0       	ldi	r25, 0x05	; 5
    1da6:	0e 94 16 14 	call	0x282c	; 0x282c <strcmp>
    1daa:	89 2b       	or	r24, r25
    1dac:	21 f0       	breq	.+8      	; 0x1db6 <MQTT_StateMachine+0x40a>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	03 c0       	rjmp	.+6      	; 0x1db8 <MQTT_StateMachine+0x40c>
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	01 c0       	rjmp	.+2      	; 0x1db8 <MQTT_StateMachine+0x40c>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    1db6:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    1db8:	88 23       	and	r24, r24
    1dba:	09 f4       	brne	.+2      	; 0x1dbe <MQTT_StateMachine+0x412>
    1dbc:	98 c0       	rjmp	.+304    	; 0x1eee <MQTT_StateMachine+0x542>
						{
							MQTT_State = MQTT_SubTopicNameUpdate; // Move to next state
    1dbe:	8a e0       	ldi	r24, 0x0A	; 10
    1dc0:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <MQTT_State>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	a2 c0       	rjmp	.+324    	; 0x1f0c <MQTT_StateMachine+0x560>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1dc8:	83 50       	subi	r24, 0x03	; 3
    1dca:	82 30       	cpi	r24, 0x02	; 2
    1dcc:	08 f4       	brcc	.+2      	; 0x1dd0 <MQTT_StateMachine+0x424>
    1dce:	91 c0       	rjmp	.+290    	; 0x1ef2 <MQTT_StateMachine+0x546>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	9c c0       	rjmp	.+312    	; 0x1f0c <MQTT_StateMachine+0x560>
			}
			break;
			case MQTT_SubTopicNameUpdate:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1dd4:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <SIMCOM_Job_Result>
    1dd8:	81 11       	cpse	r24, r1
    1dda:	11 c0       	rjmp	.+34     	; 0x1dfe <MQTT_StateMachine+0x452>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CMQTTSUB=0", SIMCOM_DEFAULT_TIMEOUT, MQTT_CALLBACK) == TRUE)
    1ddc:	23 ed       	ldi	r18, 0xD3	; 211
    1dde:	3c e0       	ldi	r19, 0x0C	; 12
    1de0:	40 ed       	ldi	r20, 0xD0	; 208
    1de2:	57 e0       	ldi	r21, 0x07	; 7
    1de4:	60 e0       	ldi	r22, 0x00	; 0
    1de6:	70 e0       	ldi	r23, 0x00	; 0
    1de8:	88 ee       	ldi	r24, 0xE8	; 232
    1dea:	92 e0       	ldi	r25, 0x02	; 2
    1dec:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1df0:	81 30       	cpi	r24, 0x01	; 1
    1df2:	09 f0       	breq	.+2      	; 0x1df6 <MQTT_StateMachine+0x44a>
    1df4:	80 c0       	rjmp	.+256    	; 0x1ef6 <MQTT_StateMachine+0x54a>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1df6:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <SIMCOM_Job_Result>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	87 c0       	rjmp	.+270    	; 0x1f0c <MQTT_StateMachine+0x560>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1dfe:	85 30       	cpi	r24, 0x05	; 5
    1e00:	29 f4       	brne	.+10     	; 0x1e0c <MQTT_StateMachine+0x460>
					{
						MQTT_State = MQTT_WaitForSubResponce;
    1e02:	8b e0       	ldi	r24, 0x0B	; 11
    1e04:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <MQTT_State>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	80 c0       	rjmp	.+256    	; 0x1f0c <MQTT_StateMachine+0x560>
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
					{
						MQTT_State = MQTT_WaitForSubResponce;
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1e0c:	83 50       	subi	r24, 0x03	; 3
    1e0e:	82 30       	cpi	r24, 0x02	; 2
    1e10:	08 f4       	brcc	.+2      	; 0x1e14 <MQTT_StateMachine+0x468>
    1e12:	73 c0       	rjmp	.+230    	; 0x1efa <MQTT_StateMachine+0x54e>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	7a c0       	rjmp	.+244    	; 0x1f0c <MQTT_StateMachine+0x560>
			break;
			
			case MQTT_WaitForSubResponce:
			{
				RetryInNextCycle = TRUE;
				if(MQTT_Retry_Count == 10)
    1e18:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <MQTT_Retry_Count>
    1e1c:	8a 30       	cpi	r24, 0x0A	; 10
    1e1e:	09 f0       	breq	.+2      	; 0x1e22 <MQTT_StateMachine+0x476>
    1e20:	6e c0       	rjmp	.+220    	; 0x1efe <MQTT_StateMachine+0x552>
				{
					MQTT_Retry_Count = 50;
    1e22:	82 e3       	ldi	r24, 0x32	; 50
    1e24:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <MQTT_Retry_Count>
			}
			break;
			
			case MQTT_WaitForSubResponce:
			{
				RetryInNextCycle = TRUE;
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	70 c0       	rjmp	.+224    	; 0x1f0c <MQTT_StateMachine+0x560>
			break;
			
			case MQTTSTOP:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1e2c:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <SIMCOM_Job_Result>
    1e30:	81 11       	cpse	r24, r1
    1e32:	11 c0       	rjmp	.+34     	; 0x1e56 <MQTT_StateMachine+0x4aa>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CMQTTSTOP", SIMCOM_DEFAULT_TIMEOUT, MQTT_CALLBACK) == TRUE)
    1e34:	23 ed       	ldi	r18, 0xD3	; 211
    1e36:	3c e0       	ldi	r19, 0x0C	; 12
    1e38:	40 ed       	ldi	r20, 0xD0	; 208
    1e3a:	57 e0       	ldi	r21, 0x07	; 7
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	70 e0       	ldi	r23, 0x00	; 0
    1e40:	86 ef       	ldi	r24, 0xF6	; 246
    1e42:	92 e0       	ldi	r25, 0x02	; 2
    1e44:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1e48:	81 30       	cpi	r24, 0x01	; 1
    1e4a:	09 f0       	breq	.+2      	; 0x1e4e <MQTT_StateMachine+0x4a2>
    1e4c:	5a c0       	rjmp	.+180    	; 0x1f02 <MQTT_StateMachine+0x556>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1e4e:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <SIMCOM_Job_Result>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	5b c0       	rjmp	.+182    	; 0x1f0c <MQTT_StateMachine+0x560>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1e56:	85 30       	cpi	r24, 0x05	; 5
    1e58:	c9 f4       	brne	.+50     	; 0x1e8c <MQTT_StateMachine+0x4e0>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    1e5a:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_ResponseLength>
    1e5e:	82 30       	cpi	r24, 0x02	; 2
    1e60:	51 f4       	brne	.+20     	; 0x1e76 <MQTT_StateMachine+0x4ca>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    1e62:	60 e4       	ldi	r22, 0x40	; 64
    1e64:	71 e0       	ldi	r23, 0x01	; 1
    1e66:	8e e2       	ldi	r24, 0x2E	; 46
    1e68:	95 e0       	ldi	r25, 0x05	; 5
    1e6a:	0e 94 16 14 	call	0x282c	; 0x282c <strcmp>
    1e6e:	89 2b       	or	r24, r25
    1e70:	21 f0       	breq	.+8      	; 0x1e7a <MQTT_StateMachine+0x4ce>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	03 c0       	rjmp	.+6      	; 0x1e7c <MQTT_StateMachine+0x4d0>
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	01 c0       	rjmp	.+2      	; 0x1e7c <MQTT_StateMachine+0x4d0>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    1e7c:	88 23       	and	r24, r24
    1e7e:	09 f4       	brne	.+2      	; 0x1e82 <MQTT_StateMachine+0x4d6>
    1e80:	42 c0       	rjmp	.+132    	; 0x1f06 <MQTT_StateMachine+0x55a>
						{
							MQTT_State = MQTTSTART;
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <MQTT_State>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	40 c0       	rjmp	.+128    	; 0x1f0c <MQTT_StateMachine+0x560>
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
						
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1e8c:	83 50       	subi	r24, 0x03	; 3
    1e8e:	82 30       	cpi	r24, 0x02	; 2
    1e90:	e0 f1       	brcs	.+120    	; 0x1f0a <MQTT_StateMachine+0x55e>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	3b c0       	rjmp	.+118    	; 0x1f0c <MQTT_StateMachine+0x560>
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	39 c0       	rjmp	.+114    	; 0x1f0c <MQTT_StateMachine+0x560>
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	37 c0       	rjmp	.+110    	; 0x1f0c <MQTT_StateMachine+0x560>
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	35 c0       	rjmp	.+106    	; 0x1f0c <MQTT_StateMachine+0x560>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	33 c0       	rjmp	.+102    	; 0x1f0c <MQTT_StateMachine+0x560>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	31 c0       	rjmp	.+98     	; 0x1f0c <MQTT_StateMachine+0x560>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	2f c0       	rjmp	.+94     	; 0x1f0c <MQTT_StateMachine+0x560>
						
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	2d c0       	rjmp	.+90     	; 0x1f0c <MQTT_StateMachine+0x560>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	2b c0       	rjmp	.+86     	; 0x1f0c <MQTT_StateMachine+0x560>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	29 c0       	rjmp	.+82     	; 0x1f0c <MQTT_StateMachine+0x560>
						
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	27 c0       	rjmp	.+78     	; 0x1f0c <MQTT_StateMachine+0x560>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	25 c0       	rjmp	.+74     	; 0x1f0c <MQTT_StateMachine+0x560>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	23 c0       	rjmp	.+70     	; 0x1f0c <MQTT_StateMachine+0x560>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	21 c0       	rjmp	.+66     	; 0x1f0c <MQTT_StateMachine+0x560>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	1f c0       	rjmp	.+62     	; 0x1f0c <MQTT_StateMachine+0x560>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	1d c0       	rjmp	.+58     	; 0x1f0c <MQTT_StateMachine+0x560>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	1b c0       	rjmp	.+54     	; 0x1f0c <MQTT_StateMachine+0x560>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	19 c0       	rjmp	.+50     	; 0x1f0c <MQTT_StateMachine+0x560>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	17 c0       	rjmp	.+46     	; 0x1f0c <MQTT_StateMachine+0x560>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	15 c0       	rjmp	.+42     	; 0x1f0c <MQTT_StateMachine+0x560>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	13 c0       	rjmp	.+38     	; 0x1f0c <MQTT_StateMachine+0x560>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	11 c0       	rjmp	.+34     	; 0x1f0c <MQTT_StateMachine+0x560>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	0f c0       	rjmp	.+30     	; 0x1f0c <MQTT_StateMachine+0x560>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	0d c0       	rjmp	.+26     	; 0x1f0c <MQTT_StateMachine+0x560>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	0b c0       	rjmp	.+22     	; 0x1f0c <MQTT_StateMachine+0x560>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	09 c0       	rjmp	.+18     	; 0x1f0c <MQTT_StateMachine+0x560>
						MQTT_State = MQTT_WaitForSubResponce;
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	07 c0       	rjmp	.+14     	; 0x1f0c <MQTT_StateMachine+0x560>
			}
			break;
			
			case MQTT_WaitForSubResponce:
			{
				RetryInNextCycle = TRUE;
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	05 c0       	rjmp	.+10     	; 0x1f0c <MQTT_StateMachine+0x560>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
		MQTTRecoonectCount = 60;
	}

	BOOL RetryInNextCycle = FALSE;
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	03 c0       	rjmp	.+6      	; 0x1f0c <MQTT_StateMachine+0x560>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	01 c0       	rjmp	.+2      	; 0x1f0c <MQTT_StateMachine+0x560>
						
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
				// Do Nothing, The state machine has been completed
			}
			break;
		}

		if(RetryInNextCycle == TRUE)
    1f0c:	81 30       	cpi	r24, 0x01	; 1
    1f0e:	69 f4       	brne	.+26     	; 0x1f2a <MQTT_StateMachine+0x57e>
		{
			// If Retry is allowed
			if(MQTT_Retry_Count != 0)
    1f10:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <MQTT_Retry_Count>
    1f14:	88 23       	and	r24, r24
    1f16:	31 f0       	breq	.+12     	; 0x1f24 <MQTT_StateMachine+0x578>
			{
				MQTT_Retry_Count--; // Decrement the Retry Count
    1f18:	81 50       	subi	r24, 0x01	; 1
    1f1a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <MQTT_Retry_Count>

				SIMCOM_Job_Result = SIMCOM_Job_Idle; // Setting the Job to Idle will retry the Job again in next cycle.
    1f1e:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <SIMCOM_Job_Result>
    1f22:	03 c0       	rjmp	.+6      	; 0x1f2a <MQTT_StateMachine+0x57e>
			}
			else
			{
				// RETRY Mechanism expired, abort the Job and do not move the state
				SIMCOM_Job_Result = SIMCOM_Job_Aborted;
    1f24:	86 e0       	ldi	r24, 0x06	; 6
    1f26:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <SIMCOM_Job_Result>
			}
		}
		if(SIMCOM_Job_Result == SIMCOM_Job_Aborted)
    1f2a:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <SIMCOM_Job_Result>
    1f2e:	86 30       	cpi	r24, 0x06	; 6
    1f30:	11 f4       	brne	.+4      	; 0x1f36 <MQTT_StateMachine+0x58a>
		{
			// If in any of the state, the Job is aborted, then move to the error state	
			  SIMCOM_ERROR_CALLBACK();
    1f32:	0e 94 c9 0c 	call	0x1992	; 0x1992 <COSMIC_SIMCOM_Error_Callback>
		}

		/* Check if the state changed after execution */
		if(MQTT_State_Before_Execution != MQTT_State)
    1f36:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <MQTT_State>
    1f3a:	c8 17       	cp	r28, r24
    1f3c:	29 f0       	breq	.+10     	; 0x1f48 <MQTT_StateMachine+0x59c>
		{
			// If changed, the Set the New Job Result as Idle for the next state to proceed further
			SIMCOM_Job_Result = SIMCOM_Job_Idle; // Reset the Job state so that next command will be sent
    1f3e:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <SIMCOM_Job_Result>

			MQTT_Retry_Count = P_SIMCOM_DEFAULT_FAILURE_RETRY_COUNT; // Reset the Retry Count
    1f42:	8a e0       	ldi	r24, 0x0A	; 10
    1f44:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <MQTT_Retry_Count>
		}
	}
}
    1f48:	df 91       	pop	r29
    1f4a:	cf 91       	pop	r28
    1f4c:	08 95       	ret

00001f4e <MQTT_Publish_CallBack>:
static void MQTT_Publish_CallBack(SIMCOM_Job_Result_EN result)
{
	// This function will be called by the SIMCOM handler upon successful reception of the response

	// This will be read in the Main function, so simply set the value
	SIMCOM_Job_Result = result;
    1f4e:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <SIMCOM_Job_Result>
    1f52:	08 95       	ret

00001f54 <MQTT_Publish_StateMachine>:
/* Function Definitions                  */
/*****************************************/


void MQTT_Publish_StateMachine(void)
{
    1f54:	ef 92       	push	r14
    1f56:	ff 92       	push	r15
    1f58:	1f 93       	push	r17
    1f5a:	cf 93       	push	r28
    1f5c:	df 93       	push	r29
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	64 97       	sbiw	r28, 0x14	; 20
    1f64:	0f b6       	in	r0, 0x3f	; 63
    1f66:	f8 94       	cli
    1f68:	de bf       	out	0x3e, r29	; 62
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	cd bf       	out	0x3d, r28	; 61
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;
    1f6e:	10 91 14 04 	lds	r17, 0x0414	; 0x800414 <Publish_State>

	BOOL RetryInNextCycle = FALSE;

	if(IsMQTT_Ready())
    1f72:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <MQTT_State>
    1f76:	8d 30       	cpi	r24, 0x0D	; 13
    1f78:	09 f0       	breq	.+2      	; 0x1f7c <MQTT_Publish_StateMachine+0x28>
    1f7a:	6e c1       	rjmp	.+732    	; 0x2258 <MQTT_Publish_StateMachine+0x304>
	{
		switch(Publish_State)
    1f7c:	13 30       	cpi	r17, 0x03	; 3
    1f7e:	09 f4       	brne	.+2      	; 0x1f82 <MQTT_Publish_StateMachine+0x2e>
    1f80:	8e c0       	rjmp	.+284    	; 0x209e <MQTT_Publish_StateMachine+0x14a>
    1f82:	30 f4       	brcc	.+12     	; 0x1f90 <MQTT_Publish_StateMachine+0x3c>
    1f84:	11 30       	cpi	r17, 0x01	; 1
    1f86:	69 f0       	breq	.+26     	; 0x1fa2 <MQTT_Publish_StateMachine+0x4e>
    1f88:	12 30       	cpi	r17, 0x02	; 2
    1f8a:	09 f4       	brne	.+2      	; 0x1f8e <MQTT_Publish_StateMachine+0x3a>
    1f8c:	52 c0       	rjmp	.+164    	; 0x2032 <MQTT_Publish_StateMachine+0xde>
    1f8e:	2b c1       	rjmp	.+598    	; 0x21e6 <MQTT_Publish_StateMachine+0x292>
    1f90:	15 30       	cpi	r17, 0x05	; 5
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <MQTT_Publish_StateMachine+0x42>
    1f94:	ff c0       	rjmp	.+510    	; 0x2194 <MQTT_Publish_StateMachine+0x240>
    1f96:	08 f4       	brcc	.+2      	; 0x1f9a <MQTT_Publish_StateMachine+0x46>
    1f98:	cc c0       	rjmp	.+408    	; 0x2132 <MQTT_Publish_StateMachine+0x1de>
    1f9a:	16 30       	cpi	r17, 0x06	; 6
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <MQTT_Publish_StateMachine+0x4c>
    1f9e:	1a c1       	rjmp	.+564    	; 0x21d4 <MQTT_Publish_StateMachine+0x280>
    1fa0:	22 c1       	rjmp	.+580    	; 0x21e6 <MQTT_Publish_StateMachine+0x292>
			}
			break;
			case MQTT_PublishTopic_Config:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1fa2:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <SIMCOM_Job_Result>
    1fa6:	81 11       	cpse	r24, r1
    1fa8:	23 c0       	rjmp	.+70     	; 0x1ff0 <MQTT_Publish_StateMachine+0x9c>
				{
					//Set topic Length by using Macro The size of the Topic is Configured in PUBTOPICLength Macro
					char SetTopicLength[20];
					
					sprintf(SetTopicLength,"AT+CMQTTTOPIC=0,%d",PUBTOPICLength);
    1faa:	1f 92       	push	r1
    1fac:	80 e1       	ldi	r24, 0x10	; 16
    1fae:	8f 93       	push	r24
    1fb0:	83 e0       	ldi	r24, 0x03	; 3
    1fb2:	93 e0       	ldi	r25, 0x03	; 3
    1fb4:	9f 93       	push	r25
    1fb6:	8f 93       	push	r24
    1fb8:	ce 01       	movw	r24, r28
    1fba:	01 96       	adiw	r24, 0x01	; 1
    1fbc:	7c 01       	movw	r14, r24
    1fbe:	9f 93       	push	r25
    1fc0:	8f 93       	push	r24
    1fc2:	0e 94 48 14 	call	0x2890	; 0x2890 <sprintf>
					
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job(SetTopicLength, SIMCOM_DEFAULT_TIMEOUT, MQTT_Publish_CallBack) == TRUE)
    1fc6:	27 ea       	ldi	r18, 0xA7	; 167
    1fc8:	3f e0       	ldi	r19, 0x0F	; 15
    1fca:	40 ed       	ldi	r20, 0xD0	; 208
    1fcc:	57 e0       	ldi	r21, 0x07	; 7
    1fce:	60 e0       	ldi	r22, 0x00	; 0
    1fd0:	70 e0       	ldi	r23, 0x00	; 0
    1fd2:	c7 01       	movw	r24, r14
    1fd4:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	81 30       	cpi	r24, 0x01	; 1
    1fe6:	11 f4       	brne	.+4      	; 0x1fec <MQTT_Publish_StateMachine+0x98>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1fe8:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <SIMCOM_Job_Result>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	16 c1       	rjmp	.+556    	; 0x221c <MQTT_Publish_StateMachine+0x2c8>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1ff0:	85 30       	cpi	r24, 0x05	; 5
    1ff2:	c9 f4       	brne	.+50     	; 0x2026 <MQTT_Publish_StateMachine+0xd2>

static inline BOOL SIMCOM_IsResponse_Entermessage()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 1)
    1ff4:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_ResponseLength>
    1ff8:	81 30       	cpi	r24, 0x01	; 1
    1ffa:	51 f4       	brne	.+20     	; 0x2010 <MQTT_Publish_StateMachine+0xbc>
	{
		if(strcmp(SIMCOM_ResponseBuffer,ENTER_MESSAGE) == 0)
    1ffc:	65 ed       	ldi	r22, 0xD5	; 213
    1ffe:	72 e0       	ldi	r23, 0x02	; 2
    2000:	8e e2       	ldi	r24, 0x2E	; 46
    2002:	95 e0       	ldi	r25, 0x05	; 5
    2004:	0e 94 16 14 	call	0x282c	; 0x282c <strcmp>
    2008:	89 2b       	or	r24, r25
    200a:	21 f0       	breq	.+8      	; 0x2014 <MQTT_Publish_StateMachine+0xc0>
}


static inline BOOL SIMCOM_IsResponse_Entermessage()
{
	BOOL retval = FALSE;
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	03 c0       	rjmp	.+6      	; 0x2016 <MQTT_Publish_StateMachine+0xc2>
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	01 c0       	rjmp	.+2      	; 0x2016 <MQTT_Publish_StateMachine+0xc2>

	if(SIMCOM_GetResponseLength() == 1)
	{
		if(strcmp(SIMCOM_ResponseBuffer,ENTER_MESSAGE) == 0)
		{
			retval = TRUE;
    2014:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponse_Entermessage())
    2016:	88 23       	and	r24, r24
    2018:	09 f4       	brne	.+2      	; 0x201c <MQTT_Publish_StateMachine+0xc8>
    201a:	e7 c0       	rjmp	.+462    	; 0x21ea <MQTT_Publish_StateMachine+0x296>
						{
							Publish_State = MQTT_PubTopic_Name_Config; // Move to next state
    201c:	82 e0       	ldi	r24, 0x02	; 2
    201e:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <Publish_State>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	fb c0       	rjmp	.+502    	; 0x221c <MQTT_Publish_StateMachine+0x2c8>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    2026:	83 50       	subi	r24, 0x03	; 3
    2028:	82 30       	cpi	r24, 0x02	; 2
    202a:	08 f4       	brcc	.+2      	; 0x202e <MQTT_Publish_StateMachine+0xda>
    202c:	e0 c0       	rjmp	.+448    	; 0x21ee <MQTT_Publish_StateMachine+0x29a>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	f5 c0       	rjmp	.+490    	; 0x221c <MQTT_Publish_StateMachine+0x2c8>
			break;

			case MQTT_PubTopic_Name_Config:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    2032:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <SIMCOM_Job_Result>
    2036:	81 11       	cpse	r24, r1
    2038:	11 c0       	rjmp	.+34     	; 0x205c <MQTT_Publish_StateMachine+0x108>
				{
					// Send AT Command and wait for response
						
					if(SIMCOM_Schedule_Job(PUBTOPIC, SIMCOM_DEFAULT_TIMEOUT, MQTT_Publish_CallBack) == TRUE)
    203a:	27 ea       	ldi	r18, 0xA7	; 167
    203c:	3f e0       	ldi	r19, 0x0F	; 15
    203e:	40 ed       	ldi	r20, 0xD0	; 208
    2040:	57 e0       	ldi	r21, 0x07	; 7
    2042:	60 e0       	ldi	r22, 0x00	; 0
    2044:	70 e0       	ldi	r23, 0x00	; 0
    2046:	86 e1       	ldi	r24, 0x16	; 22
    2048:	93 e0       	ldi	r25, 0x03	; 3
    204a:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    204e:	81 30       	cpi	r24, 0x01	; 1
    2050:	09 f0       	breq	.+2      	; 0x2054 <MQTT_Publish_StateMachine+0x100>
    2052:	cf c0       	rjmp	.+414    	; 0x21f2 <MQTT_Publish_StateMachine+0x29e>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    2054:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <SIMCOM_Job_Result>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	e0 c0       	rjmp	.+448    	; 0x221c <MQTT_Publish_StateMachine+0x2c8>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    205c:	85 30       	cpi	r24, 0x05	; 5
    205e:	c9 f4       	brne	.+50     	; 0x2092 <MQTT_Publish_StateMachine+0x13e>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    2060:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_ResponseLength>
    2064:	82 30       	cpi	r24, 0x02	; 2
    2066:	51 f4       	brne	.+20     	; 0x207c <MQTT_Publish_StateMachine+0x128>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    2068:	60 e4       	ldi	r22, 0x40	; 64
    206a:	71 e0       	ldi	r23, 0x01	; 1
    206c:	8e e2       	ldi	r24, 0x2E	; 46
    206e:	95 e0       	ldi	r25, 0x05	; 5
    2070:	0e 94 16 14 	call	0x282c	; 0x282c <strcmp>
    2074:	89 2b       	or	r24, r25
    2076:	21 f0       	breq	.+8      	; 0x2080 <MQTT_Publish_StateMachine+0x12c>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	03 c0       	rjmp	.+6      	; 0x2082 <MQTT_Publish_StateMachine+0x12e>
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	01 c0       	rjmp	.+2      	; 0x2082 <MQTT_Publish_StateMachine+0x12e>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    2080:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    2082:	88 23       	and	r24, r24
    2084:	09 f4       	brne	.+2      	; 0x2088 <MQTT_Publish_StateMachine+0x134>
    2086:	b7 c0       	rjmp	.+366    	; 0x21f6 <MQTT_Publish_StateMachine+0x2a2>
						{
							Publish_State = MQTT_UpdatePayloadLength; // Move to next state
    2088:	83 e0       	ldi	r24, 0x03	; 3
    208a:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <Publish_State>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	c5 c0       	rjmp	.+394    	; 0x221c <MQTT_Publish_StateMachine+0x2c8>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    2092:	83 50       	subi	r24, 0x03	; 3
    2094:	82 30       	cpi	r24, 0x02	; 2
    2096:	08 f4       	brcc	.+2      	; 0x209a <MQTT_Publish_StateMachine+0x146>
    2098:	b0 c0       	rjmp	.+352    	; 0x21fa <MQTT_Publish_StateMachine+0x2a6>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	bf c0       	rjmp	.+382    	; 0x221c <MQTT_Publish_StateMachine+0x2c8>
			}
			break;
			case MQTT_UpdatePayloadLength:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    209e:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <SIMCOM_Job_Result>
    20a2:	81 11       	cpse	r24, r1
    20a4:	2a c0       	rjmp	.+84     	; 0x20fa <MQTT_Publish_StateMachine+0x1a6>
				{
					char SetPayloadLength[20];
										
					sprintf(SetPayloadLength,"AT+CMQTTPAYLOAD=0,%d",strlen(PublishPayload));
    20a6:	e7 e2       	ldi	r30, 0x27	; 39
    20a8:	f6 e0       	ldi	r31, 0x06	; 6
    20aa:	01 90       	ld	r0, Z+
    20ac:	00 20       	and	r0, r0
    20ae:	e9 f7       	brne	.-6      	; 0x20aa <MQTT_Publish_StateMachine+0x156>
    20b0:	31 97       	sbiw	r30, 0x01	; 1
    20b2:	e7 52       	subi	r30, 0x27	; 39
    20b4:	f6 40       	sbci	r31, 0x06	; 6
    20b6:	ff 93       	push	r31
    20b8:	ef 93       	push	r30
    20ba:	87 e2       	ldi	r24, 0x27	; 39
    20bc:	93 e0       	ldi	r25, 0x03	; 3
    20be:	9f 93       	push	r25
    20c0:	8f 93       	push	r24
    20c2:	ce 01       	movw	r24, r28
    20c4:	01 96       	adiw	r24, 0x01	; 1
    20c6:	7c 01       	movw	r14, r24
    20c8:	9f 93       	push	r25
    20ca:	8f 93       	push	r24
    20cc:	0e 94 48 14 	call	0x2890	; 0x2890 <sprintf>
					
					/*Set Payload length For The Publish Msg, Now its sets statically if we need dynamic change in Payload we have to update the Length*/ 
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job(SetPayloadLength, SIMCOM_DEFAULT_TIMEOUT, MQTT_Publish_CallBack) == TRUE)
    20d0:	27 ea       	ldi	r18, 0xA7	; 167
    20d2:	3f e0       	ldi	r19, 0x0F	; 15
    20d4:	40 ed       	ldi	r20, 0xD0	; 208
    20d6:	57 e0       	ldi	r21, 0x07	; 7
    20d8:	60 e0       	ldi	r22, 0x00	; 0
    20da:	70 e0       	ldi	r23, 0x00	; 0
    20dc:	c7 01       	movw	r24, r14
    20de:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	81 30       	cpi	r24, 0x01	; 1
    20f0:	11 f4       	brne	.+4      	; 0x20f6 <MQTT_Publish_StateMachine+0x1a2>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    20f2:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <SIMCOM_Job_Result>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	91 c0       	rjmp	.+290    	; 0x221c <MQTT_Publish_StateMachine+0x2c8>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    20fa:	85 30       	cpi	r24, 0x05	; 5
    20fc:	09 f0       	breq	.+2      	; 0x2100 <MQTT_Publish_StateMachine+0x1ac>
    20fe:	7f c0       	rjmp	.+254    	; 0x21fe <MQTT_Publish_StateMachine+0x2aa>

static inline BOOL SIMCOM_IsResponse_Entermessage()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 1)
    2100:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_ResponseLength>
    2104:	81 30       	cpi	r24, 0x01	; 1
    2106:	51 f4       	brne	.+20     	; 0x211c <MQTT_Publish_StateMachine+0x1c8>
	{
		if(strcmp(SIMCOM_ResponseBuffer,ENTER_MESSAGE) == 0)
    2108:	65 ed       	ldi	r22, 0xD5	; 213
    210a:	72 e0       	ldi	r23, 0x02	; 2
    210c:	8e e2       	ldi	r24, 0x2E	; 46
    210e:	95 e0       	ldi	r25, 0x05	; 5
    2110:	0e 94 16 14 	call	0x282c	; 0x282c <strcmp>
    2114:	89 2b       	or	r24, r25
    2116:	21 f0       	breq	.+8      	; 0x2120 <MQTT_Publish_StateMachine+0x1cc>
}


static inline BOOL SIMCOM_IsResponse_Entermessage()
{
	BOOL retval = FALSE;
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	03 c0       	rjmp	.+6      	; 0x2122 <MQTT_Publish_StateMachine+0x1ce>
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	01 c0       	rjmp	.+2      	; 0x2122 <MQTT_Publish_StateMachine+0x1ce>

	if(SIMCOM_GetResponseLength() == 1)
	{
		if(strcmp(SIMCOM_ResponseBuffer,ENTER_MESSAGE) == 0)
		{
			retval = TRUE;
    2120:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed
						// Check if the response is OK or not.
						if(SIMCOM_IsResponse_Entermessage())
    2122:	88 23       	and	r24, r24
    2124:	09 f4       	brne	.+2      	; 0x2128 <MQTT_Publish_StateMachine+0x1d4>
    2126:	6d c0       	rjmp	.+218    	; 0x2202 <MQTT_Publish_StateMachine+0x2ae>
						{
							Publish_State = MQTT_Update_PubDataforTopic; // Move to next state
    2128:	84 e0       	ldi	r24, 0x04	; 4
    212a:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <Publish_State>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	75 c0       	rjmp	.+234    	; 0x221c <MQTT_Publish_StateMachine+0x2c8>
			break;
				
			case MQTT_Update_PubDataforTopic:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    2132:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <SIMCOM_Job_Result>
    2136:	81 11       	cpse	r24, r1
    2138:	11 c0       	rjmp	.+34     	; 0x215c <MQTT_Publish_StateMachine+0x208>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job(PublishPayload, SIMCOM_DEFAULT_TIMEOUT, MQTT_Publish_CallBack) == TRUE)
    213a:	27 ea       	ldi	r18, 0xA7	; 167
    213c:	3f e0       	ldi	r19, 0x0F	; 15
    213e:	40 ed       	ldi	r20, 0xD0	; 208
    2140:	57 e0       	ldi	r21, 0x07	; 7
    2142:	60 e0       	ldi	r22, 0x00	; 0
    2144:	70 e0       	ldi	r23, 0x00	; 0
    2146:	87 e2       	ldi	r24, 0x27	; 39
    2148:	96 e0       	ldi	r25, 0x06	; 6
    214a:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    214e:	81 30       	cpi	r24, 0x01	; 1
    2150:	09 f0       	breq	.+2      	; 0x2154 <MQTT_Publish_StateMachine+0x200>
    2152:	59 c0       	rjmp	.+178    	; 0x2206 <MQTT_Publish_StateMachine+0x2b2>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    2154:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <SIMCOM_Job_Result>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	60 c0       	rjmp	.+192    	; 0x221c <MQTT_Publish_StateMachine+0x2c8>
				}
				else
				{
						
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    215c:	85 30       	cpi	r24, 0x05	; 5
    215e:	09 f0       	breq	.+2      	; 0x2162 <MQTT_Publish_StateMachine+0x20e>
    2160:	54 c0       	rjmp	.+168    	; 0x220a <MQTT_Publish_StateMachine+0x2b6>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    2162:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_ResponseLength>
    2166:	82 30       	cpi	r24, 0x02	; 2
    2168:	51 f4       	brne	.+20     	; 0x217e <MQTT_Publish_StateMachine+0x22a>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    216a:	60 e4       	ldi	r22, 0x40	; 64
    216c:	71 e0       	ldi	r23, 0x01	; 1
    216e:	8e e2       	ldi	r24, 0x2E	; 46
    2170:	95 e0       	ldi	r25, 0x05	; 5
    2172:	0e 94 16 14 	call	0x282c	; 0x282c <strcmp>
    2176:	89 2b       	or	r24, r25
    2178:	21 f0       	breq	.+8      	; 0x2182 <MQTT_Publish_StateMachine+0x22e>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	03 c0       	rjmp	.+6      	; 0x2184 <MQTT_Publish_StateMachine+0x230>
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	01 c0       	rjmp	.+2      	; 0x2184 <MQTT_Publish_StateMachine+0x230>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    2182:	81 e0       	ldi	r24, 0x01	; 1
					{
						if (SIMCOM_IsResponseOK())
    2184:	88 23       	and	r24, r24
    2186:	09 f4       	brne	.+2      	; 0x218a <MQTT_Publish_StateMachine+0x236>
    2188:	42 c0       	rjmp	.+132    	; 0x220e <MQTT_Publish_StateMachine+0x2ba>
						{
							Publish_State = MQTT_Publish_Msg; // Move to next state
    218a:	85 e0       	ldi	r24, 0x05	; 5
    218c:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <Publish_State>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	44 c0       	rjmp	.+136    	; 0x221c <MQTT_Publish_StateMachine+0x2c8>
			}
			break;
			case MQTT_Publish_Msg:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    2194:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <SIMCOM_Job_Result>
    2198:	81 11       	cpse	r24, r1
    219a:	10 c0       	rjmp	.+32     	; 0x21bc <MQTT_Publish_StateMachine+0x268>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CMQTTPUB=0,1,60", SIMCOM_DEFAULT_TIMEOUT, MQTT_Publish_CallBack) == TRUE)
    219c:	27 ea       	ldi	r18, 0xA7	; 167
    219e:	3f e0       	ldi	r19, 0x0F	; 15
    21a0:	40 ed       	ldi	r20, 0xD0	; 208
    21a2:	57 e0       	ldi	r21, 0x07	; 7
    21a4:	60 e0       	ldi	r22, 0x00	; 0
    21a6:	70 e0       	ldi	r23, 0x00	; 0
    21a8:	8c e3       	ldi	r24, 0x3C	; 60
    21aa:	93 e0       	ldi	r25, 0x03	; 3
    21ac:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    21b0:	81 30       	cpi	r24, 0x01	; 1
    21b2:	79 f5       	brne	.+94     	; 0x2212 <MQTT_Publish_StateMachine+0x2be>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    21b4:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <SIMCOM_Job_Result>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	30 c0       	rjmp	.+96     	; 0x221c <MQTT_Publish_StateMachine+0x2c8>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    21bc:	85 30       	cpi	r24, 0x05	; 5
    21be:	29 f4       	brne	.+10     	; 0x21ca <MQTT_Publish_StateMachine+0x276>
					{
						Publish_State = MQTTWaitforPublishResponse;
    21c0:	86 e0       	ldi	r24, 0x06	; 6
    21c2:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <Publish_State>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	29 c0       	rjmp	.+82     	; 0x221c <MQTT_Publish_StateMachine+0x2c8>
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
					{
						Publish_State = MQTTWaitforPublishResponse;
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    21ca:	83 50       	subi	r24, 0x03	; 3
    21cc:	82 30       	cpi	r24, 0x02	; 2
    21ce:	18 f1       	brcs	.+70     	; 0x2216 <MQTT_Publish_StateMachine+0x2c2>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	24 c0       	rjmp	.+72     	; 0x221c <MQTT_Publish_StateMachine+0x2c8>
			break;
			
			case MQTTWaitforPublishResponse:
			{
				RetryInNextCycle = TRUE;
				if(MQTT_Publish_Retry_Count == 10)
    21d4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <MQTT_Publish_Retry_Count>
    21d8:	8a 30       	cpi	r24, 0x0A	; 10
    21da:	f9 f4       	brne	.+62     	; 0x221a <MQTT_Publish_StateMachine+0x2c6>
				{
					MQTT_Publish_Retry_Count = 50;
    21dc:	82 e3       	ldi	r24, 0x32	; 50
    21de:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <MQTT_Publish_Retry_Count>
			}
			break;
			
			case MQTTWaitforPublishResponse:
			{
				RetryInNextCycle = TRUE;
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	1b c0       	rjmp	.+54     	; 0x221c <MQTT_Publish_StateMachine+0x2c8>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	19 c0       	rjmp	.+50     	; 0x221c <MQTT_Publish_StateMachine+0x2c8>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	17 c0       	rjmp	.+46     	; 0x221c <MQTT_Publish_StateMachine+0x2c8>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	15 c0       	rjmp	.+42     	; 0x221c <MQTT_Publish_StateMachine+0x2c8>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	13 c0       	rjmp	.+38     	; 0x221c <MQTT_Publish_StateMachine+0x2c8>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	11 c0       	rjmp	.+34     	; 0x221c <MQTT_Publish_StateMachine+0x2c8>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	0f c0       	rjmp	.+30     	; 0x221c <MQTT_Publish_StateMachine+0x2c8>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	0d c0       	rjmp	.+26     	; 0x221c <MQTT_Publish_StateMachine+0x2c8>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	0b c0       	rjmp	.+22     	; 0x221c <MQTT_Publish_StateMachine+0x2c8>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	09 c0       	rjmp	.+18     	; 0x221c <MQTT_Publish_StateMachine+0x2c8>
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	07 c0       	rjmp	.+14     	; 0x221c <MQTT_Publish_StateMachine+0x2c8>
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	05 c0       	rjmp	.+10     	; 0x221c <MQTT_Publish_StateMachine+0x2c8>
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	03 c0       	rjmp	.+6      	; 0x221c <MQTT_Publish_StateMachine+0x2c8>
						Publish_State = MQTTWaitforPublishResponse;
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	01 c0       	rjmp	.+2      	; 0x221c <MQTT_Publish_StateMachine+0x2c8>
			}
			break;
			
			case MQTTWaitforPublishResponse:
			{
				RetryInNextCycle = TRUE;
    221a:	81 e0       	ldi	r24, 0x01	; 1
				// Do Nothing, The state machine has been completed
			}
			break;
		}

		if(RetryInNextCycle == TRUE)
    221c:	81 30       	cpi	r24, 0x01	; 1
    221e:	69 f4       	brne	.+26     	; 0x223a <MQTT_Publish_StateMachine+0x2e6>
		{
			// If Retry is allowed
			if(MQTT_Publish_Retry_Count != 0)
    2220:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <MQTT_Publish_Retry_Count>
    2224:	88 23       	and	r24, r24
    2226:	31 f0       	breq	.+12     	; 0x2234 <MQTT_Publish_StateMachine+0x2e0>
			{
				MQTT_Publish_Retry_Count--; // Decrement the Retry Count
    2228:	81 50       	subi	r24, 0x01	; 1
    222a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <MQTT_Publish_Retry_Count>

				SIMCOM_Job_Result = SIMCOM_Job_Idle; // Setting the Job to Idle will retry the Job again in next cycle.
    222e:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <SIMCOM_Job_Result>
    2232:	03 c0       	rjmp	.+6      	; 0x223a <MQTT_Publish_StateMachine+0x2e6>
			}
			else
			{
				// RETRY Mechanism expired, abort the Job and do not move the state
				SIMCOM_Job_Result = SIMCOM_Job_Aborted;
    2234:	86 e0       	ldi	r24, 0x06	; 6
    2236:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <SIMCOM_Job_Result>
			}
		}
		if(SIMCOM_Job_Result == SIMCOM_Job_Aborted)
    223a:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <SIMCOM_Job_Result>
    223e:	86 30       	cpi	r24, 0x06	; 6
    2240:	11 f4       	brne	.+4      	; 0x2246 <MQTT_Publish_StateMachine+0x2f2>
		{
			// If in any of the state, the Job is aborted, then move to the error state
			SIMCOM_ERROR_CALLBACK();
    2242:	0e 94 c9 0c 	call	0x1992	; 0x1992 <COSMIC_SIMCOM_Error_Callback>
		}

		/* Check if the state changed after execution */
		if(MQTT_Publish_State_Before_Execution != MQTT_State)
    2246:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <MQTT_State>
    224a:	18 17       	cp	r17, r24
    224c:	29 f0       	breq	.+10     	; 0x2258 <MQTT_Publish_StateMachine+0x304>
		{
			// If changed, the Set the New Job Result as Idle for the next state to proceed further
			SIMCOM_Job_Result = SIMCOM_Job_Idle; // Reset the Job state so that next command will be sent
    224e:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <SIMCOM_Job_Result>

			MQTT_Publish_Retry_Count = 10; // Reset the Retry Count
    2252:	8a e0       	ldi	r24, 0x0A	; 10
    2254:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <MQTT_Publish_Retry_Count>
		}
	}
	
    2258:	64 96       	adiw	r28, 0x14	; 20
    225a:	0f b6       	in	r0, 0x3f	; 63
    225c:	f8 94       	cli
    225e:	de bf       	out	0x3e, r29	; 62
    2260:	0f be       	out	0x3f, r0	; 63
    2262:	cd bf       	out	0x3d, r28	; 61
    2264:	df 91       	pop	r29
    2266:	cf 91       	pop	r28
    2268:	1f 91       	pop	r17
    226a:	ff 90       	pop	r15
    226c:	ef 90       	pop	r14
    226e:	08 95       	ret

00002270 <SIMCOM_SSL_Configration_Callback>:
static void SIMCOM_SSL_Configration_Callback(SIMCOM_Job_Result_EN result)
{
	// This function will be called by the SIMCOM handler upon successful reception of the response

	// This will be read in the Main function, so simply set the value
	SIMCOM_Job_Result = result;
    2270:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <SIMCOM_Job_Result>
    2274:	08 95       	ret

00002276 <SIMCOM_SSL_CONFIG_MainFunction>:
/*****************************************/
/* Function Definitions                  */
/*****************************************/

void SIMCOM_SSL_CONFIG_MainFunction(void)
{
    2276:	cf 93       	push	r28
	if(IsSIMCOM_Module_Ready())
    2278:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <SIMCOM_State>
    227c:	8c 30       	cpi	r24, 0x0C	; 12
    227e:	09 f0       	breq	.+2      	; 0x2282 <SIMCOM_SSL_CONFIG_MainFunction+0xc>
    2280:	5d c1       	rjmp	.+698    	; 0x253c <SIMCOM_SSL_CONFIG_MainFunction+0x2c6>
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;
    2282:	c0 91 70 00 	lds	r28, 0x0070	; 0x800070 <C_MQTT_SSL_Config_State>

		BOOL RetryInNextCycle = FALSE;

		switch(C_MQTT_SSL_Config_State)
    2286:	c3 30       	cpi	r28, 0x03	; 3
    2288:	09 f4       	brne	.+2      	; 0x228c <SIMCOM_SSL_CONFIG_MainFunction+0x16>
    228a:	79 c0       	rjmp	.+242    	; 0x237e <SIMCOM_SSL_CONFIG_MainFunction+0x108>
    228c:	28 f4       	brcc	.+10     	; 0x2298 <SIMCOM_SSL_CONFIG_MainFunction+0x22>
    228e:	c1 30       	cpi	r28, 0x01	; 1
    2290:	51 f0       	breq	.+20     	; 0x22a6 <SIMCOM_SSL_CONFIG_MainFunction+0x30>
    2292:	c2 30       	cpi	r28, 0x02	; 2
    2294:	f1 f1       	breq	.+124    	; 0x2312 <SIMCOM_SSL_CONFIG_MainFunction+0x9c>
    2296:	12 c1       	rjmp	.+548    	; 0x24bc <SIMCOM_SSL_CONFIG_MainFunction+0x246>
    2298:	c4 30       	cpi	r28, 0x04	; 4
    229a:	09 f4       	brne	.+2      	; 0x229e <SIMCOM_SSL_CONFIG_MainFunction+0x28>
    229c:	a6 c0       	rjmp	.+332    	; 0x23ea <SIMCOM_SSL_CONFIG_MainFunction+0x174>
    229e:	c5 30       	cpi	r28, 0x05	; 5
    22a0:	09 f4       	brne	.+2      	; 0x22a4 <SIMCOM_SSL_CONFIG_MainFunction+0x2e>
    22a2:	d9 c0       	rjmp	.+434    	; 0x2456 <SIMCOM_SSL_CONFIG_MainFunction+0x1e0>
    22a4:	0b c1       	rjmp	.+534    	; 0x24bc <SIMCOM_SSL_CONFIG_MainFunction+0x246>
			case C_MQTT_SSL_Init:
			{
				

				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    22a6:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <SIMCOM_Job_Result>
    22aa:	81 11       	cpse	r24, r1
    22ac:	11 c0       	rjmp	.+34     	; 0x22d0 <SIMCOM_SSL_CONFIG_MainFunction+0x5a>
				{
					
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CSSLCFG=\"sslversion\",0,4", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_SSL_Configration_Callback) == TRUE)
    22ae:	28 e3       	ldi	r18, 0x38	; 56
    22b0:	31 e1       	ldi	r19, 0x11	; 17
    22b2:	40 ed       	ldi	r20, 0xD0	; 208
    22b4:	57 e0       	ldi	r21, 0x07	; 7
    22b6:	60 e0       	ldi	r22, 0x00	; 0
    22b8:	70 e0       	ldi	r23, 0x00	; 0
    22ba:	8f e4       	ldi	r24, 0x4F	; 79
    22bc:	93 e0       	ldi	r25, 0x03	; 3
    22be:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    22c2:	81 30       	cpi	r24, 0x01	; 1
    22c4:	09 f0       	breq	.+2      	; 0x22c8 <SIMCOM_SSL_CONFIG_MainFunction+0x52>
    22c6:	fc c0       	rjmp	.+504    	; 0x24c0 <SIMCOM_SSL_CONFIG_MainFunction+0x24a>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    22c8:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <SIMCOM_Job_Result>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	15 c1       	rjmp	.+554    	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    22d0:	85 30       	cpi	r24, 0x05	; 5
    22d2:	c9 f4       	brne	.+50     	; 0x2306 <SIMCOM_SSL_CONFIG_MainFunction+0x90>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    22d4:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_ResponseLength>
    22d8:	82 30       	cpi	r24, 0x02	; 2
    22da:	51 f4       	brne	.+20     	; 0x22f0 <SIMCOM_SSL_CONFIG_MainFunction+0x7a>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    22dc:	60 e4       	ldi	r22, 0x40	; 64
    22de:	71 e0       	ldi	r23, 0x01	; 1
    22e0:	8e e2       	ldi	r24, 0x2E	; 46
    22e2:	95 e0       	ldi	r25, 0x05	; 5
    22e4:	0e 94 16 14 	call	0x282c	; 0x282c <strcmp>
    22e8:	89 2b       	or	r24, r25
    22ea:	21 f0       	breq	.+8      	; 0x22f4 <SIMCOM_SSL_CONFIG_MainFunction+0x7e>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	03 c0       	rjmp	.+6      	; 0x22f6 <SIMCOM_SSL_CONFIG_MainFunction+0x80>
    22f0:	80 e0       	ldi	r24, 0x00	; 0
    22f2:	01 c0       	rjmp	.+2      	; 0x22f6 <SIMCOM_SSL_CONFIG_MainFunction+0x80>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    22f4:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    22f6:	88 23       	and	r24, r24
    22f8:	09 f4       	brne	.+2      	; 0x22fc <SIMCOM_SSL_CONFIG_MainFunction+0x86>
    22fa:	e4 c0       	rjmp	.+456    	; 0x24c4 <SIMCOM_SSL_CONFIG_MainFunction+0x24e>
						{

							C_MQTT_SSL_Config_State = C_MQTT_SSL_Authentication; // Move to next state
    22fc:	82 e0       	ldi	r24, 0x02	; 2
    22fe:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <C_MQTT_SSL_Config_State>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	fa c0       	rjmp	.+500    	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    2306:	83 50       	subi	r24, 0x03	; 3
    2308:	82 30       	cpi	r24, 0x02	; 2
    230a:	08 f4       	brcc	.+2      	; 0x230e <SIMCOM_SSL_CONFIG_MainFunction+0x98>
    230c:	dd c0       	rjmp	.+442    	; 0x24c8 <SIMCOM_SSL_CONFIG_MainFunction+0x252>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	f4 c0       	rjmp	.+488    	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>
			break;
			
			case C_MQTT_SSL_Authentication:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    2312:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <SIMCOM_Job_Result>
    2316:	81 11       	cpse	r24, r1
    2318:	11 c0       	rjmp	.+34     	; 0x233c <SIMCOM_SSL_CONFIG_MainFunction+0xc6>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CSSLCFG=\"authmode\",0,2", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_SSL_Configration_Callback) == TRUE)
    231a:	28 e3       	ldi	r18, 0x38	; 56
    231c:	31 e1       	ldi	r19, 0x11	; 17
    231e:	40 ed       	ldi	r20, 0xD0	; 208
    2320:	57 e0       	ldi	r21, 0x07	; 7
    2322:	60 e0       	ldi	r22, 0x00	; 0
    2324:	70 e0       	ldi	r23, 0x00	; 0
    2326:	8b e6       	ldi	r24, 0x6B	; 107
    2328:	93 e0       	ldi	r25, 0x03	; 3
    232a:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    232e:	81 30       	cpi	r24, 0x01	; 1
    2330:	09 f0       	breq	.+2      	; 0x2334 <SIMCOM_SSL_CONFIG_MainFunction+0xbe>
    2332:	cc c0       	rjmp	.+408    	; 0x24cc <SIMCOM_SSL_CONFIG_MainFunction+0x256>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    2334:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <SIMCOM_Job_Result>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	df c0       	rjmp	.+446    	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    233c:	85 30       	cpi	r24, 0x05	; 5
    233e:	c9 f4       	brne	.+50     	; 0x2372 <SIMCOM_SSL_CONFIG_MainFunction+0xfc>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    2340:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_ResponseLength>
    2344:	82 30       	cpi	r24, 0x02	; 2
    2346:	51 f4       	brne	.+20     	; 0x235c <SIMCOM_SSL_CONFIG_MainFunction+0xe6>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    2348:	60 e4       	ldi	r22, 0x40	; 64
    234a:	71 e0       	ldi	r23, 0x01	; 1
    234c:	8e e2       	ldi	r24, 0x2E	; 46
    234e:	95 e0       	ldi	r25, 0x05	; 5
    2350:	0e 94 16 14 	call	0x282c	; 0x282c <strcmp>
    2354:	89 2b       	or	r24, r25
    2356:	21 f0       	breq	.+8      	; 0x2360 <SIMCOM_SSL_CONFIG_MainFunction+0xea>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	03 c0       	rjmp	.+6      	; 0x2362 <SIMCOM_SSL_CONFIG_MainFunction+0xec>
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	01 c0       	rjmp	.+2      	; 0x2362 <SIMCOM_SSL_CONFIG_MainFunction+0xec>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    2360:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    2362:	88 23       	and	r24, r24
    2364:	09 f4       	brne	.+2      	; 0x2368 <SIMCOM_SSL_CONFIG_MainFunction+0xf2>
    2366:	b4 c0       	rjmp	.+360    	; 0x24d0 <SIMCOM_SSL_CONFIG_MainFunction+0x25a>
						{
							C_MQTT_SSL_Config_State = C_MQTT_SSL_CaCert_Configuration; // Move to next state
    2368:	83 e0       	ldi	r24, 0x03	; 3
    236a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <C_MQTT_SSL_Config_State>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	c4 c0       	rjmp	.+392    	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    2372:	83 50       	subi	r24, 0x03	; 3
    2374:	82 30       	cpi	r24, 0x02	; 2
    2376:	08 f4       	brcc	.+2      	; 0x237a <SIMCOM_SSL_CONFIG_MainFunction+0x104>
    2378:	ad c0       	rjmp	.+346    	; 0x24d4 <SIMCOM_SSL_CONFIG_MainFunction+0x25e>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	be c0       	rjmp	.+380    	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>


			case C_MQTT_SSL_CaCert_Configuration:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    237e:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <SIMCOM_Job_Result>
    2382:	81 11       	cpse	r24, r1
    2384:	11 c0       	rjmp	.+34     	; 0x23a8 <SIMCOM_SSL_CONFIG_MainFunction+0x132>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CSSLCFG=\"cacert\",0,\"cacert.pem\"", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_SSL_Configration_Callback) == TRUE)
    2386:	28 e3       	ldi	r18, 0x38	; 56
    2388:	31 e1       	ldi	r19, 0x11	; 17
    238a:	40 ed       	ldi	r20, 0xD0	; 208
    238c:	57 e0       	ldi	r21, 0x07	; 7
    238e:	60 e0       	ldi	r22, 0x00	; 0
    2390:	70 e0       	ldi	r23, 0x00	; 0
    2392:	85 e8       	ldi	r24, 0x85	; 133
    2394:	93 e0       	ldi	r25, 0x03	; 3
    2396:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    239a:	81 30       	cpi	r24, 0x01	; 1
    239c:	09 f0       	breq	.+2      	; 0x23a0 <SIMCOM_SSL_CONFIG_MainFunction+0x12a>
    239e:	9c c0       	rjmp	.+312    	; 0x24d8 <SIMCOM_SSL_CONFIG_MainFunction+0x262>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    23a0:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <SIMCOM_Job_Result>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	a9 c0       	rjmp	.+338    	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    23a8:	85 30       	cpi	r24, 0x05	; 5
    23aa:	c9 f4       	brne	.+50     	; 0x23de <SIMCOM_SSL_CONFIG_MainFunction+0x168>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    23ac:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_ResponseLength>
    23b0:	82 30       	cpi	r24, 0x02	; 2
    23b2:	51 f4       	brne	.+20     	; 0x23c8 <SIMCOM_SSL_CONFIG_MainFunction+0x152>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    23b4:	60 e4       	ldi	r22, 0x40	; 64
    23b6:	71 e0       	ldi	r23, 0x01	; 1
    23b8:	8e e2       	ldi	r24, 0x2E	; 46
    23ba:	95 e0       	ldi	r25, 0x05	; 5
    23bc:	0e 94 16 14 	call	0x282c	; 0x282c <strcmp>
    23c0:	89 2b       	or	r24, r25
    23c2:	21 f0       	breq	.+8      	; 0x23cc <SIMCOM_SSL_CONFIG_MainFunction+0x156>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	03 c0       	rjmp	.+6      	; 0x23ce <SIMCOM_SSL_CONFIG_MainFunction+0x158>
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	01 c0       	rjmp	.+2      	; 0x23ce <SIMCOM_SSL_CONFIG_MainFunction+0x158>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    23cc:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    23ce:	88 23       	and	r24, r24
    23d0:	09 f4       	brne	.+2      	; 0x23d4 <SIMCOM_SSL_CONFIG_MainFunction+0x15e>
    23d2:	84 c0       	rjmp	.+264    	; 0x24dc <SIMCOM_SSL_CONFIG_MainFunction+0x266>
						{
							C_MQTT_SSL_Config_State = C_MQTT_SSL_Clientcert_Configuration; // Move to next state
    23d4:	84 e0       	ldi	r24, 0x04	; 4
    23d6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <C_MQTT_SSL_Config_State>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    23da:	80 e0       	ldi	r24, 0x00	; 0
    23dc:	8e c0       	rjmp	.+284    	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    23de:	83 50       	subi	r24, 0x03	; 3
    23e0:	82 30       	cpi	r24, 0x02	; 2
    23e2:	08 f4       	brcc	.+2      	; 0x23e6 <SIMCOM_SSL_CONFIG_MainFunction+0x170>
    23e4:	7d c0       	rjmp	.+250    	; 0x24e0 <SIMCOM_SSL_CONFIG_MainFunction+0x26a>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	88 c0       	rjmp	.+272    	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>


			case C_MQTT_SSL_Clientcert_Configuration:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    23ea:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <SIMCOM_Job_Result>
    23ee:	81 11       	cpse	r24, r1
    23f0:	11 c0       	rjmp	.+34     	; 0x2414 <SIMCOM_SSL_CONFIG_MainFunction+0x19e>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CSSLCFG=\"clientcert\",0,\"clientcert.pem\"", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_SSL_Configration_Callback) == TRUE)
    23f2:	28 e3       	ldi	r18, 0x38	; 56
    23f4:	31 e1       	ldi	r19, 0x11	; 17
    23f6:	40 ed       	ldi	r20, 0xD0	; 208
    23f8:	57 e0       	ldi	r21, 0x07	; 7
    23fa:	60 e0       	ldi	r22, 0x00	; 0
    23fc:	70 e0       	ldi	r23, 0x00	; 0
    23fe:	88 ea       	ldi	r24, 0xA8	; 168
    2400:	93 e0       	ldi	r25, 0x03	; 3
    2402:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    2406:	81 30       	cpi	r24, 0x01	; 1
    2408:	09 f0       	breq	.+2      	; 0x240c <SIMCOM_SSL_CONFIG_MainFunction+0x196>
    240a:	6c c0       	rjmp	.+216    	; 0x24e4 <SIMCOM_SSL_CONFIG_MainFunction+0x26e>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    240c:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <SIMCOM_Job_Result>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    2410:	80 e0       	ldi	r24, 0x00	; 0
    2412:	73 c0       	rjmp	.+230    	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    2414:	85 30       	cpi	r24, 0x05	; 5
    2416:	c9 f4       	brne	.+50     	; 0x244a <SIMCOM_SSL_CONFIG_MainFunction+0x1d4>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    2418:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_ResponseLength>
    241c:	82 30       	cpi	r24, 0x02	; 2
    241e:	51 f4       	brne	.+20     	; 0x2434 <SIMCOM_SSL_CONFIG_MainFunction+0x1be>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    2420:	60 e4       	ldi	r22, 0x40	; 64
    2422:	71 e0       	ldi	r23, 0x01	; 1
    2424:	8e e2       	ldi	r24, 0x2E	; 46
    2426:	95 e0       	ldi	r25, 0x05	; 5
    2428:	0e 94 16 14 	call	0x282c	; 0x282c <strcmp>
    242c:	89 2b       	or	r24, r25
    242e:	21 f0       	breq	.+8      	; 0x2438 <SIMCOM_SSL_CONFIG_MainFunction+0x1c2>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	03 c0       	rjmp	.+6      	; 0x243a <SIMCOM_SSL_CONFIG_MainFunction+0x1c4>
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	01 c0       	rjmp	.+2      	; 0x243a <SIMCOM_SSL_CONFIG_MainFunction+0x1c4>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    2438:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    243a:	88 23       	and	r24, r24
    243c:	09 f4       	brne	.+2      	; 0x2440 <SIMCOM_SSL_CONFIG_MainFunction+0x1ca>
    243e:	54 c0       	rjmp	.+168    	; 0x24e8 <SIMCOM_SSL_CONFIG_MainFunction+0x272>
						{
							C_MQTT_SSL_Config_State = C_MQTT_SSL_Clientkey_Configuration; // Move to next state
    2440:	85 e0       	ldi	r24, 0x05	; 5
    2442:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <C_MQTT_SSL_Config_State>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    2446:	80 e0       	ldi	r24, 0x00	; 0
    2448:	58 c0       	rjmp	.+176    	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    244a:	83 50       	subi	r24, 0x03	; 3
    244c:	82 30       	cpi	r24, 0x02	; 2
    244e:	08 f4       	brcc	.+2      	; 0x2452 <SIMCOM_SSL_CONFIG_MainFunction+0x1dc>
    2450:	4d c0       	rjmp	.+154    	; 0x24ec <SIMCOM_SSL_CONFIG_MainFunction+0x276>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	52 c0       	rjmp	.+164    	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>


			case C_MQTT_SSL_Clientkey_Configuration:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    2456:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <SIMCOM_Job_Result>
    245a:	81 11       	cpse	r24, r1
    245c:	10 c0       	rjmp	.+32     	; 0x247e <SIMCOM_SSL_CONFIG_MainFunction+0x208>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CSSLCFG=\"clientkey\",0,\"clientkey.pem\"", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_SSL_Configration_Callback) == TRUE)
    245e:	28 e3       	ldi	r18, 0x38	; 56
    2460:	31 e1       	ldi	r19, 0x11	; 17
    2462:	40 ed       	ldi	r20, 0xD0	; 208
    2464:	57 e0       	ldi	r21, 0x07	; 7
    2466:	60 e0       	ldi	r22, 0x00	; 0
    2468:	70 e0       	ldi	r23, 0x00	; 0
    246a:	83 ed       	ldi	r24, 0xD3	; 211
    246c:	93 e0       	ldi	r25, 0x03	; 3
    246e:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    2472:	81 30       	cpi	r24, 0x01	; 1
    2474:	e9 f5       	brne	.+122    	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x27a>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    2476:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <SIMCOM_Job_Result>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	3e c0       	rjmp	.+124    	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    247e:	85 30       	cpi	r24, 0x05	; 5
    2480:	c1 f4       	brne	.+48     	; 0x24b2 <SIMCOM_SSL_CONFIG_MainFunction+0x23c>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    2482:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_ResponseLength>
    2486:	82 30       	cpi	r24, 0x02	; 2
    2488:	51 f4       	brne	.+20     	; 0x249e <SIMCOM_SSL_CONFIG_MainFunction+0x228>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    248a:	60 e4       	ldi	r22, 0x40	; 64
    248c:	71 e0       	ldi	r23, 0x01	; 1
    248e:	8e e2       	ldi	r24, 0x2E	; 46
    2490:	95 e0       	ldi	r25, 0x05	; 5
    2492:	0e 94 16 14 	call	0x282c	; 0x282c <strcmp>
    2496:	89 2b       	or	r24, r25
    2498:	21 f0       	breq	.+8      	; 0x24a2 <SIMCOM_SSL_CONFIG_MainFunction+0x22c>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	03 c0       	rjmp	.+6      	; 0x24a4 <SIMCOM_SSL_CONFIG_MainFunction+0x22e>
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	01 c0       	rjmp	.+2      	; 0x24a4 <SIMCOM_SSL_CONFIG_MainFunction+0x22e>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    24a4:	88 23       	and	r24, r24
    24a6:	31 f1       	breq	.+76     	; 0x24f4 <SIMCOM_SSL_CONFIG_MainFunction+0x27e>
						{
							C_MQTT_SSL_Config_State = C_MQTT_SSL_Configured; // Move to next state
    24a8:	86 e0       	ldi	r24, 0x06	; 6
    24aa:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <C_MQTT_SSL_Config_State>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	24 c0       	rjmp	.+72     	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    24b2:	83 50       	subi	r24, 0x03	; 3
    24b4:	82 30       	cpi	r24, 0x02	; 2
    24b6:	00 f1       	brcs	.+64     	; 0x24f8 <SIMCOM_SSL_CONFIG_MainFunction+0x282>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	1f c0       	rjmp	.+62     	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	1d c0       	rjmp	.+58     	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	1b c0       	rjmp	.+54     	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	19 c0       	rjmp	.+50     	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	17 c0       	rjmp	.+46     	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	15 c0       	rjmp	.+42     	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	13 c0       	rjmp	.+38     	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	11 c0       	rjmp	.+34     	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    24d8:	80 e0       	ldi	r24, 0x00	; 0
    24da:	0f c0       	rjmp	.+30     	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	0d c0       	rjmp	.+26     	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	0b c0       	rjmp	.+22     	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	09 c0       	rjmp	.+18     	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	07 c0       	rjmp	.+14     	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	05 c0       	rjmp	.+10     	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	03 c0       	rjmp	.+6      	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	01 c0       	rjmp	.+2      	; 0x24fa <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    24f8:	81 e0       	ldi	r24, 0x01	; 1
				// Do Nothing, The state machine has been completed
			}
			break;
		}

		if(RetryInNextCycle == TRUE)
    24fa:	81 30       	cpi	r24, 0x01	; 1
    24fc:	69 f4       	brne	.+26     	; 0x2518 <SIMCOM_SSL_CONFIG_MainFunction+0x2a2>
		{
			// If Retry is allowed
			if(SIMCOM_SSL_Config_Retry_Count != 0)
    24fe:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <SIMCOM_SSL_Config_Retry_Count>
    2502:	88 23       	and	r24, r24
    2504:	31 f0       	breq	.+12     	; 0x2512 <SIMCOM_SSL_CONFIG_MainFunction+0x29c>
			{
				SIMCOM_SSL_Config_Retry_Count--; // Decrement the Retry Count
    2506:	81 50       	subi	r24, 0x01	; 1
    2508:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <SIMCOM_SSL_Config_Retry_Count>

				SIMCOM_Job_Result = SIMCOM_Job_Idle; // Setting the Job to Idle will retry the Job again in next cycle.
    250c:	10 92 15 04 	sts	0x0415, r1	; 0x800415 <SIMCOM_Job_Result>
    2510:	03 c0       	rjmp	.+6      	; 0x2518 <SIMCOM_SSL_CONFIG_MainFunction+0x2a2>
			}
			else
			{
				// RETRY Mechanism expired, abort the Job and do not move the state
				SIMCOM_Job_Result = SIMCOM_Job_Aborted;
    2512:	86 e0       	ldi	r24, 0x06	; 6
    2514:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <SIMCOM_Job_Result>
			}
		}

		if(SIMCOM_Job_Result == SIMCOM_Job_Aborted)
    2518:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <SIMCOM_Job_Result>
    251c:	86 30       	cpi	r24, 0x06	; 6
    251e:	29 f4       	brne	.+10     	; 0x252a <SIMCOM_SSL_CONFIG_MainFunction+0x2b4>
		{
			// If in any of the state, the Job is aborted, then move to the Error State

			C_MQTT_SSL_Config_State = C_MQTT_SSL_Configration_Error;
    2520:	87 e0       	ldi	r24, 0x07	; 7
    2522:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <C_MQTT_SSL_Config_State>

			/* Send Appropriate Error Code to Application */
			{
				SIMCOM_Error_State_EN ErrorState = SIMCOM_Error_Unknown;

				SIMCOM_ERROR_CALLBACK();
    2526:	0e 94 c9 0c 	call	0x1992	; 0x1992 <COSMIC_SIMCOM_Error_Callback>
			}
		}

		/* Check if the state changed after execution */
		if(C_MQTT_SSL_Configuration_State_Before_Execution != C_MQTT_SSL_Config_State)
    252a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <C_MQTT_SSL_Config_State>
    252e:	c8 17       	cp	r28, r24
    2530:	29 f0       	breq	.+10     	; 0x253c <SIMCOM_SSL_CONFIG_MainFunction+0x2c6>
		{
			// If changed, the Set the New Job Result as Idle for the next state to proceed further
			SIMCOM_Job_Result = SIMCOM_Job_Idle; // Reset the Job state so that next command will be sent
    2532:	10 92 15 04 	sts	0x0415, r1	; 0x800415 <SIMCOM_Job_Result>

			SIMCOM_SSL_Config_Retry_Count = P_SIMCOM_DEFAULT_FAILURE_RETRY_COUNT; // Reset the Retry Count
    2536:	8a e0       	ldi	r24, 0x0A	; 10
    2538:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <SIMCOM_SSL_Config_Retry_Count>
	}
	else
	{
		//SIMCOM_SSL_Config_State = SIMCOM_SSL_Configuration_Idle;
	}
    253c:	cf 91       	pop	r28
    253e:	08 95       	ret

00002540 <COSMIC_Generic_SIMCOM_Callback>:
/* Function Declarations */
/*************************/

static inline void SIMCOM_ClearResponseBuffer()
{
	memset(SIMCOM_ResponseBuffer, 0, BUFFER_MAX_SIZE);
    2540:	88 ec       	ldi	r24, 0xC8	; 200
    2542:	ee e2       	ldi	r30, 0x2E	; 46
    2544:	f5 e0       	ldi	r31, 0x05	; 5
    2546:	df 01       	movw	r26, r30
    2548:	1d 92       	st	X+, r1
    254a:	8a 95       	dec	r24
    254c:	e9 f7       	brne	.-6      	; 0x2548 <COSMIC_Generic_SIMCOM_Callback+0x8>

	SIMCOM_ResponseLength = 0;
    254e:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <SIMCOM_ResponseLength>
    2552:	08 95       	ret

00002554 <CloudRxCommandDataRxCbk>:
	/* This function will be called for an un-scheduled job. So check for the response and clear the buffer */
	SIMCOM_ClearResponseBuffer();
}

void CloudRxCommandDataRxCbk(UBYTE Length, UBYTE *Data)
{
    2554:	08 95       	ret

00002556 <Cloud_ComIf_ErrorNotification>:
	
}

void Cloud_ComIf_ErrorNotification(ULONG Debug0, ULONG Debug1)
{
    2556:	08 95       	ret

00002558 <Cloud_Transmit>:
	
}

UBYTE Cloud_Transmit(UWORD Length, void * Data)
{
	memcpy(PublishPayload,Data,Length);
    2558:	ac 01       	movw	r20, r24
    255a:	87 e2       	ldi	r24, 0x27	; 39
    255c:	96 e0       	ldi	r25, 0x06	; 6
    255e:	0e 94 0d 14 	call	0x281a	; 0x281a <memcpy>
	
	return COMIF_EC_NO_ERROR;
}
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	08 95       	ret

00002566 <UpdatePublishdata>:

void UpdatePublishdata(UBYTE Cmd)
{
	CommandData_ST *CD = &CommandData;
	
	CD->cmd = Cmd;
    2566:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <CommandData>
	{
		CD->IO_Ctrl = FALSE;
	}
	else
	{
		CD->IO_Ctrl = TRUE;
    256a:	e8 e6       	ldi	r30, 0x68	; 104
    256c:	f6 e0       	ldi	r31, 0x06	; 6
    256e:	80 81       	ld	r24, Z
    2570:	81 60       	ori	r24, 0x01	; 1
    2572:	80 83       	st	Z, r24
	}
	UBYTE *PubMsg = ComIf_GetShadowBuffer_Cloud_CommandDataStatus();
	
	memcpy(PubMsg,CD->Data_Bytes,8);
    2574:	88 e0       	ldi	r24, 0x08	; 8
    2576:	e7 e6       	ldi	r30, 0x67	; 103
    2578:	f6 e0       	ldi	r31, 0x06	; 6
    257a:	a5 e5       	ldi	r26, 0x55	; 85
    257c:	b7 e0       	ldi	r27, 0x07	; 7
    257e:	01 90       	ld	r0, Z+
    2580:	0d 92       	st	X+, r0
    2582:	8a 95       	dec	r24
    2584:	e1 f7       	brne	.-8      	; 0x257e <UpdatePublishdata+0x18>
	
	ComIf_TransmitFromBuffer_Cloud_CommandDataStatus();
    2586:	28 e0       	ldi	r18, 0x08	; 8
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	45 e5       	ldi	r20, 0x55	; 85
    258c:	57 e0       	ldi	r21, 0x07	; 7
    258e:	60 e0       	ldi	r22, 0x00	; 0
    2590:	70 e0       	ldi	r23, 0x00	; 0
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	0e 94 25 03 	call	0x64a	; 0x64a <ComIf_Transmit>
    259a:	08 95       	ret

0000259c <MQTT_StringSeperate>:
	
}

UBYTE MQTT_StringSeperate(char *str,char endpoint)
{
    259c:	ef 92       	push	r14
    259e:	ff 92       	push	r15
    25a0:	0f 93       	push	r16
    25a2:	1f 93       	push	r17
    25a4:	cf 93       	push	r28
    25a6:	df 93       	push	r29
    25a8:	ec 01       	movw	r28, r24
	static char arr[5];
	int i,j,findlen,count = 0,temp;
	findlen = strlen(str);
    25aa:	dc 01       	movw	r26, r24
    25ac:	0d 90       	ld	r0, X+
    25ae:	00 20       	and	r0, r0
    25b0:	e9 f7       	brne	.-6      	; 0x25ac <MQTT_StringSeperate+0x10>
    25b2:	11 97       	sbiw	r26, 0x01	; 1
    25b4:	a8 1b       	sub	r26, r24
    25b6:	b9 0b       	sbc	r27, r25
	for(i = 0;i<SIMCOM_ResponseLength-findlen;i++)
    25b8:	40 e0       	ldi	r20, 0x00	; 0
    25ba:	50 e0       	ldi	r21, 0x00	; 0
    25bc:	46 c0       	rjmp	.+140    	; 0x264a <MQTT_StringSeperate+0xae>
	{
		j = 0;
		if(SubscribeDataBuff[i] == str[0] && SubscribeDataBuff[i+1] == str[1])
    25be:	fa 01       	movw	r30, r20
    25c0:	e1 59       	subi	r30, 0x91	; 145
    25c2:	f9 4f       	sbci	r31, 0xF9	; 249
    25c4:	90 81       	ld	r25, Z
    25c6:	88 81       	ld	r24, Y
    25c8:	98 13       	cpse	r25, r24
    25ca:	3d c0       	rjmp	.+122    	; 0x2646 <MQTT_StringSeperate+0xaa>
    25cc:	fa 01       	movw	r30, r20
    25ce:	e0 59       	subi	r30, 0x90	; 144
    25d0:	f9 4f       	sbci	r31, 0xF9	; 249
    25d2:	90 81       	ld	r25, Z
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	98 13       	cpse	r25, r24
    25d8:	36 c0       	rjmp	.+108    	; 0x2646 <MQTT_StringSeperate+0xaa>
    25da:	2d c0       	rjmp	.+90     	; 0x2636 <MQTT_StringSeperate+0x9a>
		{
			temp = i;
			while(j<findlen)
			{
				if(str[j] == SubscribeDataBuff[temp])
    25dc:	fe 01       	movw	r30, r28
    25de:	e2 0f       	add	r30, r18
    25e0:	f3 1f       	adc	r31, r19
    25e2:	70 81       	ld	r23, Z
    25e4:	f8 01       	movw	r30, r16
    25e6:	e1 59       	subi	r30, 0x91	; 145
    25e8:	f9 4f       	sbci	r31, 0xF9	; 249
    25ea:	90 81       	ld	r25, Z
    25ec:	79 13       	cpse	r23, r25
    25ee:	28 c0       	rjmp	.+80     	; 0x2640 <MQTT_StringSeperate+0xa4>
				{
					count++;
    25f0:	8f ef       	ldi	r24, 0xFF	; 255
    25f2:	e8 1a       	sub	r14, r24
    25f4:	f8 0a       	sbc	r15, r24
					if(count == findlen)
    25f6:	ae 15       	cp	r26, r14
    25f8:	bf 05       	cpc	r27, r15
    25fa:	c1 f4       	brne	.+48     	; 0x262c <MQTT_StringSeperate+0x90>
					{
						temp = temp+1;
    25fc:	0f 5f       	subi	r16, 0xFF	; 255
    25fe:	1f 4f       	sbci	r17, 0xFF	; 255
						count = 0;
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
						for(i = temp;SubscribeDataBuff[i]!=endpoint;i++)
    2604:	08 c0       	rjmp	.+16     	; 0x2616 <MQTT_StringSeperate+0x7a>
						{
							arr[count] = SubscribeDataBuff[i];
    2606:	f9 01       	movw	r30, r18
    2608:	ea 5e       	subi	r30, 0xEA	; 234
    260a:	fb 4f       	sbci	r31, 0xFB	; 251
    260c:	80 83       	st	Z, r24
							count++;
    260e:	2f 5f       	subi	r18, 0xFF	; 255
    2610:	3f 4f       	sbci	r19, 0xFF	; 255
					count++;
					if(count == findlen)
					{
						temp = temp+1;
						count = 0;
						for(i = temp;SubscribeDataBuff[i]!=endpoint;i++)
    2612:	0f 5f       	subi	r16, 0xFF	; 255
    2614:	1f 4f       	sbci	r17, 0xFF	; 255
    2616:	f8 01       	movw	r30, r16
    2618:	e1 59       	subi	r30, 0x91	; 145
    261a:	f9 4f       	sbci	r31, 0xF9	; 249
    261c:	80 81       	ld	r24, Z
    261e:	86 13       	cpse	r24, r22
    2620:	f2 cf       	rjmp	.-28     	; 0x2606 <MQTT_StringSeperate+0x6a>
						{
							arr[count] = SubscribeDataBuff[i];
							count++;
						}
						return atoi(arr);
    2622:	86 e1       	ldi	r24, 0x16	; 22
    2624:	94 e0       	ldi	r25, 0x04	; 4
    2626:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <atoi>
    262a:	19 c0       	rjmp	.+50     	; 0x265e <MQTT_StringSeperate+0xc2>
						break;
					}
					j++;
    262c:	2f 5f       	subi	r18, 0xFF	; 255
    262e:	3f 4f       	sbci	r19, 0xFF	; 255
					temp++;
    2630:	0f 5f       	subi	r16, 0xFF	; 255
    2632:	1f 4f       	sbci	r17, 0xFF	; 255
    2634:	05 c0       	rjmp	.+10     	; 0x2640 <MQTT_StringSeperate+0xa4>
    2636:	8a 01       	movw	r16, r20
    2638:	e1 2c       	mov	r14, r1
    263a:	f1 2c       	mov	r15, r1
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
	{
		j = 0;
		if(SubscribeDataBuff[i] == str[0] && SubscribeDataBuff[i+1] == str[1])
		{
			temp = i;
			while(j<findlen)
    2640:	2a 17       	cp	r18, r26
    2642:	3b 07       	cpc	r19, r27
    2644:	5c f2       	brlt	.-106    	; 0x25dc <MQTT_StringSeperate+0x40>
UBYTE MQTT_StringSeperate(char *str,char endpoint)
{
	static char arr[5];
	int i,j,findlen,count = 0,temp;
	findlen = strlen(str);
	for(i = 0;i<SIMCOM_ResponseLength-findlen;i++)
    2646:	4f 5f       	subi	r20, 0xFF	; 255
    2648:	5f 4f       	sbci	r21, 0xFF	; 255
    264a:	20 91 0d 04 	lds	r18, 0x040D	; 0x80040d <SIMCOM_ResponseLength>
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	2a 1b       	sub	r18, r26
    2652:	3b 0b       	sbc	r19, r27
    2654:	42 17       	cp	r20, r18
    2656:	53 07       	cpc	r21, r19
    2658:	0c f4       	brge	.+2      	; 0x265c <MQTT_StringSeperate+0xc0>
    265a:	b1 cf       	rjmp	.-158    	; 0x25be <MQTT_StringSeperate+0x22>
			}
		}
		count=0;
	}
	
	return 0;
    265c:	80 e0       	ldi	r24, 0x00	; 0
}
    265e:	df 91       	pop	r29
    2660:	cf 91       	pop	r28
    2662:	1f 91       	pop	r17
    2664:	0f 91       	pop	r16
    2666:	ff 90       	pop	r15
    2668:	ef 90       	pop	r14
    266a:	08 95       	ret

0000266c <MQTT_AppMain>:


void MQTT_AppMain()
{
    266c:	1f 93       	push	r17
    266e:	cf 93       	push	r28
    2670:	df 93       	push	r29
    2672:	cd b7       	in	r28, 0x3d	; 61
    2674:	de b7       	in	r29, 0x3e	; 62
    2676:	2a 97       	sbiw	r28, 0x0a	; 10
    2678:	0f b6       	in	r0, 0x3f	; 63
    267a:	f8 94       	cli
    267c:	de bf       	out	0x3e, r29	; 62
    267e:	0f be       	out	0x3f, r0	; 63
    2680:	cd bf       	out	0x3d, r28	; 61
	switch(MQTTApp_State)
    2682:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <MQTTApp_State>
    2686:	83 30       	cpi	r24, 0x03	; 3
    2688:	d1 f0       	breq	.+52     	; 0x26be <MQTT_AppMain+0x52>
    268a:	18 f4       	brcc	.+6      	; 0x2692 <MQTT_AppMain+0x26>
    268c:	88 23       	and	r24, r24
    268e:	41 f0       	breq	.+16     	; 0x26a0 <MQTT_AppMain+0x34>
    2690:	6a c0       	rjmp	.+212    	; 0x2766 <MQTT_AppMain+0xfa>
    2692:	84 30       	cpi	r24, 0x04	; 4
    2694:	09 f4       	brne	.+2      	; 0x2698 <MQTT_AppMain+0x2c>
    2696:	5f c0       	rjmp	.+190    	; 0x2756 <MQTT_AppMain+0xea>
    2698:	85 30       	cpi	r24, 0x05	; 5
    269a:	09 f4       	brne	.+2      	; 0x269e <MQTT_AppMain+0x32>
    269c:	53 c0       	rjmp	.+166    	; 0x2744 <MQTT_AppMain+0xd8>
    269e:	63 c0       	rjmp	.+198    	; 0x2766 <MQTT_AppMain+0xfa>
			
		}
		break;
		case MQTTApp_Init:
		{
			if(IsMQTT_Ready())
    26a0:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <MQTT_State>
    26a4:	8d 30       	cpi	r24, 0x0D	; 13
    26a6:	09 f0       	breq	.+2      	; 0x26aa <MQTT_AppMain+0x3e>
    26a8:	5e c0       	rjmp	.+188    	; 0x2766 <MQTT_AppMain+0xfa>
			{
				UpdatePublishdata(255);
    26aa:	8f ef       	ldi	r24, 0xFF	; 255
    26ac:	0e 94 b3 12 	call	0x2566	; 0x2566 <UpdatePublishdata>
				Publish_State = MQTT_PublishTopic_Config;
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <Publish_State>
				MQTTApp_State = MQTTApp_SubMessageHandling;
    26b6:	83 e0       	ldi	r24, 0x03	; 3
    26b8:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <MQTTApp_State>
    26bc:	54 c0       	rjmp	.+168    	; 0x2766 <MQTT_AppMain+0xfa>
			}
		}
		break;
		case MQTTApp_SubMessageHandling:
		{
			if(IsSubscribeMsgRecieved == TRUE)
    26be:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <IsSubscribeMsgRecieved>
    26c2:	81 30       	cpi	r24, 0x01	; 1
    26c4:	09 f0       	breq	.+2      	; 0x26c8 <MQTT_AppMain+0x5c>
    26c6:	4f c0       	rjmp	.+158    	; 0x2766 <MQTT_AppMain+0xfa>
			{
				IsSubscribeMsgRecieved = FALSE;
    26c8:	10 92 1b 04 	sts	0x041B, r1	; 0x80041b <IsSubscribeMsgRecieved>
				UBYTE cmd = MQTT_StringSeperate("\"cmd\":",'\"');
    26cc:	62 e2       	ldi	r22, 0x22	; 34
    26ce:	8c ef       	ldi	r24, 0xFC	; 252
    26d0:	93 e0       	ldi	r25, 0x03	; 3
    26d2:	0e 94 ce 12 	call	0x259c	; 0x259c <MQTT_StringSeperate>
    26d6:	18 2f       	mov	r17, r24
				char temp[5];
				sprintf(temp,"%d",cmd);
    26d8:	1f 92       	push	r1
    26da:	8f 93       	push	r24
    26dc:	83 e1       	ldi	r24, 0x13	; 19
    26de:	93 e0       	ldi	r25, 0x03	; 3
    26e0:	9f 93       	push	r25
    26e2:	8f 93       	push	r24
    26e4:	ce 01       	movw	r24, r28
    26e6:	06 96       	adiw	r24, 0x06	; 6
    26e8:	9f 93       	push	r25
    26ea:	8f 93       	push	r24
    26ec:	0e 94 48 14 	call	0x2890	; 0x2890 <sprintf>
				temp[4] = '\0';
    26f0:	1a 86       	std	Y+10, r1	; 0x0a
				//DebugStringRow2(temp);
				if (cmd == 255)
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	0f 90       	pop	r0
    26f8:	0f 90       	pop	r0
    26fa:	0f 90       	pop	r0
    26fc:	0f 90       	pop	r0
    26fe:	1f 3f       	cpi	r17, 0xFF	; 255
    2700:	21 f4       	brne	.+8      	; 0x270a <MQTT_AppMain+0x9e>
				{
					MQTTApp_State = MQTTApp_UpdateBeforeIdle;
    2702:	85 e0       	ldi	r24, 0x05	; 5
    2704:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <MQTTApp_State>
    2708:	05 c0       	rjmp	.+10     	; 0x2714 <MQTT_AppMain+0xa8>
				}
				else if (cmd == 1)
    270a:	11 30       	cpi	r17, 0x01	; 1
    270c:	19 f4       	brne	.+6      	; 0x2714 <MQTT_AppMain+0xa8>
				{
					MQTTApp_State = MQTTApp_ReplyMsg;
    270e:	84 e0       	ldi	r24, 0x04	; 4
    2710:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <MQTTApp_State>
				{
					//Invalid data received Error
				//	PORTA = 0X00;
				//	DebugStringRow1("error");
				}
				UBYTE IO_Control = MQTT_StringSeperate("\"m1\":",'}');
    2714:	6d e7       	ldi	r22, 0x7D	; 125
    2716:	83 e0       	ldi	r24, 0x03	; 3
    2718:	94 e0       	ldi	r25, 0x04	; 4
    271a:	0e 94 ce 12 	call	0x259c	; 0x259c <MQTT_StringSeperate>
				
				char temp2[5];
				sprintf(temp2,"%d",IO_Control);
    271e:	1f 92       	push	r1
    2720:	8f 93       	push	r24
    2722:	83 e1       	ldi	r24, 0x13	; 19
    2724:	93 e0       	ldi	r25, 0x03	; 3
    2726:	9f 93       	push	r25
    2728:	8f 93       	push	r24
    272a:	ce 01       	movw	r24, r28
    272c:	01 96       	adiw	r24, 0x01	; 1
    272e:	9f 93       	push	r25
    2730:	8f 93       	push	r24
    2732:	0e 94 48 14 	call	0x2890	; 0x2890 <sprintf>
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	0f 90       	pop	r0
    273c:	0f 90       	pop	r0
    273e:	0f 90       	pop	r0
    2740:	0f 90       	pop	r0
    2742:	11 c0       	rjmp	.+34     	; 0x2766 <MQTT_AppMain+0xfa>
			}
		}
		break;
		case MQTTApp_UpdateBeforeIdle:
		{
			UpdatePublishdata(0);
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	0e 94 b3 12 	call	0x2566	; 0x2566 <UpdatePublishdata>
			Publish_State = MQTT_PublishTopic_Config;
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <Publish_State>
			MQTTApp_State = MQTTApp_Idle;
    2750:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <MQTTApp_State>
		}
		break;
    2754:	08 c0       	rjmp	.+16     	; 0x2766 <MQTT_AppMain+0xfa>
		case MQTTApp_ReplyMsg:
		{
			UpdatePublishdata(1);
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	0e 94 b3 12 	call	0x2566	; 0x2566 <UpdatePublishdata>
			Publish_State = MQTT_PublishTopic_Config;
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <Publish_State>
			MQTTApp_State = MQTTApp_Idle;
    2762:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <MQTTApp_State>
		{
			//do Nothing
			break;
		}
	}
}
    2766:	2a 96       	adiw	r28, 0x0a	; 10
    2768:	0f b6       	in	r0, 0x3f	; 63
    276a:	f8 94       	cli
    276c:	de bf       	out	0x3e, r29	; 62
    276e:	0f be       	out	0x3f, r0	; 63
    2770:	cd bf       	out	0x3d, r28	; 61
    2772:	df 91       	pop	r29
    2774:	cf 91       	pop	r28
    2776:	1f 91       	pop	r17
    2778:	08 95       	ret

0000277a <PRC_SYSOS_TASK_INIT>:
    277a:	0e 94 50 07 	call	0xea0	; 0xea0 <SIMCOM_Init>
    277e:	0e 94 94 00 	call	0x128	; 0x128 <UART_init>
    2782:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Avr_Init>
    2786:	0e 94 8b 06 	call	0xd16	; 0xd16 <LCD_Init>
    278a:	0e 94 61 00 	call	0xc2	; 0xc2 <TIM1_Init>
    278e:	08 95       	ret

00002790 <PRC_SYSOS_TASK_X100>:
    2790:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <SIMCOM_MainFunction>
    2794:	08 95       	ret

00002796 <FUN_SYS_Internal_Init>:
    2796:	0e 94 bd 13 	call	0x277a	; 0x277a <PRC_SYSOS_TASK_INIT>
    279a:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <SysOS_Ctrl>
    279e:	84 60       	ori	r24, 0x04	; 4
    27a0:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <SysOS_Ctrl>
    27a4:	08 95       	ret

000027a6 <FUN_SYS_Internal_Evaluate_Tasks_x1>:
    27a6:	08 95       	ret

000027a8 <FUN_SYS_Internal_Execute_Tasks>:
    27a8:	0e 94 c8 13 	call	0x2790	; 0x2790 <PRC_SYSOS_TASK_X100>
    27ac:	08 95       	ret

000027ae <main>:
    27ae:	0e 94 b9 0c 	call	0x1972	; 0x1972 <SysOs_Main>
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	08 95       	ret

000027b8 <__tablejump2__>:
    27b8:	ee 0f       	add	r30, r30
    27ba:	ff 1f       	adc	r31, r31
    27bc:	05 90       	lpm	r0, Z+
    27be:	f4 91       	lpm	r31, Z
    27c0:	e0 2d       	mov	r30, r0
    27c2:	09 94       	ijmp

000027c4 <atoi>:
    27c4:	fc 01       	movw	r30, r24
    27c6:	88 27       	eor	r24, r24
    27c8:	99 27       	eor	r25, r25
    27ca:	e8 94       	clt
    27cc:	21 91       	ld	r18, Z+
    27ce:	20 32       	cpi	r18, 0x20	; 32
    27d0:	e9 f3       	breq	.-6      	; 0x27cc <atoi+0x8>
    27d2:	29 30       	cpi	r18, 0x09	; 9
    27d4:	10 f0       	brcs	.+4      	; 0x27da <atoi+0x16>
    27d6:	2e 30       	cpi	r18, 0x0E	; 14
    27d8:	c8 f3       	brcs	.-14     	; 0x27cc <atoi+0x8>
    27da:	2b 32       	cpi	r18, 0x2B	; 43
    27dc:	41 f0       	breq	.+16     	; 0x27ee <atoi+0x2a>
    27de:	2d 32       	cpi	r18, 0x2D	; 45
    27e0:	39 f4       	brne	.+14     	; 0x27f0 <atoi+0x2c>
    27e2:	68 94       	set
    27e4:	04 c0       	rjmp	.+8      	; 0x27ee <atoi+0x2a>
    27e6:	0e 94 40 14 	call	0x2880	; 0x2880 <__mulhi_const_10>
    27ea:	82 0f       	add	r24, r18
    27ec:	91 1d       	adc	r25, r1
    27ee:	21 91       	ld	r18, Z+
    27f0:	20 53       	subi	r18, 0x30	; 48
    27f2:	2a 30       	cpi	r18, 0x0A	; 10
    27f4:	c0 f3       	brcs	.-16     	; 0x27e6 <atoi+0x22>
    27f6:	1e f4       	brtc	.+6      	; 0x27fe <atoi+0x3a>
    27f8:	90 95       	com	r25
    27fa:	81 95       	neg	r24
    27fc:	9f 4f       	sbci	r25, 0xFF	; 255
    27fe:	08 95       	ret

00002800 <memcmp>:
    2800:	fb 01       	movw	r30, r22
    2802:	dc 01       	movw	r26, r24
    2804:	04 c0       	rjmp	.+8      	; 0x280e <memcmp+0xe>
    2806:	8d 91       	ld	r24, X+
    2808:	01 90       	ld	r0, Z+
    280a:	80 19       	sub	r24, r0
    280c:	21 f4       	brne	.+8      	; 0x2816 <memcmp+0x16>
    280e:	41 50       	subi	r20, 0x01	; 1
    2810:	50 40       	sbci	r21, 0x00	; 0
    2812:	c8 f7       	brcc	.-14     	; 0x2806 <memcmp+0x6>
    2814:	88 1b       	sub	r24, r24
    2816:	99 0b       	sbc	r25, r25
    2818:	08 95       	ret

0000281a <memcpy>:
    281a:	fb 01       	movw	r30, r22
    281c:	dc 01       	movw	r26, r24
    281e:	02 c0       	rjmp	.+4      	; 0x2824 <memcpy+0xa>
    2820:	01 90       	ld	r0, Z+
    2822:	0d 92       	st	X+, r0
    2824:	41 50       	subi	r20, 0x01	; 1
    2826:	50 40       	sbci	r21, 0x00	; 0
    2828:	d8 f7       	brcc	.-10     	; 0x2820 <memcpy+0x6>
    282a:	08 95       	ret

0000282c <strcmp>:
    282c:	fb 01       	movw	r30, r22
    282e:	dc 01       	movw	r26, r24
    2830:	8d 91       	ld	r24, X+
    2832:	01 90       	ld	r0, Z+
    2834:	80 19       	sub	r24, r0
    2836:	01 10       	cpse	r0, r1
    2838:	d9 f3       	breq	.-10     	; 0x2830 <strcmp+0x4>
    283a:	99 0b       	sbc	r25, r25
    283c:	08 95       	ret

0000283e <strcpy>:
    283e:	fb 01       	movw	r30, r22
    2840:	dc 01       	movw	r26, r24
    2842:	01 90       	ld	r0, Z+
    2844:	0d 92       	st	X+, r0
    2846:	00 20       	and	r0, r0
    2848:	e1 f7       	brne	.-8      	; 0x2842 <strcpy+0x4>
    284a:	08 95       	ret

0000284c <strstr>:
    284c:	fb 01       	movw	r30, r22
    284e:	51 91       	ld	r21, Z+
    2850:	55 23       	and	r21, r21
    2852:	a9 f0       	breq	.+42     	; 0x287e <strstr+0x32>
    2854:	bf 01       	movw	r22, r30
    2856:	dc 01       	movw	r26, r24
    2858:	4d 91       	ld	r20, X+
    285a:	45 17       	cp	r20, r21
    285c:	41 11       	cpse	r20, r1
    285e:	e1 f7       	brne	.-8      	; 0x2858 <strstr+0xc>
    2860:	59 f4       	brne	.+22     	; 0x2878 <strstr+0x2c>
    2862:	cd 01       	movw	r24, r26
    2864:	01 90       	ld	r0, Z+
    2866:	00 20       	and	r0, r0
    2868:	49 f0       	breq	.+18     	; 0x287c <strstr+0x30>
    286a:	4d 91       	ld	r20, X+
    286c:	40 15       	cp	r20, r0
    286e:	41 11       	cpse	r20, r1
    2870:	c9 f3       	breq	.-14     	; 0x2864 <strstr+0x18>
    2872:	fb 01       	movw	r30, r22
    2874:	41 11       	cpse	r20, r1
    2876:	ef cf       	rjmp	.-34     	; 0x2856 <strstr+0xa>
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	01 97       	sbiw	r24, 0x01	; 1
    287e:	08 95       	ret

00002880 <__mulhi_const_10>:
    2880:	7a e0       	ldi	r23, 0x0A	; 10
    2882:	97 9f       	mul	r25, r23
    2884:	90 2d       	mov	r25, r0
    2886:	87 9f       	mul	r24, r23
    2888:	80 2d       	mov	r24, r0
    288a:	91 0d       	add	r25, r1
    288c:	11 24       	eor	r1, r1
    288e:	08 95       	ret

00002890 <sprintf>:
    2890:	ae e0       	ldi	r26, 0x0E	; 14
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	ee e4       	ldi	r30, 0x4E	; 78
    2896:	f4 e1       	ldi	r31, 0x14	; 20
    2898:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <__prologue_saves__+0x1c>
    289c:	0d 89       	ldd	r16, Y+21	; 0x15
    289e:	1e 89       	ldd	r17, Y+22	; 0x16
    28a0:	86 e0       	ldi	r24, 0x06	; 6
    28a2:	8c 83       	std	Y+4, r24	; 0x04
    28a4:	1a 83       	std	Y+2, r17	; 0x02
    28a6:	09 83       	std	Y+1, r16	; 0x01
    28a8:	8f ef       	ldi	r24, 0xFF	; 255
    28aa:	9f e7       	ldi	r25, 0x7F	; 127
    28ac:	9e 83       	std	Y+6, r25	; 0x06
    28ae:	8d 83       	std	Y+5, r24	; 0x05
    28b0:	ae 01       	movw	r20, r28
    28b2:	47 5e       	subi	r20, 0xE7	; 231
    28b4:	5f 4f       	sbci	r21, 0xFF	; 255
    28b6:	6f 89       	ldd	r22, Y+23	; 0x17
    28b8:	78 8d       	ldd	r23, Y+24	; 0x18
    28ba:	ce 01       	movw	r24, r28
    28bc:	01 96       	adiw	r24, 0x01	; 1
    28be:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <vfprintf>
    28c2:	ef 81       	ldd	r30, Y+7	; 0x07
    28c4:	f8 85       	ldd	r31, Y+8	; 0x08
    28c6:	e0 0f       	add	r30, r16
    28c8:	f1 1f       	adc	r31, r17
    28ca:	10 82       	st	Z, r1
    28cc:	2e 96       	adiw	r28, 0x0e	; 14
    28ce:	e4 e0       	ldi	r30, 0x04	; 4
    28d0:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <__epilogue_restores__+0x1c>

000028d4 <vfprintf>:
    28d4:	ab e0       	ldi	r26, 0x0B	; 11
    28d6:	b0 e0       	ldi	r27, 0x00	; 0
    28d8:	e0 e7       	ldi	r30, 0x70	; 112
    28da:	f4 e1       	ldi	r31, 0x14	; 20
    28dc:	0c 94 fb 16 	jmp	0x2df6	; 0x2df6 <__prologue_saves__>
    28e0:	6c 01       	movw	r12, r24
    28e2:	7b 01       	movw	r14, r22
    28e4:	8a 01       	movw	r16, r20
    28e6:	fc 01       	movw	r30, r24
    28e8:	17 82       	std	Z+7, r1	; 0x07
    28ea:	16 82       	std	Z+6, r1	; 0x06
    28ec:	83 81       	ldd	r24, Z+3	; 0x03
    28ee:	81 ff       	sbrs	r24, 1
    28f0:	cc c1       	rjmp	.+920    	; 0x2c8a <vfprintf+0x3b6>
    28f2:	ce 01       	movw	r24, r28
    28f4:	01 96       	adiw	r24, 0x01	; 1
    28f6:	3c 01       	movw	r6, r24
    28f8:	f6 01       	movw	r30, r12
    28fa:	93 81       	ldd	r25, Z+3	; 0x03
    28fc:	f7 01       	movw	r30, r14
    28fe:	93 fd       	sbrc	r25, 3
    2900:	85 91       	lpm	r24, Z+
    2902:	93 ff       	sbrs	r25, 3
    2904:	81 91       	ld	r24, Z+
    2906:	7f 01       	movw	r14, r30
    2908:	88 23       	and	r24, r24
    290a:	09 f4       	brne	.+2      	; 0x290e <vfprintf+0x3a>
    290c:	ba c1       	rjmp	.+884    	; 0x2c82 <vfprintf+0x3ae>
    290e:	85 32       	cpi	r24, 0x25	; 37
    2910:	39 f4       	brne	.+14     	; 0x2920 <vfprintf+0x4c>
    2912:	93 fd       	sbrc	r25, 3
    2914:	85 91       	lpm	r24, Z+
    2916:	93 ff       	sbrs	r25, 3
    2918:	81 91       	ld	r24, Z+
    291a:	7f 01       	movw	r14, r30
    291c:	85 32       	cpi	r24, 0x25	; 37
    291e:	29 f4       	brne	.+10     	; 0x292a <vfprintf+0x56>
    2920:	b6 01       	movw	r22, r12
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <fputc>
    2928:	e7 cf       	rjmp	.-50     	; 0x28f8 <vfprintf+0x24>
    292a:	91 2c       	mov	r9, r1
    292c:	21 2c       	mov	r2, r1
    292e:	31 2c       	mov	r3, r1
    2930:	ff e1       	ldi	r31, 0x1F	; 31
    2932:	f3 15       	cp	r31, r3
    2934:	d8 f0       	brcs	.+54     	; 0x296c <vfprintf+0x98>
    2936:	8b 32       	cpi	r24, 0x2B	; 43
    2938:	79 f0       	breq	.+30     	; 0x2958 <vfprintf+0x84>
    293a:	38 f4       	brcc	.+14     	; 0x294a <vfprintf+0x76>
    293c:	80 32       	cpi	r24, 0x20	; 32
    293e:	79 f0       	breq	.+30     	; 0x295e <vfprintf+0x8a>
    2940:	83 32       	cpi	r24, 0x23	; 35
    2942:	a1 f4       	brne	.+40     	; 0x296c <vfprintf+0x98>
    2944:	23 2d       	mov	r18, r3
    2946:	20 61       	ori	r18, 0x10	; 16
    2948:	1d c0       	rjmp	.+58     	; 0x2984 <vfprintf+0xb0>
    294a:	8d 32       	cpi	r24, 0x2D	; 45
    294c:	61 f0       	breq	.+24     	; 0x2966 <vfprintf+0x92>
    294e:	80 33       	cpi	r24, 0x30	; 48
    2950:	69 f4       	brne	.+26     	; 0x296c <vfprintf+0x98>
    2952:	23 2d       	mov	r18, r3
    2954:	21 60       	ori	r18, 0x01	; 1
    2956:	16 c0       	rjmp	.+44     	; 0x2984 <vfprintf+0xb0>
    2958:	83 2d       	mov	r24, r3
    295a:	82 60       	ori	r24, 0x02	; 2
    295c:	38 2e       	mov	r3, r24
    295e:	e3 2d       	mov	r30, r3
    2960:	e4 60       	ori	r30, 0x04	; 4
    2962:	3e 2e       	mov	r3, r30
    2964:	2a c0       	rjmp	.+84     	; 0x29ba <vfprintf+0xe6>
    2966:	f3 2d       	mov	r31, r3
    2968:	f8 60       	ori	r31, 0x08	; 8
    296a:	1d c0       	rjmp	.+58     	; 0x29a6 <vfprintf+0xd2>
    296c:	37 fc       	sbrc	r3, 7
    296e:	2d c0       	rjmp	.+90     	; 0x29ca <vfprintf+0xf6>
    2970:	20 ed       	ldi	r18, 0xD0	; 208
    2972:	28 0f       	add	r18, r24
    2974:	2a 30       	cpi	r18, 0x0A	; 10
    2976:	40 f0       	brcs	.+16     	; 0x2988 <vfprintf+0xb4>
    2978:	8e 32       	cpi	r24, 0x2E	; 46
    297a:	b9 f4       	brne	.+46     	; 0x29aa <vfprintf+0xd6>
    297c:	36 fc       	sbrc	r3, 6
    297e:	81 c1       	rjmp	.+770    	; 0x2c82 <vfprintf+0x3ae>
    2980:	23 2d       	mov	r18, r3
    2982:	20 64       	ori	r18, 0x40	; 64
    2984:	32 2e       	mov	r3, r18
    2986:	19 c0       	rjmp	.+50     	; 0x29ba <vfprintf+0xe6>
    2988:	36 fe       	sbrs	r3, 6
    298a:	06 c0       	rjmp	.+12     	; 0x2998 <vfprintf+0xc4>
    298c:	8a e0       	ldi	r24, 0x0A	; 10
    298e:	98 9e       	mul	r9, r24
    2990:	20 0d       	add	r18, r0
    2992:	11 24       	eor	r1, r1
    2994:	92 2e       	mov	r9, r18
    2996:	11 c0       	rjmp	.+34     	; 0x29ba <vfprintf+0xe6>
    2998:	ea e0       	ldi	r30, 0x0A	; 10
    299a:	2e 9e       	mul	r2, r30
    299c:	20 0d       	add	r18, r0
    299e:	11 24       	eor	r1, r1
    29a0:	22 2e       	mov	r2, r18
    29a2:	f3 2d       	mov	r31, r3
    29a4:	f0 62       	ori	r31, 0x20	; 32
    29a6:	3f 2e       	mov	r3, r31
    29a8:	08 c0       	rjmp	.+16     	; 0x29ba <vfprintf+0xe6>
    29aa:	8c 36       	cpi	r24, 0x6C	; 108
    29ac:	21 f4       	brne	.+8      	; 0x29b6 <vfprintf+0xe2>
    29ae:	83 2d       	mov	r24, r3
    29b0:	80 68       	ori	r24, 0x80	; 128
    29b2:	38 2e       	mov	r3, r24
    29b4:	02 c0       	rjmp	.+4      	; 0x29ba <vfprintf+0xe6>
    29b6:	88 36       	cpi	r24, 0x68	; 104
    29b8:	41 f4       	brne	.+16     	; 0x29ca <vfprintf+0xf6>
    29ba:	f7 01       	movw	r30, r14
    29bc:	93 fd       	sbrc	r25, 3
    29be:	85 91       	lpm	r24, Z+
    29c0:	93 ff       	sbrs	r25, 3
    29c2:	81 91       	ld	r24, Z+
    29c4:	7f 01       	movw	r14, r30
    29c6:	81 11       	cpse	r24, r1
    29c8:	b3 cf       	rjmp	.-154    	; 0x2930 <vfprintf+0x5c>
    29ca:	98 2f       	mov	r25, r24
    29cc:	9f 7d       	andi	r25, 0xDF	; 223
    29ce:	95 54       	subi	r25, 0x45	; 69
    29d0:	93 30       	cpi	r25, 0x03	; 3
    29d2:	28 f4       	brcc	.+10     	; 0x29de <vfprintf+0x10a>
    29d4:	0c 5f       	subi	r16, 0xFC	; 252
    29d6:	1f 4f       	sbci	r17, 0xFF	; 255
    29d8:	9f e3       	ldi	r25, 0x3F	; 63
    29da:	99 83       	std	Y+1, r25	; 0x01
    29dc:	0d c0       	rjmp	.+26     	; 0x29f8 <vfprintf+0x124>
    29de:	83 36       	cpi	r24, 0x63	; 99
    29e0:	31 f0       	breq	.+12     	; 0x29ee <vfprintf+0x11a>
    29e2:	83 37       	cpi	r24, 0x73	; 115
    29e4:	71 f0       	breq	.+28     	; 0x2a02 <vfprintf+0x12e>
    29e6:	83 35       	cpi	r24, 0x53	; 83
    29e8:	09 f0       	breq	.+2      	; 0x29ec <vfprintf+0x118>
    29ea:	59 c0       	rjmp	.+178    	; 0x2a9e <vfprintf+0x1ca>
    29ec:	21 c0       	rjmp	.+66     	; 0x2a30 <vfprintf+0x15c>
    29ee:	f8 01       	movw	r30, r16
    29f0:	80 81       	ld	r24, Z
    29f2:	89 83       	std	Y+1, r24	; 0x01
    29f4:	0e 5f       	subi	r16, 0xFE	; 254
    29f6:	1f 4f       	sbci	r17, 0xFF	; 255
    29f8:	88 24       	eor	r8, r8
    29fa:	83 94       	inc	r8
    29fc:	91 2c       	mov	r9, r1
    29fe:	53 01       	movw	r10, r6
    2a00:	13 c0       	rjmp	.+38     	; 0x2a28 <vfprintf+0x154>
    2a02:	28 01       	movw	r4, r16
    2a04:	f2 e0       	ldi	r31, 0x02	; 2
    2a06:	4f 0e       	add	r4, r31
    2a08:	51 1c       	adc	r5, r1
    2a0a:	f8 01       	movw	r30, r16
    2a0c:	a0 80       	ld	r10, Z
    2a0e:	b1 80       	ldd	r11, Z+1	; 0x01
    2a10:	36 fe       	sbrs	r3, 6
    2a12:	03 c0       	rjmp	.+6      	; 0x2a1a <vfprintf+0x146>
    2a14:	69 2d       	mov	r22, r9
    2a16:	70 e0       	ldi	r23, 0x00	; 0
    2a18:	02 c0       	rjmp	.+4      	; 0x2a1e <vfprintf+0x14a>
    2a1a:	6f ef       	ldi	r22, 0xFF	; 255
    2a1c:	7f ef       	ldi	r23, 0xFF	; 255
    2a1e:	c5 01       	movw	r24, r10
    2a20:	0e 94 56 16 	call	0x2cac	; 0x2cac <strnlen>
    2a24:	4c 01       	movw	r8, r24
    2a26:	82 01       	movw	r16, r4
    2a28:	f3 2d       	mov	r31, r3
    2a2a:	ff 77       	andi	r31, 0x7F	; 127
    2a2c:	3f 2e       	mov	r3, r31
    2a2e:	16 c0       	rjmp	.+44     	; 0x2a5c <vfprintf+0x188>
    2a30:	28 01       	movw	r4, r16
    2a32:	22 e0       	ldi	r18, 0x02	; 2
    2a34:	42 0e       	add	r4, r18
    2a36:	51 1c       	adc	r5, r1
    2a38:	f8 01       	movw	r30, r16
    2a3a:	a0 80       	ld	r10, Z
    2a3c:	b1 80       	ldd	r11, Z+1	; 0x01
    2a3e:	36 fe       	sbrs	r3, 6
    2a40:	03 c0       	rjmp	.+6      	; 0x2a48 <vfprintf+0x174>
    2a42:	69 2d       	mov	r22, r9
    2a44:	70 e0       	ldi	r23, 0x00	; 0
    2a46:	02 c0       	rjmp	.+4      	; 0x2a4c <vfprintf+0x178>
    2a48:	6f ef       	ldi	r22, 0xFF	; 255
    2a4a:	7f ef       	ldi	r23, 0xFF	; 255
    2a4c:	c5 01       	movw	r24, r10
    2a4e:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <strnlen_P>
    2a52:	4c 01       	movw	r8, r24
    2a54:	f3 2d       	mov	r31, r3
    2a56:	f0 68       	ori	r31, 0x80	; 128
    2a58:	3f 2e       	mov	r3, r31
    2a5a:	82 01       	movw	r16, r4
    2a5c:	33 fc       	sbrc	r3, 3
    2a5e:	1b c0       	rjmp	.+54     	; 0x2a96 <vfprintf+0x1c2>
    2a60:	82 2d       	mov	r24, r2
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	88 16       	cp	r8, r24
    2a66:	99 06       	cpc	r9, r25
    2a68:	b0 f4       	brcc	.+44     	; 0x2a96 <vfprintf+0x1c2>
    2a6a:	b6 01       	movw	r22, r12
    2a6c:	80 e2       	ldi	r24, 0x20	; 32
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <fputc>
    2a74:	2a 94       	dec	r2
    2a76:	f4 cf       	rjmp	.-24     	; 0x2a60 <vfprintf+0x18c>
    2a78:	f5 01       	movw	r30, r10
    2a7a:	37 fc       	sbrc	r3, 7
    2a7c:	85 91       	lpm	r24, Z+
    2a7e:	37 fe       	sbrs	r3, 7
    2a80:	81 91       	ld	r24, Z+
    2a82:	5f 01       	movw	r10, r30
    2a84:	b6 01       	movw	r22, r12
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <fputc>
    2a8c:	21 10       	cpse	r2, r1
    2a8e:	2a 94       	dec	r2
    2a90:	21 e0       	ldi	r18, 0x01	; 1
    2a92:	82 1a       	sub	r8, r18
    2a94:	91 08       	sbc	r9, r1
    2a96:	81 14       	cp	r8, r1
    2a98:	91 04       	cpc	r9, r1
    2a9a:	71 f7       	brne	.-36     	; 0x2a78 <vfprintf+0x1a4>
    2a9c:	e8 c0       	rjmp	.+464    	; 0x2c6e <vfprintf+0x39a>
    2a9e:	84 36       	cpi	r24, 0x64	; 100
    2aa0:	11 f0       	breq	.+4      	; 0x2aa6 <vfprintf+0x1d2>
    2aa2:	89 36       	cpi	r24, 0x69	; 105
    2aa4:	41 f5       	brne	.+80     	; 0x2af6 <vfprintf+0x222>
    2aa6:	f8 01       	movw	r30, r16
    2aa8:	37 fe       	sbrs	r3, 7
    2aaa:	07 c0       	rjmp	.+14     	; 0x2aba <vfprintf+0x1e6>
    2aac:	60 81       	ld	r22, Z
    2aae:	71 81       	ldd	r23, Z+1	; 0x01
    2ab0:	82 81       	ldd	r24, Z+2	; 0x02
    2ab2:	93 81       	ldd	r25, Z+3	; 0x03
    2ab4:	0c 5f       	subi	r16, 0xFC	; 252
    2ab6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab8:	08 c0       	rjmp	.+16     	; 0x2aca <vfprintf+0x1f6>
    2aba:	60 81       	ld	r22, Z
    2abc:	71 81       	ldd	r23, Z+1	; 0x01
    2abe:	07 2e       	mov	r0, r23
    2ac0:	00 0c       	add	r0, r0
    2ac2:	88 0b       	sbc	r24, r24
    2ac4:	99 0b       	sbc	r25, r25
    2ac6:	0e 5f       	subi	r16, 0xFE	; 254
    2ac8:	1f 4f       	sbci	r17, 0xFF	; 255
    2aca:	f3 2d       	mov	r31, r3
    2acc:	ff 76       	andi	r31, 0x6F	; 111
    2ace:	3f 2e       	mov	r3, r31
    2ad0:	97 ff       	sbrs	r25, 7
    2ad2:	09 c0       	rjmp	.+18     	; 0x2ae6 <vfprintf+0x212>
    2ad4:	90 95       	com	r25
    2ad6:	80 95       	com	r24
    2ad8:	70 95       	com	r23
    2ada:	61 95       	neg	r22
    2adc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ade:	8f 4f       	sbci	r24, 0xFF	; 255
    2ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae2:	f0 68       	ori	r31, 0x80	; 128
    2ae4:	3f 2e       	mov	r3, r31
    2ae6:	2a e0       	ldi	r18, 0x0A	; 10
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	a3 01       	movw	r20, r6
    2aec:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <__ultoa_invert>
    2af0:	88 2e       	mov	r8, r24
    2af2:	86 18       	sub	r8, r6
    2af4:	45 c0       	rjmp	.+138    	; 0x2b80 <vfprintf+0x2ac>
    2af6:	85 37       	cpi	r24, 0x75	; 117
    2af8:	31 f4       	brne	.+12     	; 0x2b06 <vfprintf+0x232>
    2afa:	23 2d       	mov	r18, r3
    2afc:	2f 7e       	andi	r18, 0xEF	; 239
    2afe:	b2 2e       	mov	r11, r18
    2b00:	2a e0       	ldi	r18, 0x0A	; 10
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	25 c0       	rjmp	.+74     	; 0x2b50 <vfprintf+0x27c>
    2b06:	93 2d       	mov	r25, r3
    2b08:	99 7f       	andi	r25, 0xF9	; 249
    2b0a:	b9 2e       	mov	r11, r25
    2b0c:	8f 36       	cpi	r24, 0x6F	; 111
    2b0e:	c1 f0       	breq	.+48     	; 0x2b40 <vfprintf+0x26c>
    2b10:	18 f4       	brcc	.+6      	; 0x2b18 <vfprintf+0x244>
    2b12:	88 35       	cpi	r24, 0x58	; 88
    2b14:	79 f0       	breq	.+30     	; 0x2b34 <vfprintf+0x260>
    2b16:	b5 c0       	rjmp	.+362    	; 0x2c82 <vfprintf+0x3ae>
    2b18:	80 37       	cpi	r24, 0x70	; 112
    2b1a:	19 f0       	breq	.+6      	; 0x2b22 <vfprintf+0x24e>
    2b1c:	88 37       	cpi	r24, 0x78	; 120
    2b1e:	21 f0       	breq	.+8      	; 0x2b28 <vfprintf+0x254>
    2b20:	b0 c0       	rjmp	.+352    	; 0x2c82 <vfprintf+0x3ae>
    2b22:	e9 2f       	mov	r30, r25
    2b24:	e0 61       	ori	r30, 0x10	; 16
    2b26:	be 2e       	mov	r11, r30
    2b28:	b4 fe       	sbrs	r11, 4
    2b2a:	0d c0       	rjmp	.+26     	; 0x2b46 <vfprintf+0x272>
    2b2c:	fb 2d       	mov	r31, r11
    2b2e:	f4 60       	ori	r31, 0x04	; 4
    2b30:	bf 2e       	mov	r11, r31
    2b32:	09 c0       	rjmp	.+18     	; 0x2b46 <vfprintf+0x272>
    2b34:	34 fe       	sbrs	r3, 4
    2b36:	0a c0       	rjmp	.+20     	; 0x2b4c <vfprintf+0x278>
    2b38:	29 2f       	mov	r18, r25
    2b3a:	26 60       	ori	r18, 0x06	; 6
    2b3c:	b2 2e       	mov	r11, r18
    2b3e:	06 c0       	rjmp	.+12     	; 0x2b4c <vfprintf+0x278>
    2b40:	28 e0       	ldi	r18, 0x08	; 8
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	05 c0       	rjmp	.+10     	; 0x2b50 <vfprintf+0x27c>
    2b46:	20 e1       	ldi	r18, 0x10	; 16
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	02 c0       	rjmp	.+4      	; 0x2b50 <vfprintf+0x27c>
    2b4c:	20 e1       	ldi	r18, 0x10	; 16
    2b4e:	32 e0       	ldi	r19, 0x02	; 2
    2b50:	f8 01       	movw	r30, r16
    2b52:	b7 fe       	sbrs	r11, 7
    2b54:	07 c0       	rjmp	.+14     	; 0x2b64 <vfprintf+0x290>
    2b56:	60 81       	ld	r22, Z
    2b58:	71 81       	ldd	r23, Z+1	; 0x01
    2b5a:	82 81       	ldd	r24, Z+2	; 0x02
    2b5c:	93 81       	ldd	r25, Z+3	; 0x03
    2b5e:	0c 5f       	subi	r16, 0xFC	; 252
    2b60:	1f 4f       	sbci	r17, 0xFF	; 255
    2b62:	06 c0       	rjmp	.+12     	; 0x2b70 <vfprintf+0x29c>
    2b64:	60 81       	ld	r22, Z
    2b66:	71 81       	ldd	r23, Z+1	; 0x01
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	0e 5f       	subi	r16, 0xFE	; 254
    2b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b70:	a3 01       	movw	r20, r6
    2b72:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <__ultoa_invert>
    2b76:	88 2e       	mov	r8, r24
    2b78:	86 18       	sub	r8, r6
    2b7a:	fb 2d       	mov	r31, r11
    2b7c:	ff 77       	andi	r31, 0x7F	; 127
    2b7e:	3f 2e       	mov	r3, r31
    2b80:	36 fe       	sbrs	r3, 6
    2b82:	0d c0       	rjmp	.+26     	; 0x2b9e <vfprintf+0x2ca>
    2b84:	23 2d       	mov	r18, r3
    2b86:	2e 7f       	andi	r18, 0xFE	; 254
    2b88:	a2 2e       	mov	r10, r18
    2b8a:	89 14       	cp	r8, r9
    2b8c:	58 f4       	brcc	.+22     	; 0x2ba4 <vfprintf+0x2d0>
    2b8e:	34 fe       	sbrs	r3, 4
    2b90:	0b c0       	rjmp	.+22     	; 0x2ba8 <vfprintf+0x2d4>
    2b92:	32 fc       	sbrc	r3, 2
    2b94:	09 c0       	rjmp	.+18     	; 0x2ba8 <vfprintf+0x2d4>
    2b96:	83 2d       	mov	r24, r3
    2b98:	8e 7e       	andi	r24, 0xEE	; 238
    2b9a:	a8 2e       	mov	r10, r24
    2b9c:	05 c0       	rjmp	.+10     	; 0x2ba8 <vfprintf+0x2d4>
    2b9e:	b8 2c       	mov	r11, r8
    2ba0:	a3 2c       	mov	r10, r3
    2ba2:	03 c0       	rjmp	.+6      	; 0x2baa <vfprintf+0x2d6>
    2ba4:	b8 2c       	mov	r11, r8
    2ba6:	01 c0       	rjmp	.+2      	; 0x2baa <vfprintf+0x2d6>
    2ba8:	b9 2c       	mov	r11, r9
    2baa:	a4 fe       	sbrs	r10, 4
    2bac:	0f c0       	rjmp	.+30     	; 0x2bcc <vfprintf+0x2f8>
    2bae:	fe 01       	movw	r30, r28
    2bb0:	e8 0d       	add	r30, r8
    2bb2:	f1 1d       	adc	r31, r1
    2bb4:	80 81       	ld	r24, Z
    2bb6:	80 33       	cpi	r24, 0x30	; 48
    2bb8:	21 f4       	brne	.+8      	; 0x2bc2 <vfprintf+0x2ee>
    2bba:	9a 2d       	mov	r25, r10
    2bbc:	99 7e       	andi	r25, 0xE9	; 233
    2bbe:	a9 2e       	mov	r10, r25
    2bc0:	09 c0       	rjmp	.+18     	; 0x2bd4 <vfprintf+0x300>
    2bc2:	a2 fe       	sbrs	r10, 2
    2bc4:	06 c0       	rjmp	.+12     	; 0x2bd2 <vfprintf+0x2fe>
    2bc6:	b3 94       	inc	r11
    2bc8:	b3 94       	inc	r11
    2bca:	04 c0       	rjmp	.+8      	; 0x2bd4 <vfprintf+0x300>
    2bcc:	8a 2d       	mov	r24, r10
    2bce:	86 78       	andi	r24, 0x86	; 134
    2bd0:	09 f0       	breq	.+2      	; 0x2bd4 <vfprintf+0x300>
    2bd2:	b3 94       	inc	r11
    2bd4:	a3 fc       	sbrc	r10, 3
    2bd6:	11 c0       	rjmp	.+34     	; 0x2bfa <vfprintf+0x326>
    2bd8:	a0 fe       	sbrs	r10, 0
    2bda:	06 c0       	rjmp	.+12     	; 0x2be8 <vfprintf+0x314>
    2bdc:	b2 14       	cp	r11, r2
    2bde:	88 f4       	brcc	.+34     	; 0x2c02 <vfprintf+0x32e>
    2be0:	28 0c       	add	r2, r8
    2be2:	92 2c       	mov	r9, r2
    2be4:	9b 18       	sub	r9, r11
    2be6:	0e c0       	rjmp	.+28     	; 0x2c04 <vfprintf+0x330>
    2be8:	b2 14       	cp	r11, r2
    2bea:	60 f4       	brcc	.+24     	; 0x2c04 <vfprintf+0x330>
    2bec:	b6 01       	movw	r22, r12
    2bee:	80 e2       	ldi	r24, 0x20	; 32
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <fputc>
    2bf6:	b3 94       	inc	r11
    2bf8:	f7 cf       	rjmp	.-18     	; 0x2be8 <vfprintf+0x314>
    2bfa:	b2 14       	cp	r11, r2
    2bfc:	18 f4       	brcc	.+6      	; 0x2c04 <vfprintf+0x330>
    2bfe:	2b 18       	sub	r2, r11
    2c00:	02 c0       	rjmp	.+4      	; 0x2c06 <vfprintf+0x332>
    2c02:	98 2c       	mov	r9, r8
    2c04:	21 2c       	mov	r2, r1
    2c06:	a4 fe       	sbrs	r10, 4
    2c08:	10 c0       	rjmp	.+32     	; 0x2c2a <vfprintf+0x356>
    2c0a:	b6 01       	movw	r22, r12
    2c0c:	80 e3       	ldi	r24, 0x30	; 48
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <fputc>
    2c14:	a2 fe       	sbrs	r10, 2
    2c16:	17 c0       	rjmp	.+46     	; 0x2c46 <vfprintf+0x372>
    2c18:	a1 fc       	sbrc	r10, 1
    2c1a:	03 c0       	rjmp	.+6      	; 0x2c22 <vfprintf+0x34e>
    2c1c:	88 e7       	ldi	r24, 0x78	; 120
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	02 c0       	rjmp	.+4      	; 0x2c26 <vfprintf+0x352>
    2c22:	88 e5       	ldi	r24, 0x58	; 88
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	b6 01       	movw	r22, r12
    2c28:	0c c0       	rjmp	.+24     	; 0x2c42 <vfprintf+0x36e>
    2c2a:	8a 2d       	mov	r24, r10
    2c2c:	86 78       	andi	r24, 0x86	; 134
    2c2e:	59 f0       	breq	.+22     	; 0x2c46 <vfprintf+0x372>
    2c30:	a1 fe       	sbrs	r10, 1
    2c32:	02 c0       	rjmp	.+4      	; 0x2c38 <vfprintf+0x364>
    2c34:	8b e2       	ldi	r24, 0x2B	; 43
    2c36:	01 c0       	rjmp	.+2      	; 0x2c3a <vfprintf+0x366>
    2c38:	80 e2       	ldi	r24, 0x20	; 32
    2c3a:	a7 fc       	sbrc	r10, 7
    2c3c:	8d e2       	ldi	r24, 0x2D	; 45
    2c3e:	b6 01       	movw	r22, r12
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <fputc>
    2c46:	89 14       	cp	r8, r9
    2c48:	38 f4       	brcc	.+14     	; 0x2c58 <vfprintf+0x384>
    2c4a:	b6 01       	movw	r22, r12
    2c4c:	80 e3       	ldi	r24, 0x30	; 48
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <fputc>
    2c54:	9a 94       	dec	r9
    2c56:	f7 cf       	rjmp	.-18     	; 0x2c46 <vfprintf+0x372>
    2c58:	8a 94       	dec	r8
    2c5a:	f3 01       	movw	r30, r6
    2c5c:	e8 0d       	add	r30, r8
    2c5e:	f1 1d       	adc	r31, r1
    2c60:	80 81       	ld	r24, Z
    2c62:	b6 01       	movw	r22, r12
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <fputc>
    2c6a:	81 10       	cpse	r8, r1
    2c6c:	f5 cf       	rjmp	.-22     	; 0x2c58 <vfprintf+0x384>
    2c6e:	22 20       	and	r2, r2
    2c70:	09 f4       	brne	.+2      	; 0x2c74 <vfprintf+0x3a0>
    2c72:	42 ce       	rjmp	.-892    	; 0x28f8 <vfprintf+0x24>
    2c74:	b6 01       	movw	r22, r12
    2c76:	80 e2       	ldi	r24, 0x20	; 32
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <fputc>
    2c7e:	2a 94       	dec	r2
    2c80:	f6 cf       	rjmp	.-20     	; 0x2c6e <vfprintf+0x39a>
    2c82:	f6 01       	movw	r30, r12
    2c84:	86 81       	ldd	r24, Z+6	; 0x06
    2c86:	97 81       	ldd	r25, Z+7	; 0x07
    2c88:	02 c0       	rjmp	.+4      	; 0x2c8e <vfprintf+0x3ba>
    2c8a:	8f ef       	ldi	r24, 0xFF	; 255
    2c8c:	9f ef       	ldi	r25, 0xFF	; 255
    2c8e:	2b 96       	adiw	r28, 0x0b	; 11
    2c90:	e2 e1       	ldi	r30, 0x12	; 18
    2c92:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__epilogue_restores__>

00002c96 <strnlen_P>:
    2c96:	fc 01       	movw	r30, r24
    2c98:	05 90       	lpm	r0, Z+
    2c9a:	61 50       	subi	r22, 0x01	; 1
    2c9c:	70 40       	sbci	r23, 0x00	; 0
    2c9e:	01 10       	cpse	r0, r1
    2ca0:	d8 f7       	brcc	.-10     	; 0x2c98 <strnlen_P+0x2>
    2ca2:	80 95       	com	r24
    2ca4:	90 95       	com	r25
    2ca6:	8e 0f       	add	r24, r30
    2ca8:	9f 1f       	adc	r25, r31
    2caa:	08 95       	ret

00002cac <strnlen>:
    2cac:	fc 01       	movw	r30, r24
    2cae:	61 50       	subi	r22, 0x01	; 1
    2cb0:	70 40       	sbci	r23, 0x00	; 0
    2cb2:	01 90       	ld	r0, Z+
    2cb4:	01 10       	cpse	r0, r1
    2cb6:	d8 f7       	brcc	.-10     	; 0x2cae <strnlen+0x2>
    2cb8:	80 95       	com	r24
    2cba:	90 95       	com	r25
    2cbc:	8e 0f       	add	r24, r30
    2cbe:	9f 1f       	adc	r25, r31
    2cc0:	08 95       	ret

00002cc2 <fputc>:
    2cc2:	0f 93       	push	r16
    2cc4:	1f 93       	push	r17
    2cc6:	cf 93       	push	r28
    2cc8:	df 93       	push	r29
    2cca:	fb 01       	movw	r30, r22
    2ccc:	23 81       	ldd	r18, Z+3	; 0x03
    2cce:	21 fd       	sbrc	r18, 1
    2cd0:	03 c0       	rjmp	.+6      	; 0x2cd8 <fputc+0x16>
    2cd2:	8f ef       	ldi	r24, 0xFF	; 255
    2cd4:	9f ef       	ldi	r25, 0xFF	; 255
    2cd6:	2c c0       	rjmp	.+88     	; 0x2d30 <fputc+0x6e>
    2cd8:	22 ff       	sbrs	r18, 2
    2cda:	16 c0       	rjmp	.+44     	; 0x2d08 <fputc+0x46>
    2cdc:	46 81       	ldd	r20, Z+6	; 0x06
    2cde:	57 81       	ldd	r21, Z+7	; 0x07
    2ce0:	24 81       	ldd	r18, Z+4	; 0x04
    2ce2:	35 81       	ldd	r19, Z+5	; 0x05
    2ce4:	42 17       	cp	r20, r18
    2ce6:	53 07       	cpc	r21, r19
    2ce8:	44 f4       	brge	.+16     	; 0x2cfa <fputc+0x38>
    2cea:	a0 81       	ld	r26, Z
    2cec:	b1 81       	ldd	r27, Z+1	; 0x01
    2cee:	9d 01       	movw	r18, r26
    2cf0:	2f 5f       	subi	r18, 0xFF	; 255
    2cf2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf4:	31 83       	std	Z+1, r19	; 0x01
    2cf6:	20 83       	st	Z, r18
    2cf8:	8c 93       	st	X, r24
    2cfa:	26 81       	ldd	r18, Z+6	; 0x06
    2cfc:	37 81       	ldd	r19, Z+7	; 0x07
    2cfe:	2f 5f       	subi	r18, 0xFF	; 255
    2d00:	3f 4f       	sbci	r19, 0xFF	; 255
    2d02:	37 83       	std	Z+7, r19	; 0x07
    2d04:	26 83       	std	Z+6, r18	; 0x06
    2d06:	14 c0       	rjmp	.+40     	; 0x2d30 <fputc+0x6e>
    2d08:	8b 01       	movw	r16, r22
    2d0a:	ec 01       	movw	r28, r24
    2d0c:	fb 01       	movw	r30, r22
    2d0e:	00 84       	ldd	r0, Z+8	; 0x08
    2d10:	f1 85       	ldd	r31, Z+9	; 0x09
    2d12:	e0 2d       	mov	r30, r0
    2d14:	09 95       	icall
    2d16:	89 2b       	or	r24, r25
    2d18:	e1 f6       	brne	.-72     	; 0x2cd2 <fputc+0x10>
    2d1a:	d8 01       	movw	r26, r16
    2d1c:	16 96       	adiw	r26, 0x06	; 6
    2d1e:	8d 91       	ld	r24, X+
    2d20:	9c 91       	ld	r25, X
    2d22:	17 97       	sbiw	r26, 0x07	; 7
    2d24:	01 96       	adiw	r24, 0x01	; 1
    2d26:	17 96       	adiw	r26, 0x07	; 7
    2d28:	9c 93       	st	X, r25
    2d2a:	8e 93       	st	-X, r24
    2d2c:	16 97       	sbiw	r26, 0x06	; 6
    2d2e:	ce 01       	movw	r24, r28
    2d30:	df 91       	pop	r29
    2d32:	cf 91       	pop	r28
    2d34:	1f 91       	pop	r17
    2d36:	0f 91       	pop	r16
    2d38:	08 95       	ret

00002d3a <__ultoa_invert>:
    2d3a:	fa 01       	movw	r30, r20
    2d3c:	aa 27       	eor	r26, r26
    2d3e:	28 30       	cpi	r18, 0x08	; 8
    2d40:	51 f1       	breq	.+84     	; 0x2d96 <__ultoa_invert+0x5c>
    2d42:	20 31       	cpi	r18, 0x10	; 16
    2d44:	81 f1       	breq	.+96     	; 0x2da6 <__ultoa_invert+0x6c>
    2d46:	e8 94       	clt
    2d48:	6f 93       	push	r22
    2d4a:	6e 7f       	andi	r22, 0xFE	; 254
    2d4c:	6e 5f       	subi	r22, 0xFE	; 254
    2d4e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d50:	8f 4f       	sbci	r24, 0xFF	; 255
    2d52:	9f 4f       	sbci	r25, 0xFF	; 255
    2d54:	af 4f       	sbci	r26, 0xFF	; 255
    2d56:	b1 e0       	ldi	r27, 0x01	; 1
    2d58:	3e d0       	rcall	.+124    	; 0x2dd6 <__ultoa_invert+0x9c>
    2d5a:	b4 e0       	ldi	r27, 0x04	; 4
    2d5c:	3c d0       	rcall	.+120    	; 0x2dd6 <__ultoa_invert+0x9c>
    2d5e:	67 0f       	add	r22, r23
    2d60:	78 1f       	adc	r23, r24
    2d62:	89 1f       	adc	r24, r25
    2d64:	9a 1f       	adc	r25, r26
    2d66:	a1 1d       	adc	r26, r1
    2d68:	68 0f       	add	r22, r24
    2d6a:	79 1f       	adc	r23, r25
    2d6c:	8a 1f       	adc	r24, r26
    2d6e:	91 1d       	adc	r25, r1
    2d70:	a1 1d       	adc	r26, r1
    2d72:	6a 0f       	add	r22, r26
    2d74:	71 1d       	adc	r23, r1
    2d76:	81 1d       	adc	r24, r1
    2d78:	91 1d       	adc	r25, r1
    2d7a:	a1 1d       	adc	r26, r1
    2d7c:	20 d0       	rcall	.+64     	; 0x2dbe <__ultoa_invert+0x84>
    2d7e:	09 f4       	brne	.+2      	; 0x2d82 <__ultoa_invert+0x48>
    2d80:	68 94       	set
    2d82:	3f 91       	pop	r19
    2d84:	2a e0       	ldi	r18, 0x0A	; 10
    2d86:	26 9f       	mul	r18, r22
    2d88:	11 24       	eor	r1, r1
    2d8a:	30 19       	sub	r19, r0
    2d8c:	30 5d       	subi	r19, 0xD0	; 208
    2d8e:	31 93       	st	Z+, r19
    2d90:	de f6       	brtc	.-74     	; 0x2d48 <__ultoa_invert+0xe>
    2d92:	cf 01       	movw	r24, r30
    2d94:	08 95       	ret
    2d96:	46 2f       	mov	r20, r22
    2d98:	47 70       	andi	r20, 0x07	; 7
    2d9a:	40 5d       	subi	r20, 0xD0	; 208
    2d9c:	41 93       	st	Z+, r20
    2d9e:	b3 e0       	ldi	r27, 0x03	; 3
    2da0:	0f d0       	rcall	.+30     	; 0x2dc0 <__ultoa_invert+0x86>
    2da2:	c9 f7       	brne	.-14     	; 0x2d96 <__ultoa_invert+0x5c>
    2da4:	f6 cf       	rjmp	.-20     	; 0x2d92 <__ultoa_invert+0x58>
    2da6:	46 2f       	mov	r20, r22
    2da8:	4f 70       	andi	r20, 0x0F	; 15
    2daa:	40 5d       	subi	r20, 0xD0	; 208
    2dac:	4a 33       	cpi	r20, 0x3A	; 58
    2dae:	18 f0       	brcs	.+6      	; 0x2db6 <__ultoa_invert+0x7c>
    2db0:	49 5d       	subi	r20, 0xD9	; 217
    2db2:	31 fd       	sbrc	r19, 1
    2db4:	40 52       	subi	r20, 0x20	; 32
    2db6:	41 93       	st	Z+, r20
    2db8:	02 d0       	rcall	.+4      	; 0x2dbe <__ultoa_invert+0x84>
    2dba:	a9 f7       	brne	.-22     	; 0x2da6 <__ultoa_invert+0x6c>
    2dbc:	ea cf       	rjmp	.-44     	; 0x2d92 <__ultoa_invert+0x58>
    2dbe:	b4 e0       	ldi	r27, 0x04	; 4
    2dc0:	a6 95       	lsr	r26
    2dc2:	97 95       	ror	r25
    2dc4:	87 95       	ror	r24
    2dc6:	77 95       	ror	r23
    2dc8:	67 95       	ror	r22
    2dca:	ba 95       	dec	r27
    2dcc:	c9 f7       	brne	.-14     	; 0x2dc0 <__ultoa_invert+0x86>
    2dce:	00 97       	sbiw	r24, 0x00	; 0
    2dd0:	61 05       	cpc	r22, r1
    2dd2:	71 05       	cpc	r23, r1
    2dd4:	08 95       	ret
    2dd6:	9b 01       	movw	r18, r22
    2dd8:	ac 01       	movw	r20, r24
    2dda:	0a 2e       	mov	r0, r26
    2ddc:	06 94       	lsr	r0
    2dde:	57 95       	ror	r21
    2de0:	47 95       	ror	r20
    2de2:	37 95       	ror	r19
    2de4:	27 95       	ror	r18
    2de6:	ba 95       	dec	r27
    2de8:	c9 f7       	brne	.-14     	; 0x2ddc <__ultoa_invert+0xa2>
    2dea:	62 0f       	add	r22, r18
    2dec:	73 1f       	adc	r23, r19
    2dee:	84 1f       	adc	r24, r20
    2df0:	95 1f       	adc	r25, r21
    2df2:	a0 1d       	adc	r26, r0
    2df4:	08 95       	ret

00002df6 <__prologue_saves__>:
    2df6:	2f 92       	push	r2
    2df8:	3f 92       	push	r3
    2dfa:	4f 92       	push	r4
    2dfc:	5f 92       	push	r5
    2dfe:	6f 92       	push	r6
    2e00:	7f 92       	push	r7
    2e02:	8f 92       	push	r8
    2e04:	9f 92       	push	r9
    2e06:	af 92       	push	r10
    2e08:	bf 92       	push	r11
    2e0a:	cf 92       	push	r12
    2e0c:	df 92       	push	r13
    2e0e:	ef 92       	push	r14
    2e10:	ff 92       	push	r15
    2e12:	0f 93       	push	r16
    2e14:	1f 93       	push	r17
    2e16:	cf 93       	push	r28
    2e18:	df 93       	push	r29
    2e1a:	cd b7       	in	r28, 0x3d	; 61
    2e1c:	de b7       	in	r29, 0x3e	; 62
    2e1e:	ca 1b       	sub	r28, r26
    2e20:	db 0b       	sbc	r29, r27
    2e22:	0f b6       	in	r0, 0x3f	; 63
    2e24:	f8 94       	cli
    2e26:	de bf       	out	0x3e, r29	; 62
    2e28:	0f be       	out	0x3f, r0	; 63
    2e2a:	cd bf       	out	0x3d, r28	; 61
    2e2c:	09 94       	ijmp

00002e2e <__epilogue_restores__>:
    2e2e:	2a 88       	ldd	r2, Y+18	; 0x12
    2e30:	39 88       	ldd	r3, Y+17	; 0x11
    2e32:	48 88       	ldd	r4, Y+16	; 0x10
    2e34:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e36:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e38:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e3a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e3c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e3e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e40:	b9 84       	ldd	r11, Y+9	; 0x09
    2e42:	c8 84       	ldd	r12, Y+8	; 0x08
    2e44:	df 80       	ldd	r13, Y+7	; 0x07
    2e46:	ee 80       	ldd	r14, Y+6	; 0x06
    2e48:	fd 80       	ldd	r15, Y+5	; 0x05
    2e4a:	0c 81       	ldd	r16, Y+4	; 0x04
    2e4c:	1b 81       	ldd	r17, Y+3	; 0x03
    2e4e:	aa 81       	ldd	r26, Y+2	; 0x02
    2e50:	b9 81       	ldd	r27, Y+1	; 0x01
    2e52:	ce 0f       	add	r28, r30
    2e54:	d1 1d       	adc	r29, r1
    2e56:	0f b6       	in	r0, 0x3f	; 63
    2e58:	f8 94       	cli
    2e5a:	de bf       	out	0x3e, r29	; 62
    2e5c:	0f be       	out	0x3f, r0	; 63
    2e5e:	cd bf       	out	0x3d, r28	; 61
    2e60:	ed 01       	movw	r28, r26
    2e62:	08 95       	ret

00002e64 <_exit>:
    2e64:	f8 94       	cli

00002e66 <__stop_program>:
    2e66:	ff cf       	rjmp	.-2      	; 0x2e66 <__stop_program>
