
COSMIC-IoT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002650  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002da  00800060  00002650  000026e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000298  0080033a  0080033a  000029be  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000029be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002a1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e0  00000000  00000000  00002a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000049b9  00000000  00000000  00002e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a85  00000000  00000000  000077f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003276  00000000  00000000  00009276  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000838  00000000  00000000  0000c4ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000018f1  00000000  00000000  0000cd24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002207  00000000  00000000  0000e615  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000408  00000000  00000000  0001081c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
       4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
       8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
       c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_9>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      2c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      34:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_13>
      38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      54:	79 07       	cpc	r23, r25
      56:	af 07       	cpc	r26, r31
      58:	e5 07       	cpc	r30, r21
      5a:	21 08       	sbc	r2, r1
      5c:	4e 08       	sbc	r4, r14
      5e:	b3 08       	sbc	r11, r3
      60:	80 08       	sbc	r8, r0
      62:	70 09       	sbc	r23, r0
      64:	b4 09       	sbc	r27, r4
      66:	ea 09       	sbc	r30, r10
      68:	20 0a       	sbc	r2, r16
      6a:	56 0a       	sbc	r5, r22
      6c:	5d 0a       	sbc	r5, r29
      6e:	93 0a       	sbc	r9, r19
      70:	c9 0a       	sbc	r12, r25

00000072 <__ctors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf e5       	ldi	r28, 0x5F	; 95
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	13 e0       	ldi	r17, 0x03	; 3
      80:	a0 e6       	ldi	r26, 0x60	; 96
      82:	b0 e0       	ldi	r27, 0x00	; 0
      84:	e0 e5       	ldi	r30, 0x50	; 80
      86:	f6 e2       	ldi	r31, 0x26	; 38
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	aa 33       	cpi	r26, 0x3A	; 58
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	25 e0       	ldi	r18, 0x05	; 5
      96:	aa e3       	ldi	r26, 0x3A	; 58
      98:	b3 e0       	ldi	r27, 0x03	; 3
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	a2 3d       	cpi	r26, 0xD2	; 210
      a0:	b2 07       	cpc	r27, r18
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
      a4:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <main>
      a8:	0c 94 26 13 	jmp	0x264c	; 0x264c <_exit>

000000ac <__bad_interrupt>:
      ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <TIM1_Init>:


void TIM1_Init(void)
{
	/* Initialize TIMER1 to use the overflow ISR */
	TCCR1B =  PRESCALER_8;
      b0:	82 e0       	ldi	r24, 0x02	; 2
      b2:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << TOIE1);
      b4:	89 b7       	in	r24, 0x39	; 57
      b6:	84 60       	ori	r24, 0x04	; 4
      b8:	89 bf       	out	0x39, r24	; 57
	TCNT1 = 65035;
      ba:	8b e0       	ldi	r24, 0x0B	; 11
      bc:	9e ef       	ldi	r25, 0xFE	; 254
      be:	9d bd       	out	0x2d, r25	; 45
      c0:	8c bd       	out	0x2c, r24	; 44
	sei();
      c2:	78 94       	sei
      c4:	08 95       	ret

000000c6 <__vector_9>:
	return;
}

ISR(TIMER1_OVF_vect)
{
      c6:	1f 92       	push	r1
      c8:	0f 92       	push	r0
      ca:	0f b6       	in	r0, 0x3f	; 63
      cc:	0f 92       	push	r0
      ce:	11 24       	eor	r1, r1
      d0:	2f 93       	push	r18
      d2:	3f 93       	push	r19
      d4:	4f 93       	push	r20
      d6:	5f 93       	push	r21
      d8:	6f 93       	push	r22
      da:	7f 93       	push	r23
      dc:	8f 93       	push	r24
      de:	9f 93       	push	r25
      e0:	af 93       	push	r26
      e2:	bf 93       	push	r27
      e4:	ef 93       	push	r30
      e6:	ff 93       	push	r31

	TCNT1 = 65035;
      e8:	8b e0       	ldi	r24, 0x0B	; 11
      ea:	9e ef       	ldi	r25, 0xFE	; 254
      ec:	9d bd       	out	0x2d, r25	; 45
      ee:	8c bd       	out	0x2c, r24	; 44
	FUN_SYS_Timer_x1();
      f0:	0e 94 36 09 	call	0x126c	; 0x126c <FUN_SYS_Timer_x1>
      f4:	ff 91       	pop	r31
      f6:	ef 91       	pop	r30
      f8:	bf 91       	pop	r27
      fa:	af 91       	pop	r26
      fc:	9f 91       	pop	r25
      fe:	8f 91       	pop	r24
     100:	7f 91       	pop	r23
     102:	6f 91       	pop	r22
     104:	5f 91       	pop	r21
     106:	4f 91       	pop	r20
     108:	3f 91       	pop	r19
     10a:	2f 91       	pop	r18
     10c:	0f 90       	pop	r0
     10e:	0f be       	out	0x3f, r0	; 63
     110:	0f 90       	pop	r0
     112:	1f 90       	pop	r1
     114:	18 95       	reti

00000116 <UART_init>:
unsigned char uart_rx()
{
	while ( !(UCSRA & (1<<RXC)) );
	unsigned char a=UDR;
	return a;
}
     116:	10 bc       	out	0x20, r1	; 32
     118:	1b b8       	out	0x0b, r1	; 11
     11a:	10 bc       	out	0x20, r1	; 32
     11c:	84 e3       	ldi	r24, 0x34	; 52
     11e:	89 b9       	out	0x09, r24	; 9
     120:	8a b1       	in	r24, 0x0a	; 10
     122:	88 69       	ori	r24, 0x98	; 152
     124:	8a b9       	out	0x0a, r24	; 10
     126:	80 b5       	in	r24, 0x20	; 32
     128:	86 68       	ori	r24, 0x86	; 134
     12a:	80 bd       	out	0x20, r24	; 32
     12c:	08 95       	ret

0000012e <SIM_Send_Data>:
     12e:	5d 9b       	sbis	0x0b, 5	; 11
     130:	fe cf       	rjmp	.-4      	; 0x12e <SIM_Send_Data>
     132:	8c b9       	out	0x0c, r24	; 12
     134:	08 95       	ret

00000136 <__vector_13>:



ISR(USART_RXC_vect)
{
     136:	1f 92       	push	r1
     138:	0f 92       	push	r0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	0f 92       	push	r0
     13e:	11 24       	eor	r1, r1
     140:	2f 93       	push	r18
     142:	3f 93       	push	r19
     144:	4f 93       	push	r20
     146:	5f 93       	push	r21
     148:	6f 93       	push	r22
     14a:	7f 93       	push	r23
     14c:	8f 93       	push	r24
     14e:	9f 93       	push	r25
     150:	af 93       	push	r26
     152:	bf 93       	push	r27
     154:	ef 93       	push	r30
     156:	ff 93       	push	r31
	
	unsigned char d = UDR;
     158:	8c b1       	in	r24, 0x0c	; 12
	SIMCOM_Data_Read(d);
     15a:	0e 94 92 05 	call	0xb24	; 0xb24 <SIMCOM_Data_Read>

     15e:	ff 91       	pop	r31
     160:	ef 91       	pop	r30
     162:	bf 91       	pop	r27
     164:	af 91       	pop	r26
     166:	9f 91       	pop	r25
     168:	8f 91       	pop	r24
     16a:	7f 91       	pop	r23
     16c:	6f 91       	pop	r22
     16e:	5f 91       	pop	r21
     170:	4f 91       	pop	r20
     172:	3f 91       	pop	r19
     174:	2f 91       	pop	r18
     176:	0f 90       	pop	r0
     178:	0f be       	out	0x3f, r0	; 63
     17a:	0f 90       	pop	r0
     17c:	1f 90       	pop	r1
     17e:	18 95       	reti

00000180 <Buffer_GetBuffer>:
/*                     Buffer Get Function                        */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
BufferType_ST * Buffer_GetBuffer(UBYTE BufferID)
{
	/* Check if the BufferID is valid */
	if(BufferID < BUFFER_MAX_COUNT)
     180:	81 11       	cpse	r24, r1
     182:	0b c0       	rjmp	.+22     	; 0x19a <Buffer_GetBuffer+0x1a>
	{
		return &(Buffers[BufferID]);
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	9c 01       	movw	r18, r24
     188:	22 0f       	add	r18, r18
     18a:	33 1f       	adc	r19, r19
     18c:	82 0f       	add	r24, r18
     18e:	93 1f       	adc	r25, r19
     190:	88 0f       	add	r24, r24
     192:	99 1f       	adc	r25, r25
     194:	8e 5a       	subi	r24, 0xAE	; 174
     196:	9c 4f       	sbci	r25, 0xFC	; 252
     198:	08 95       	ret
	}
	else
	{
		/* Maximum Buffer Count Reached / Invalid Buffer ID */
		return NULL_PTR;
     19a:	80 e0       	ldi	r24, 0x00	; 0
     19c:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     19e:	08 95       	ret

000001a0 <Buffer_Create>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                  Buffer Create Function                        */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
BOOL Buffer_Create(UBYTE BufferID, UBYTE * BufferPtr, BufferLengthType Size)
{
     1a0:	0f 93       	push	r16
     1a2:	1f 93       	push	r17
     1a4:	cf 93       	push	r28
     1a6:	8b 01       	movw	r16, r22
     1a8:	c4 2f       	mov	r28, r20
	BOOL retval = FALSE;

	BufferType_ST * Buffer = Buffer_GetBuffer(BufferID);
     1aa:	0e 94 c0 00 	call	0x180	; 0x180 <Buffer_GetBuffer>

	/* Check if the Buffer is valid */
	if(Buffer != NULL_PTR)
     1ae:	00 97       	sbiw	r24, 0x00	; 0
     1b0:	69 f0       	breq	.+26     	; 0x1cc <Buffer_Create+0x2c>
	{
		if(Buffer->BufferPtr == NULL_PTR)
     1b2:	fc 01       	movw	r30, r24
     1b4:	20 81       	ld	r18, Z
     1b6:	31 81       	ldd	r19, Z+1	; 0x01
     1b8:	23 2b       	or	r18, r19
     1ba:	51 f4       	brne	.+20     	; 0x1d0 <Buffer_Create+0x30>
		{
			Buffer->BufferPtr = BufferPtr;
     1bc:	11 83       	std	Z+1, r17	; 0x01
     1be:	00 83       	st	Z, r16
			Buffer->Size = Size;
     1c0:	c2 83       	std	Z+2, r28	; 0x02
			Buffer->HeadIndex = 0;
     1c2:	14 82       	std	Z+4, r1	; 0x04
			Buffer->Length = 0;
     1c4:	13 82       	std	Z+3, r1	; 0x03
			Buffer->TailIndex = 0;
     1c6:	15 82       	std	Z+5, r1	; 0x05

			retval = TRUE;
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	03 c0       	rjmp	.+6      	; 0x1d2 <Buffer_Create+0x32>
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                  Buffer Create Function                        */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
BOOL Buffer_Create(UBYTE BufferID, UBYTE * BufferPtr, BufferLengthType Size)
{
	BOOL retval = FALSE;
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <Buffer_Create+0x32>
     1d0:	80 e0       	ldi	r24, 0x00	; 0
			retval = TRUE;
		}
	}

	return retval;
}
     1d2:	cf 91       	pop	r28
     1d4:	1f 91       	pop	r17
     1d6:	0f 91       	pop	r16
     1d8:	08 95       	ret

000001da <Buffer_EnQueue>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                  Buffer EnQueue Function                       */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
BOOL Buffer_EnQueue(UBYTE BufferID, UBYTE Data)
{
     1da:	cf 93       	push	r28
     1dc:	c6 2f       	mov	r28, r22
	BOOL retval = FALSE;

	BufferType_ST * Buffer = Buffer_GetBuffer(BufferID);
     1de:	0e 94 c0 00 	call	0x180	; 0x180 <Buffer_GetBuffer>
     1e2:	fc 01       	movw	r30, r24

	/* Check if the Buffer is valid */
	if(Buffer != NULL_PTR)
     1e4:	89 2b       	or	r24, r25
     1e6:	d9 f0       	breq	.+54     	; 0x21e <Buffer_EnQueue+0x44>
	{
		if(Buffer->BufferPtr != NULL_PTR)
     1e8:	80 81       	ld	r24, Z
     1ea:	91 81       	ldd	r25, Z+1	; 0x01
     1ec:	00 97       	sbiw	r24, 0x00	; 0
     1ee:	c9 f0       	breq	.+50     	; 0x222 <Buffer_EnQueue+0x48>
		{
			/* If the Buffer is Free */
			if(Buffer->Length < Buffer->Size)
     1f0:	33 81       	ldd	r19, Z+3	; 0x03
     1f2:	22 81       	ldd	r18, Z+2	; 0x02
     1f4:	32 17       	cp	r19, r18
     1f6:	b8 f4       	brcc	.+46     	; 0x226 <Buffer_EnQueue+0x4c>
			{
				Buffer->BufferPtr[Buffer->TailIndex] = Data;
     1f8:	25 81       	ldd	r18, Z+5	; 0x05
     1fa:	dc 01       	movw	r26, r24
     1fc:	a2 0f       	add	r26, r18
     1fe:	b1 1d       	adc	r27, r1
     200:	cc 93       	st	X, r28

				Buffer->TailIndex++; // Increment the Tail position for next Insertion
     202:	85 81       	ldd	r24, Z+5	; 0x05
     204:	8f 5f       	subi	r24, 0xFF	; 255
     206:	85 83       	std	Z+5, r24	; 0x05

				Buffer->Length++; // Increment the Length of the Buffer
     208:	93 81       	ldd	r25, Z+3	; 0x03
     20a:	9f 5f       	subi	r25, 0xFF	; 255
     20c:	93 83       	std	Z+3, r25	; 0x03

				/* Logic to implement a Circular Buffer */
				if((Buffer->TailIndex == Buffer->Size) && (Buffer->Length < Buffer->Size))
     20e:	22 81       	ldd	r18, Z+2	; 0x02
     210:	82 13       	cpse	r24, r18
     212:	0b c0       	rjmp	.+22     	; 0x22a <Buffer_EnQueue+0x50>
     214:	92 17       	cp	r25, r18
     216:	58 f4       	brcc	.+22     	; 0x22e <Buffer_EnQueue+0x54>
				{
					Buffer->TailIndex = 0; // Circle back to 0
     218:	15 82       	std	Z+5, r1	; 0x05
				}

				retval = TRUE;
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	09 c0       	rjmp	.+18     	; 0x230 <Buffer_EnQueue+0x56>
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                  Buffer EnQueue Function                       */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
BOOL Buffer_EnQueue(UBYTE BufferID, UBYTE Data)
{
	BOOL retval = FALSE;
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	07 c0       	rjmp	.+14     	; 0x230 <Buffer_EnQueue+0x56>
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	05 c0       	rjmp	.+10     	; 0x230 <Buffer_EnQueue+0x56>
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	03 c0       	rjmp	.+6      	; 0x230 <Buffer_EnQueue+0x56>
				if((Buffer->TailIndex == Buffer->Size) && (Buffer->Length < Buffer->Size))
				{
					Buffer->TailIndex = 0; // Circle back to 0
				}

				retval = TRUE;
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	01 c0       	rjmp	.+2      	; 0x230 <Buffer_EnQueue+0x56>
     22e:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}

	return retval;
}
     230:	cf 91       	pop	r28
     232:	08 95       	ret

00000234 <Buffer_DeQueue>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                  Buffer DeQueue Function                       */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
BOOL Buffer_DeQueue(UBYTE BufferID, UBYTE * Data)
{
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
     238:	eb 01       	movw	r28, r22
	BOOL retval = FALSE;

	BufferType_ST * Buffer = Buffer_GetBuffer(BufferID);
     23a:	0e 94 c0 00 	call	0x180	; 0x180 <Buffer_GetBuffer>
     23e:	fc 01       	movw	r30, r24

	/* Check if the Buffer is valid */
	if(Buffer != NULL_PTR)
     240:	89 2b       	or	r24, r25
     242:	21 f1       	breq	.+72     	; 0x28c <Buffer_DeQueue+0x58>
	{
		if(Buffer->BufferPtr != NULL_PTR)
     244:	80 81       	ld	r24, Z
     246:	91 81       	ldd	r25, Z+1	; 0x01
     248:	00 97       	sbiw	r24, 0x00	; 0
     24a:	11 f1       	breq	.+68     	; 0x290 <Buffer_DeQueue+0x5c>
		{
			/* If the Buffer is not Empty */
			if(Buffer->Length != 0)
     24c:	23 81       	ldd	r18, Z+3	; 0x03
     24e:	22 23       	and	r18, r18
     250:	09 f1       	breq	.+66     	; 0x294 <Buffer_DeQueue+0x60>
			{
				*Data = Buffer->BufferPtr[Buffer->HeadIndex];
     252:	24 81       	ldd	r18, Z+4	; 0x04
     254:	dc 01       	movw	r26, r24
     256:	a2 0f       	add	r26, r18
     258:	b1 1d       	adc	r27, r1
     25a:	8c 91       	ld	r24, X
     25c:	88 83       	st	Y, r24

				Buffer->BufferPtr[Buffer->HeadIndex] = 0; // While Dequeuing clear the value
     25e:	a0 81       	ld	r26, Z
     260:	b1 81       	ldd	r27, Z+1	; 0x01
     262:	84 81       	ldd	r24, Z+4	; 0x04
     264:	a8 0f       	add	r26, r24
     266:	b1 1d       	adc	r27, r1
     268:	1c 92       	st	X, r1

				Buffer->HeadIndex++; // Increment the Head position for next Dequeuing
     26a:	94 81       	ldd	r25, Z+4	; 0x04
     26c:	9f 5f       	subi	r25, 0xFF	; 255
     26e:	94 83       	std	Z+4, r25	; 0x04

				Buffer->Length--; // Decrement the Length of the Buffer
     270:	83 81       	ldd	r24, Z+3	; 0x03
     272:	81 50       	subi	r24, 0x01	; 1
     274:	83 83       	std	Z+3, r24	; 0x03

				/* Logic to implement a Circular Buffer */
				if((Buffer->HeadIndex == Buffer->Size) && (Buffer->Length != 0))
     276:	22 81       	ldd	r18, Z+2	; 0x02
     278:	92 13       	cpse	r25, r18
     27a:	02 c0       	rjmp	.+4      	; 0x280 <Buffer_DeQueue+0x4c>
     27c:	81 11       	cpse	r24, r1
				{
					Buffer->HeadIndex = 0; // Circle back to 0
     27e:	14 82       	std	Z+4, r1	; 0x04
				}

				/* If the Buffer is empty, then reset the Head and Tail Indices */
				if(Buffer->Length == 0)
     280:	81 11       	cpse	r24, r1
     282:	0a c0       	rjmp	.+20     	; 0x298 <Buffer_DeQueue+0x64>
				{
					Buffer->HeadIndex = 0;
     284:	14 82       	std	Z+4, r1	; 0x04
					Buffer->TailIndex = 0;
     286:	15 82       	std	Z+5, r1	; 0x05
				}

				retval = TRUE;
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	07 c0       	rjmp	.+14     	; 0x29a <Buffer_DeQueue+0x66>
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                  Buffer DeQueue Function                       */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
BOOL Buffer_DeQueue(UBYTE BufferID, UBYTE * Data)
{
	BOOL retval = FALSE;
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	05 c0       	rjmp	.+10     	; 0x29a <Buffer_DeQueue+0x66>
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	03 c0       	rjmp	.+6      	; 0x29a <Buffer_DeQueue+0x66>
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	01 c0       	rjmp	.+2      	; 0x29a <Buffer_DeQueue+0x66>
				{
					Buffer->HeadIndex = 0;
					Buffer->TailIndex = 0;
				}

				retval = TRUE;
     298:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}

	return retval;
}
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	08 95       	ret

000002a0 <Buffer_Length>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
BufferLengthType Buffer_Length(UBYTE BufferID)
{
	BufferLengthType Length = 0;

	BufferType_ST * Buffer = Buffer_GetBuffer(BufferID);
     2a0:	0e 94 c0 00 	call	0x180	; 0x180 <Buffer_GetBuffer>

	/* Check if the Buffer is valid */
	if(Buffer != NULL_PTR)
     2a4:	00 97       	sbiw	r24, 0x00	; 0
     2a6:	39 f0       	breq	.+14     	; 0x2b6 <Buffer_Length+0x16>
	{
		if(Buffer->BufferPtr != NULL_PTR)
     2a8:	fc 01       	movw	r30, r24
     2aa:	20 81       	ld	r18, Z
     2ac:	31 81       	ldd	r19, Z+1	; 0x01
     2ae:	23 2b       	or	r18, r19
     2b0:	21 f0       	breq	.+8      	; 0x2ba <Buffer_Length+0x1a>
		{
			Length = Buffer->Length;
     2b2:	83 81       	ldd	r24, Z+3	; 0x03
     2b4:	08 95       	ret
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                  Buffer Length Function                        */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
BufferLengthType Buffer_Length(UBYTE BufferID)
{
	BufferLengthType Length = 0;
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	08 95       	ret
     2ba:	80 e0       	ldi	r24, 0x00	; 0
			Length = Buffer->Length;
		}
	}

	return Length;
}
     2bc:	08 95       	ret

000002be <StringHelper_GetPointerAfter>:

		StringHelper_ClearBuffer();
	}

	return retval;
}
     2be:	0f 93       	push	r16
     2c0:	1f 93       	push	r17
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	fc 01       	movw	r30, r24
     2c8:	01 90       	ld	r0, Z+
     2ca:	00 20       	and	r0, r0
     2cc:	e9 f7       	brne	.-6      	; 0x2c8 <StringHelper_GetPointerAfter+0xa>
     2ce:	31 97       	sbiw	r30, 0x01	; 1
     2d0:	e8 1b       	sub	r30, r24
     2d2:	f9 0b       	sbc	r31, r25
     2d4:	db 01       	movw	r26, r22
     2d6:	0d 90       	ld	r0, X+
     2d8:	00 20       	and	r0, r0
     2da:	e9 f7       	brne	.-6      	; 0x2d6 <StringHelper_GetPointerAfter+0x18>
     2dc:	11 97       	sbiw	r26, 0x01	; 1
     2de:	ed 01       	movw	r28, r26
     2e0:	c6 1b       	sub	r28, r22
     2e2:	d7 0b       	sbc	r29, r23
     2e4:	ce 17       	cp	r28, r30
     2e6:	df 07       	cpc	r29, r31
     2e8:	84 f4       	brge	.+32     	; 0x30a <StringHelper_GetPointerAfter+0x4c>
     2ea:	20 97       	sbiw	r28, 0x00	; 0
     2ec:	71 f0       	breq	.+28     	; 0x30a <StringHelper_GetPointerAfter+0x4c>
     2ee:	0e 94 1a 10 	call	0x2034	; 0x2034 <strstr>
     2f2:	fc 01       	movw	r30, r24
     2f4:	01 90       	ld	r0, Z+
     2f6:	00 20       	and	r0, r0
     2f8:	e9 f7       	brne	.-6      	; 0x2f4 <StringHelper_GetPointerAfter+0x36>
     2fa:	31 97       	sbiw	r30, 0x01	; 1
     2fc:	e8 1b       	sub	r30, r24
     2fe:	f9 0b       	sbc	r31, r25
     300:	ce 17       	cp	r28, r30
     302:	df 07       	cpc	r29, r31
     304:	11 f0       	breq	.+4      	; 0x30a <StringHelper_GetPointerAfter+0x4c>
     306:	8c 0f       	add	r24, r28
     308:	9d 1f       	adc	r25, r29
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	1f 91       	pop	r17
     310:	0f 91       	pop	r16
     312:	08 95       	ret

00000314 <StringHelper_SplitAndGet>:
     314:	0f 93       	push	r16
     316:	1f 93       	push	r17
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
     31c:	dc 01       	movw	r26, r24
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	c0 e0       	ldi	r28, 0x00	; 0
     324:	d0 e0       	ldi	r29, 0x00	; 0
     326:	00 e0       	ldi	r16, 0x00	; 0
     328:	10 e0       	ldi	r17, 0x00	; 0
     32a:	0f c0       	rjmp	.+30     	; 0x34a <StringHelper_SplitAndGet+0x36>
     32c:	86 13       	cpse	r24, r22
     32e:	0b c0       	rjmp	.+22     	; 0x346 <StringHelper_SplitAndGet+0x32>
     330:	0f 5f       	subi	r16, 0xFF	; 255
     332:	1f 4f       	sbci	r17, 0xFF	; 255
     334:	04 17       	cp	r16, r20
     336:	15 07       	cpc	r17, r21
     338:	21 f4       	brne	.+8      	; 0x342 <StringHelper_SplitAndGet+0x2e>
     33a:	b9 01       	movw	r22, r18
     33c:	6c 1b       	sub	r22, r28
     33e:	7d 0b       	sbc	r23, r29
     340:	0c c0       	rjmp	.+24     	; 0x35a <StringHelper_SplitAndGet+0x46>
     342:	e9 01       	movw	r28, r18
     344:	21 96       	adiw	r28, 0x01	; 1
     346:	2f 5f       	subi	r18, 0xFF	; 255
     348:	3f 4f       	sbci	r19, 0xFF	; 255
     34a:	fd 01       	movw	r30, r26
     34c:	e2 0f       	add	r30, r18
     34e:	f3 1f       	adc	r31, r19
     350:	80 81       	ld	r24, Z
     352:	81 11       	cpse	r24, r1
     354:	eb cf       	rjmp	.-42     	; 0x32c <StringHelper_SplitAndGet+0x18>
     356:	60 e0       	ldi	r22, 0x00	; 0
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	61 15       	cp	r22, r1
     35c:	71 05       	cpc	r23, r1
     35e:	41 f4       	brne	.+16     	; 0x370 <StringHelper_SplitAndGet+0x5c>
     360:	0f 5f       	subi	r16, 0xFF	; 255
     362:	1f 4f       	sbci	r17, 0xFF	; 255
     364:	04 17       	cp	r16, r20
     366:	15 07       	cpc	r17, r21
     368:	19 f4       	brne	.+6      	; 0x370 <StringHelper_SplitAndGet+0x5c>
     36a:	b9 01       	movw	r22, r18
     36c:	6c 1b       	sub	r22, r28
     36e:	7d 0b       	sbc	r23, r29
     370:	61 15       	cp	r22, r1
     372:	71 05       	cpc	r23, r1
     374:	09 f1       	breq	.+66     	; 0x3b8 <StringHelper_SplitAndGet+0xa4>
     376:	ab 01       	movw	r20, r22
     378:	4f 5f       	subi	r20, 0xFF	; 255
     37a:	5f 4f       	sbci	r21, 0xFF	; 255
     37c:	4f 3f       	cpi	r20, 0xFF	; 255
     37e:	51 05       	cpc	r21, r1
     380:	89 f0       	breq	.+34     	; 0x3a4 <StringHelper_SplitAndGet+0x90>
     382:	80 f0       	brcs	.+32     	; 0x3a4 <StringHelper_SplitAndGet+0x90>
     384:	40 e0       	ldi	r20, 0x00	; 0
     386:	50 e0       	ldi	r21, 0x00	; 0
     388:	19 c0       	rjmp	.+50     	; 0x3bc <StringHelper_SplitAndGet+0xa8>
     38a:	fd 01       	movw	r30, r26
     38c:	ec 0f       	add	r30, r28
     38e:	fd 1f       	adc	r31, r29
     390:	e2 0f       	add	r30, r18
     392:	f3 1f       	adc	r31, r19
     394:	90 81       	ld	r25, Z
     396:	f9 01       	movw	r30, r18
     398:	e8 5a       	subi	r30, 0xA8	; 168
     39a:	fc 4f       	sbci	r31, 0xFC	; 252
     39c:	90 83       	st	Z, r25
     39e:	2f 5f       	subi	r18, 0xFF	; 255
     3a0:	3f 4f       	sbci	r19, 0xFF	; 255
     3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <StringHelper_SplitAndGet+0x94>
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	26 17       	cp	r18, r22
     3aa:	37 07       	cpc	r19, r23
     3ac:	70 f3       	brcs	.-36     	; 0x38a <StringHelper_SplitAndGet+0x76>
     3ae:	f9 01       	movw	r30, r18
     3b0:	e8 5a       	subi	r30, 0xA8	; 168
     3b2:	fc 4f       	sbci	r31, 0xFC	; 252
     3b4:	10 82       	st	Z, r1
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <StringHelper_SplitAndGet+0xa8>
     3b8:	40 e0       	ldi	r20, 0x00	; 0
     3ba:	50 e0       	ldi	r21, 0x00	; 0
     3bc:	ca 01       	movw	r24, r20
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	1f 91       	pop	r17
     3c4:	0f 91       	pop	r16
     3c6:	08 95       	ret

000003c8 <StringHelper_startsWith>:


BOOL StringHelper_startsWith(const char *pre, const char *str)
{
     3c8:	cf 92       	push	r12
     3ca:	df 92       	push	r13
     3cc:	ef 92       	push	r14
     3ce:	ff 92       	push	r15
     3d0:	0f 93       	push	r16
     3d2:	1f 93       	push	r17
    ULONG lenpre = strlen(pre),
     3d4:	fc 01       	movw	r30, r24
     3d6:	01 90       	ld	r0, Z+
     3d8:	00 20       	and	r0, r0
     3da:	e9 f7       	brne	.-6      	; 0x3d6 <StringHelper_startsWith+0xe>
     3dc:	31 97       	sbiw	r30, 0x01	; 1
     3de:	af 01       	movw	r20, r30
     3e0:	48 1b       	sub	r20, r24
     3e2:	59 0b       	sbc	r21, r25
     3e4:	6a 01       	movw	r12, r20
     3e6:	e1 2c       	mov	r14, r1
     3e8:	f1 2c       	mov	r15, r1
    	  lenstr = strlen(str);
     3ea:	fb 01       	movw	r30, r22
     3ec:	01 90       	ld	r0, Z+
     3ee:	00 20       	and	r0, r0
     3f0:	e9 f7       	brne	.-6      	; 0x3ec <StringHelper_startsWith+0x24>
     3f2:	31 97       	sbiw	r30, 0x01	; 1
     3f4:	8f 01       	movw	r16, r30
     3f6:	06 1b       	sub	r16, r22
     3f8:	17 0b       	sbc	r17, r23
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	30 e0       	ldi	r19, 0x00	; 0

    return lenstr < lenpre ? FALSE : (memcmp(pre, str, lenpre) == 0);
     3fe:	0c 15       	cp	r16, r12
     400:	1d 05       	cpc	r17, r13
     402:	2e 05       	cpc	r18, r14
     404:	3f 05       	cpc	r19, r15
     406:	30 f0       	brcs	.+12     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     408:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <memcmp>
     40c:	89 2b       	or	r24, r25
     40e:	21 f0       	breq	.+8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	03 c0       	rjmp	.+6      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	01 c0       	rjmp	.+2      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     418:	81 e0       	ldi	r24, 0x01	; 1
}
     41a:	1f 91       	pop	r17
     41c:	0f 91       	pop	r16
     41e:	ff 90       	pop	r15
     420:	ef 90       	pop	r14
     422:	df 90       	pop	r13
     424:	cf 90       	pop	r12
     426:	08 95       	ret

00000428 <LCD_Job_Callback>:
 *
 * Function to get a callback once the scheduled job is done
 **/
void LCD_Job_Callback(void)
{
	if(LCD_AreJobsAvailable())
     428:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <g_LCDJobs_Length>
     42c:	88 23       	and	r24, r24
     42e:	79 f0       	breq	.+30     	; 0x44e <LCD_Job_Callback+0x26>
	{
		LCD_JobConfig * CurrentJob = LCD_GetNextJobInQueue();
     430:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <g_LCDJobs_HeadIndex>
     434:	90 e0       	ldi	r25, 0x00	; 0

		CurrentJob->Status = C_LCD_Job_Status_Completed;
     436:	fc 01       	movw	r30, r24
     438:	ee 0f       	add	r30, r30
     43a:	ff 1f       	adc	r31, r31
     43c:	ee 0f       	add	r30, r30
     43e:	ff 1f       	adc	r31, r31
     440:	8e 0f       	add	r24, r30
     442:	9f 1f       	adc	r25, r31
     444:	fc 01       	movw	r30, r24
     446:	ed 59       	subi	r30, 0x9D	; 157
     448:	fb 4f       	sbci	r31, 0xFB	; 251
     44a:	83 e0       	ldi	r24, 0x03	; 3
     44c:	84 83       	std	Z+4, r24	; 0x04
     44e:	08 95       	ret

00000450 <lcd_data>:
	}
}

void lcd_data(unsigned char a)
{
	if(a&0x10) {d4_hi;} else {d4_lo;}
     450:	84 ff       	sbrs	r24, 4
     452:	04 c0       	rjmp	.+8      	; 0x45c <lcd_data+0xc>
     454:	92 b3       	in	r25, 0x12	; 18
     456:	90 61       	ori	r25, 0x10	; 16
     458:	92 bb       	out	0x12, r25	; 18
     45a:	03 c0       	rjmp	.+6      	; 0x462 <lcd_data+0x12>
     45c:	92 b3       	in	r25, 0x12	; 18
     45e:	9f 7e       	andi	r25, 0xEF	; 239
     460:	92 bb       	out	0x12, r25	; 18
	if(a&0x20) {d5_hi;} else {d5_lo;}
     462:	85 ff       	sbrs	r24, 5
     464:	04 c0       	rjmp	.+8      	; 0x46e <lcd_data+0x1e>
     466:	92 b3       	in	r25, 0x12	; 18
     468:	90 62       	ori	r25, 0x20	; 32
     46a:	92 bb       	out	0x12, r25	; 18
     46c:	03 c0       	rjmp	.+6      	; 0x474 <lcd_data+0x24>
     46e:	92 b3       	in	r25, 0x12	; 18
     470:	9f 7d       	andi	r25, 0xDF	; 223
     472:	92 bb       	out	0x12, r25	; 18
	if(a&0x40) {d6_hi;} else {d6_lo;}
     474:	86 ff       	sbrs	r24, 6
     476:	04 c0       	rjmp	.+8      	; 0x480 <lcd_data+0x30>
     478:	92 b3       	in	r25, 0x12	; 18
     47a:	90 64       	ori	r25, 0x40	; 64
     47c:	92 bb       	out	0x12, r25	; 18
     47e:	03 c0       	rjmp	.+6      	; 0x486 <lcd_data+0x36>
     480:	92 b3       	in	r25, 0x12	; 18
     482:	9f 7b       	andi	r25, 0xBF	; 191
     484:	92 bb       	out	0x12, r25	; 18
	if(a&0x80) {d7_hi;} else {d7_lo;}
     486:	88 23       	and	r24, r24
     488:	24 f4       	brge	.+8      	; 0x492 <lcd_data+0x42>
     48a:	82 b3       	in	r24, 0x12	; 18
     48c:	80 68       	ori	r24, 0x80	; 128
     48e:	82 bb       	out	0x12, r24	; 18
     490:	08 95       	ret
     492:	82 b3       	in	r24, 0x12	; 18
     494:	8f 77       	andi	r24, 0x7F	; 127
     496:	82 bb       	out	0x12, r24	; 18
     498:	08 95       	ret

0000049a <lcd_cmd>:
}

void lcd_cmd(unsigned char a)
{
     49a:	cf 93       	push	r28
     49c:	c8 2f       	mov	r28, r24
	lcd_data(a&0xf0);
     49e:	80 7f       	andi	r24, 0xF0	; 240
     4a0:	0e 94 28 02 	call	0x450	; 0x450 <lcd_data>
	rs_lo;
     4a4:	88 b3       	in	r24, 0x18	; 24
     4a6:	87 7f       	andi	r24, 0xF7	; 247
     4a8:	88 bb       	out	0x18, r24	; 24
	en_hi;
     4aa:	88 b3       	in	r24, 0x18	; 24
     4ac:	80 61       	ori	r24, 0x10	; 16
     4ae:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4b0:	87 e8       	ldi	r24, 0x87	; 135
     4b2:	93 e1       	ldi	r25, 0x13	; 19
     4b4:	01 97       	sbiw	r24, 0x01	; 1
     4b6:	f1 f7       	brne	.-4      	; 0x4b4 <lcd_cmd+0x1a>
     4b8:	00 c0       	rjmp	.+0      	; 0x4ba <lcd_cmd+0x20>
     4ba:	00 00       	nop
	_delay_ms(5);
	en_lo;
     4bc:	88 b3       	in	r24, 0x18	; 24
     4be:	8f 7e       	andi	r24, 0xEF	; 239
     4c0:	88 bb       	out	0x18, r24	; 24
	
	lcd_data((a<<4)&0xf0);
     4c2:	8c 2f       	mov	r24, r28
     4c4:	82 95       	swap	r24
     4c6:	80 7f       	andi	r24, 0xF0	; 240
     4c8:	0e 94 28 02 	call	0x450	; 0x450 <lcd_data>
	rs_lo;
     4cc:	88 b3       	in	r24, 0x18	; 24
     4ce:	87 7f       	andi	r24, 0xF7	; 247
     4d0:	88 bb       	out	0x18, r24	; 24
	en_hi;
     4d2:	88 b3       	in	r24, 0x18	; 24
     4d4:	80 61       	ori	r24, 0x10	; 16
     4d6:	88 bb       	out	0x18, r24	; 24
     4d8:	87 e8       	ldi	r24, 0x87	; 135
     4da:	93 e1       	ldi	r25, 0x13	; 19
     4dc:	01 97       	sbiw	r24, 0x01	; 1
     4de:	f1 f7       	brne	.-4      	; 0x4dc <lcd_cmd+0x42>
     4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <lcd_cmd+0x48>
     4e2:	00 00       	nop
	_delay_ms(5);
	en_lo;
     4e4:	88 b3       	in	r24, 0x18	; 24
     4e6:	8f 7e       	andi	r24, 0xEF	; 239
     4e8:	88 bb       	out	0x18, r24	; 24
}
     4ea:	cf 91       	pop	r28
     4ec:	08 95       	ret

000004ee <lcd_init>:


static void lcd_init()
{
	lcd_cmd(0x02);
     4ee:	82 e0       	ldi	r24, 0x02	; 2
     4f0:	0e 94 4d 02 	call	0x49a	; 0x49a <lcd_cmd>
	lcd_cmd(0x28);
     4f4:	88 e2       	ldi	r24, 0x28	; 40
     4f6:	0e 94 4d 02 	call	0x49a	; 0x49a <lcd_cmd>
	lcd_cmd(0x0e);
     4fa:	8e e0       	ldi	r24, 0x0E	; 14
     4fc:	0e 94 4d 02 	call	0x49a	; 0x49a <lcd_cmd>
	lcd_cmd(0x0c);
     500:	8c e0       	ldi	r24, 0x0C	; 12
     502:	0e 94 4d 02 	call	0x49a	; 0x49a <lcd_cmd>
	lcd_cmd(0x06);
     506:	86 e0       	ldi	r24, 0x06	; 6
     508:	0e 94 4d 02 	call	0x49a	; 0x49a <lcd_cmd>
	lcd_cmd(0x01);
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	0e 94 4d 02 	call	0x49a	; 0x49a <lcd_cmd>
	lcd_cmd(0x80);
     512:	80 e8       	ldi	r24, 0x80	; 128
     514:	0e 94 4d 02 	call	0x49a	; 0x49a <lcd_cmd>
     518:	08 95       	ret

0000051a <Display_String>:
}

void Display_String(const char * data)
{
	LCD_ScheduleJob(data,0,1);
     51a:	41 e0       	ldi	r20, 0x01	; 1
     51c:	60 e0       	ldi	r22, 0x00	; 0
     51e:	0e 94 26 04 	call	0x84c	; 0x84c <LCD_ScheduleJob>
     522:	08 95       	ret

00000524 <LCD_command>:
}

void LCD_command(UBYTE cmd)
{
	LCD_ScheduleJob(NULL,cmd,0);
     524:	40 e0       	ldi	r20, 0x00	; 0
     526:	68 2f       	mov	r22, r24
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	0e 94 26 04 	call	0x84c	; 0x84c <LCD_ScheduleJob>
     530:	08 95       	ret

00000532 <DebugStringRow1>:
}

void DebugStringRow1(const char *data)
{
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	ec 01       	movw	r28, r24
	LCD_command(0x80);
     538:	80 e8       	ldi	r24, 0x80	; 128
     53a:	0e 94 92 02 	call	0x524	; 0x524 <LCD_command>
	Display_String(data);
     53e:	ce 01       	movw	r24, r28
     540:	0e 94 8d 02 	call	0x51a	; 0x51a <Display_String>
}
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	08 95       	ret

0000054a <DebugStringRow2>:

void DebugStringRow2(const char *data2)
{
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	ec 01       	movw	r28, r24
	LCD_command(0xC0);
     550:	80 ec       	ldi	r24, 0xC0	; 192
     552:	0e 94 92 02 	call	0x524	; 0x524 <LCD_command>
	Display_String(data2);
     556:	ce 01       	movw	r24, r28
     558:	0e 94 8d 02 	call	0x51a	; 0x51a <Display_String>
}
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	08 95       	ret

00000562 <LCD_Init>:

void LCD_Init()
{
	LCD_ClearJobs();
     562:	0e 94 a3 04 	call	0x946	; 0x946 <LCD_ClearJobs>
	DDRD = 0xFF;
     566:	8f ef       	ldi	r24, 0xFF	; 255
     568:	81 bb       	out	0x11, r24	; 17
	DDRB = 0xFF;
     56a:	87 bb       	out	0x17, r24	; 23
	lcd_init();
     56c:	0e 94 77 02 	call	0x4ee	; 0x4ee <lcd_init>
	Display_String("Init");
     570:	8e e6       	ldi	r24, 0x6E	; 110
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	0e 94 8d 02 	call	0x51a	; 0x51a <Display_String>
     578:	08 95       	ret

0000057a <LCD_Mainfunction>:
}

void LCD_Mainfunction()
{
	
	if (LCD_AreJobsAvailable())
     57a:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <g_LCDJobs_Length>
     57e:	88 23       	and	r24, r24
     580:	91 f0       	breq	.+36     	; 0x5a6 <LCD_Mainfunction+0x2c>
	{
		LCD_JobConfig * CurrentJob = LCD_GetNextJobInQueue();
     582:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <g_LCDJobs_HeadIndex>
     586:	90 e0       	ldi	r25, 0x00	; 0
		
		if(CurrentJob->Status == C_LCD_Job_Status_Completed)
     588:	fc 01       	movw	r30, r24
     58a:	ee 0f       	add	r30, r30
     58c:	ff 1f       	adc	r31, r31
     58e:	ee 0f       	add	r30, r30
     590:	ff 1f       	adc	r31, r31
     592:	8e 0f       	add	r24, r30
     594:	9f 1f       	adc	r25, r31
     596:	fc 01       	movw	r30, r24
     598:	ed 59       	subi	r30, 0x9D	; 157
     59a:	fb 4f       	sbci	r31, 0xFB	; 251
     59c:	84 81       	ldd	r24, Z+4	; 0x04
     59e:	83 30       	cpi	r24, 0x03	; 3
     5a0:	11 f4       	brne	.+4      	; 0x5a6 <LCD_Mainfunction+0x2c>
		{
			LCD_CompleteJob();
     5a2:	0e 94 73 04 	call	0x8e6	; 0x8e6 <LCD_CompleteJob>
		}
	}
	
	if (LCD_AreJobsAvailable())
     5a6:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <g_LCDJobs_Length>
     5aa:	88 23       	and	r24, r24
     5ac:	09 f4       	brne	.+2      	; 0x5b0 <LCD_Mainfunction+0x36>
     5ae:	0a c1       	rjmp	.+532    	; 0x7c4 <LCD_Mainfunction+0x24a>
	{
		LCD_JobConfig * CurrentJob = LCD_GetNextJobInQueue();
     5b0:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <g_LCDJobs_HeadIndex>
     5b4:	90 e0       	ldi	r25, 0x00	; 0
		
		if(CurrentJob->Status == C_LCD_Job_Status_Scheduled)
     5b6:	fc 01       	movw	r30, r24
     5b8:	ee 0f       	add	r30, r30
     5ba:	ff 1f       	adc	r31, r31
     5bc:	ee 0f       	add	r30, r30
     5be:	ff 1f       	adc	r31, r31
     5c0:	e8 0f       	add	r30, r24
     5c2:	f9 1f       	adc	r31, r25
     5c4:	ed 59       	subi	r30, 0x9D	; 157
     5c6:	fb 4f       	sbci	r31, 0xFB	; 251
     5c8:	34 81       	ldd	r19, Z+4	; 0x04
     5ca:	31 30       	cpi	r19, 0x01	; 1
     5cc:	a1 f5       	brne	.+104    	; 0x636 <LCD_Mainfunction+0xbc>
		{
			if(CurrentJob->InDataType == FALSE)
     5ce:	fc 01       	movw	r30, r24
     5d0:	ee 0f       	add	r30, r30
     5d2:	ff 1f       	adc	r31, r31
     5d4:	ee 0f       	add	r30, r30
     5d6:	ff 1f       	adc	r31, r31
     5d8:	e8 0f       	add	r30, r24
     5da:	f9 1f       	adc	r31, r25
     5dc:	ed 59       	subi	r30, 0x9D	; 157
     5de:	fb 4f       	sbci	r31, 0xFB	; 251
     5e0:	23 81       	ldd	r18, Z+3	; 0x03
     5e2:	21 11       	cpse	r18, r1
     5e4:	14 c0       	rjmp	.+40     	; 0x60e <LCD_Mainfunction+0x94>
			{
				if(LCD_State == C_LCD_Idle)
     5e6:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <__data_end>
     5ea:	21 11       	cpse	r18, r1
     5ec:	24 c0       	rjmp	.+72     	; 0x636 <LCD_Mainfunction+0xbc>
				{
					if(CurrentJob->CmdData)
     5ee:	fc 01       	movw	r30, r24
     5f0:	ee 0f       	add	r30, r30
     5f2:	ff 1f       	adc	r31, r31
     5f4:	ee 0f       	add	r30, r30
     5f6:	ff 1f       	adc	r31, r31
     5f8:	e8 0f       	add	r30, r24
     5fa:	f9 1f       	adc	r31, r25
     5fc:	ed 59       	subi	r30, 0x9D	; 157
     5fe:	fb 4f       	sbci	r31, 0xFB	; 251
     600:	20 81       	ld	r18, Z
     602:	22 23       	and	r18, r18
     604:	c1 f0       	breq	.+48     	; 0x636 <LCD_Mainfunction+0xbc>
					{
						LCD_State = C_LCD_1stWrite;	
     606:	22 e0       	ldi	r18, 0x02	; 2
     608:	20 93 3a 03 	sts	0x033A, r18	; 0x80033a <__data_end>
     60c:	14 c0       	rjmp	.+40     	; 0x636 <LCD_Mainfunction+0xbc>
					}
				}
			}
			else
			{
				if(LCD_State == C_LCD_Idle)
     60e:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <__data_end>
     612:	21 11       	cpse	r18, r1
     614:	10 c0       	rjmp	.+32     	; 0x636 <LCD_Mainfunction+0xbc>
				{
					if(CurrentJob->Message != NULL)
     616:	fc 01       	movw	r30, r24
     618:	ee 0f       	add	r30, r30
     61a:	ff 1f       	adc	r31, r31
     61c:	ee 0f       	add	r30, r30
     61e:	ff 1f       	adc	r31, r31
     620:	e8 0f       	add	r30, r24
     622:	f9 1f       	adc	r31, r25
     624:	ed 59       	subi	r30, 0x9D	; 157
     626:	fb 4f       	sbci	r31, 0xFB	; 251
     628:	41 81       	ldd	r20, Z+1	; 0x01
     62a:	52 81       	ldd	r21, Z+2	; 0x02
     62c:	45 2b       	or	r20, r21
     62e:	19 f0       	breq	.+6      	; 0x636 <LCD_Mainfunction+0xbc>
					{
						LCD_State = C_LCD_1stWrite;
     630:	22 e0       	ldi	r18, 0x02	; 2
     632:	20 93 3a 03 	sts	0x033A, r18	; 0x80033a <__data_end>
					}
				}
			}
		}

		switch(LCD_State)
     636:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <__data_end>
     63a:	23 30       	cpi	r18, 0x03	; 3
     63c:	09 f4       	brne	.+2      	; 0x640 <LCD_Mainfunction+0xc6>
     63e:	51 c0       	rjmp	.+162    	; 0x6e2 <LCD_Mainfunction+0x168>
     640:	28 f4       	brcc	.+10     	; 0x64c <LCD_Mainfunction+0xd2>
     642:	22 23       	and	r18, r18
     644:	51 f0       	breq	.+20     	; 0x65a <LCD_Mainfunction+0xe0>
     646:	22 30       	cpi	r18, 0x02	; 2
     648:	71 f0       	breq	.+28     	; 0x666 <LCD_Mainfunction+0xec>
     64a:	08 95       	ret
     64c:	24 30       	cpi	r18, 0x04	; 4
     64e:	09 f4       	brne	.+2      	; 0x652 <LCD_Mainfunction+0xd8>
     650:	4f c0       	rjmp	.+158    	; 0x6f0 <LCD_Mainfunction+0x176>
     652:	25 30       	cpi	r18, 0x05	; 5
     654:	09 f4       	brne	.+2      	; 0x658 <LCD_Mainfunction+0xde>
     656:	8a c0       	rjmp	.+276    	; 0x76c <LCD_Mainfunction+0x1f2>
     658:	08 95       	ret
		{
			case C_LCD_Idle:
			{
				if (CurrentJob->Status == C_LCD_Job_Status_WriteInProgress)
     65a:	32 30       	cpi	r19, 0x02	; 2
     65c:	09 f0       	breq	.+2      	; 0x660 <LCD_Mainfunction+0xe6>
     65e:	b2 c0       	rjmp	.+356    	; 0x7c4 <LCD_Mainfunction+0x24a>
				{
					//CurrentJob->Status = C_LCD_Job_Status_Completed;
					LCD_Job_Callback();
     660:	0e 94 14 02 	call	0x428	; 0x428 <LCD_Job_Callback>
     664:	08 95       	ret
							
			}
			break;
			case C_LCD_1stWrite:
			{
				CurrentJob->Status = C_LCD_Job_Status_WriteInProgress;
     666:	fc 01       	movw	r30, r24
     668:	ee 0f       	add	r30, r30
     66a:	ff 1f       	adc	r31, r31
     66c:	ee 0f       	add	r30, r30
     66e:	ff 1f       	adc	r31, r31
     670:	e8 0f       	add	r30, r24
     672:	f9 1f       	adc	r31, r25
     674:	ed 59       	subi	r30, 0x9D	; 157
     676:	fb 4f       	sbci	r31, 0xFB	; 251
     678:	22 e0       	ldi	r18, 0x02	; 2
     67a:	24 83       	std	Z+4, r18	; 0x04
							
				if(CurrentJob->InDataType == FALSE)
     67c:	23 81       	ldd	r18, Z+3	; 0x03
     67e:	21 11       	cpse	r18, r1
     680:	15 c0       	rjmp	.+42     	; 0x6ac <LCD_Mainfunction+0x132>
				{
					lcd_data(CurrentJob->CmdData&0xf0);
     682:	fc 01       	movw	r30, r24
     684:	ee 0f       	add	r30, r30
     686:	ff 1f       	adc	r31, r31
     688:	ee 0f       	add	r30, r30
     68a:	ff 1f       	adc	r31, r31
     68c:	8e 0f       	add	r24, r30
     68e:	9f 1f       	adc	r25, r31
     690:	fc 01       	movw	r30, r24
     692:	ed 59       	subi	r30, 0x9D	; 157
     694:	fb 4f       	sbci	r31, 0xFB	; 251
     696:	80 81       	ld	r24, Z
     698:	80 7f       	andi	r24, 0xF0	; 240
     69a:	0e 94 28 02 	call	0x450	; 0x450 <lcd_data>
					rs_lo;
     69e:	88 b3       	in	r24, 0x18	; 24
     6a0:	87 7f       	andi	r24, 0xF7	; 247
     6a2:	88 bb       	out	0x18, r24	; 24
					en_hi;
     6a4:	88 b3       	in	r24, 0x18	; 24
     6a6:	80 61       	ori	r24, 0x10	; 16
     6a8:	88 bb       	out	0x18, r24	; 24
     6aa:	17 c0       	rjmp	.+46     	; 0x6da <LCD_Mainfunction+0x160>
				}
				else
				{
					lcd_data((*(CurrentJob->Message))&0xf0);
     6ac:	fc 01       	movw	r30, r24
     6ae:	ee 0f       	add	r30, r30
     6b0:	ff 1f       	adc	r31, r31
     6b2:	ee 0f       	add	r30, r30
     6b4:	ff 1f       	adc	r31, r31
     6b6:	8e 0f       	add	r24, r30
     6b8:	9f 1f       	adc	r25, r31
     6ba:	fc 01       	movw	r30, r24
     6bc:	ed 59       	subi	r30, 0x9D	; 157
     6be:	fb 4f       	sbci	r31, 0xFB	; 251
     6c0:	01 80       	ldd	r0, Z+1	; 0x01
     6c2:	f2 81       	ldd	r31, Z+2	; 0x02
     6c4:	e0 2d       	mov	r30, r0
     6c6:	80 81       	ld	r24, Z
     6c8:	80 7f       	andi	r24, 0xF0	; 240
     6ca:	0e 94 28 02 	call	0x450	; 0x450 <lcd_data>
					rs_hi;
     6ce:	88 b3       	in	r24, 0x18	; 24
     6d0:	88 60       	ori	r24, 0x08	; 8
     6d2:	88 bb       	out	0x18, r24	; 24
					en_hi;
     6d4:	88 b3       	in	r24, 0x18	; 24
     6d6:	80 61       	ori	r24, 0x10	; 16
     6d8:	88 bb       	out	0x18, r24	; 24
				}
							
				LCD_State = C_LCD_1stEnable_Off;
     6da:	83 e0       	ldi	r24, 0x03	; 3
     6dc:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <__data_end>
			}
			break;
     6e0:	08 95       	ret
			case C_LCD_1stEnable_Off:
			{
				en_lo;
     6e2:	88 b3       	in	r24, 0x18	; 24
     6e4:	8f 7e       	andi	r24, 0xEF	; 239
     6e6:	88 bb       	out	0x18, r24	; 24
				LCD_State = C_LCD_2ndWrite_EN;
     6e8:	84 e0       	ldi	r24, 0x04	; 4
     6ea:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <__data_end>
			}
			break;
     6ee:	08 95       	ret
			case C_LCD_2ndWrite_EN:
			{
				if(CurrentJob->InDataType == FALSE)
     6f0:	fc 01       	movw	r30, r24
     6f2:	ee 0f       	add	r30, r30
     6f4:	ff 1f       	adc	r31, r31
     6f6:	ee 0f       	add	r30, r30
     6f8:	ff 1f       	adc	r31, r31
     6fa:	e8 0f       	add	r30, r24
     6fc:	f9 1f       	adc	r31, r25
     6fe:	ed 59       	subi	r30, 0x9D	; 157
     700:	fb 4f       	sbci	r31, 0xFB	; 251
     702:	23 81       	ldd	r18, Z+3	; 0x03
     704:	21 11       	cpse	r18, r1
     706:	16 c0       	rjmp	.+44     	; 0x734 <LCD_Mainfunction+0x1ba>
				{
					lcd_data((CurrentJob->CmdData <<4)&0xf0);
     708:	fc 01       	movw	r30, r24
     70a:	ee 0f       	add	r30, r30
     70c:	ff 1f       	adc	r31, r31
     70e:	ee 0f       	add	r30, r30
     710:	ff 1f       	adc	r31, r31
     712:	8e 0f       	add	r24, r30
     714:	9f 1f       	adc	r25, r31
     716:	fc 01       	movw	r30, r24
     718:	ed 59       	subi	r30, 0x9D	; 157
     71a:	fb 4f       	sbci	r31, 0xFB	; 251
     71c:	80 81       	ld	r24, Z
     71e:	82 95       	swap	r24
     720:	80 7f       	andi	r24, 0xF0	; 240
     722:	0e 94 28 02 	call	0x450	; 0x450 <lcd_data>
					rs_lo;
     726:	88 b3       	in	r24, 0x18	; 24
     728:	87 7f       	andi	r24, 0xF7	; 247
     72a:	88 bb       	out	0x18, r24	; 24
					en_hi;
     72c:	88 b3       	in	r24, 0x18	; 24
     72e:	80 61       	ori	r24, 0x10	; 16
     730:	88 bb       	out	0x18, r24	; 24
     732:	18 c0       	rjmp	.+48     	; 0x764 <LCD_Mainfunction+0x1ea>
				}
				else
				{
					lcd_data(((*(CurrentJob->Message))<<4)&0xf0);
     734:	fc 01       	movw	r30, r24
     736:	ee 0f       	add	r30, r30
     738:	ff 1f       	adc	r31, r31
     73a:	ee 0f       	add	r30, r30
     73c:	ff 1f       	adc	r31, r31
     73e:	8e 0f       	add	r24, r30
     740:	9f 1f       	adc	r25, r31
     742:	fc 01       	movw	r30, r24
     744:	ed 59       	subi	r30, 0x9D	; 157
     746:	fb 4f       	sbci	r31, 0xFB	; 251
     748:	01 80       	ldd	r0, Z+1	; 0x01
     74a:	f2 81       	ldd	r31, Z+2	; 0x02
     74c:	e0 2d       	mov	r30, r0
     74e:	80 81       	ld	r24, Z
     750:	82 95       	swap	r24
     752:	80 7f       	andi	r24, 0xF0	; 240
     754:	0e 94 28 02 	call	0x450	; 0x450 <lcd_data>
					rs_hi;
     758:	88 b3       	in	r24, 0x18	; 24
     75a:	88 60       	ori	r24, 0x08	; 8
     75c:	88 bb       	out	0x18, r24	; 24
					en_hi;
     75e:	88 b3       	in	r24, 0x18	; 24
     760:	80 61       	ori	r24, 0x10	; 16
     762:	88 bb       	out	0x18, r24	; 24
				}
							
				LCD_State = C_LCD_2ndEnable_Off_EN;
     764:	85 e0       	ldi	r24, 0x05	; 5
     766:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <__data_end>
			}
			break;
     76a:	08 95       	ret
			case C_LCD_2ndEnable_Off_EN:
			{
				en_lo;
     76c:	28 b3       	in	r18, 0x18	; 24
     76e:	2f 7e       	andi	r18, 0xEF	; 239
     770:	28 bb       	out	0x18, r18	; 24
				
				if(CurrentJob->InDataType)
     772:	fc 01       	movw	r30, r24
     774:	ee 0f       	add	r30, r30
     776:	ff 1f       	adc	r31, r31
     778:	ee 0f       	add	r30, r30
     77a:	ff 1f       	adc	r31, r31
     77c:	e8 0f       	add	r30, r24
     77e:	f9 1f       	adc	r31, r25
     780:	ed 59       	subi	r30, 0x9D	; 157
     782:	fb 4f       	sbci	r31, 0xFB	; 251
     784:	23 81       	ldd	r18, Z+3	; 0x03
     786:	22 23       	and	r18, r18
     788:	d9 f0       	breq	.+54     	; 0x7c0 <LCD_Mainfunction+0x246>
				{
					CurrentJob->Message++;
     78a:	fc 01       	movw	r30, r24
     78c:	ee 0f       	add	r30, r30
     78e:	ff 1f       	adc	r31, r31
     790:	ee 0f       	add	r30, r30
     792:	ff 1f       	adc	r31, r31
     794:	8e 0f       	add	r24, r30
     796:	9f 1f       	adc	r25, r31
     798:	fc 01       	movw	r30, r24
     79a:	ed 59       	subi	r30, 0x9D	; 157
     79c:	fb 4f       	sbci	r31, 0xFB	; 251
     79e:	a1 81       	ldd	r26, Z+1	; 0x01
     7a0:	b2 81       	ldd	r27, Z+2	; 0x02
     7a2:	cd 01       	movw	r24, r26
     7a4:	01 96       	adiw	r24, 0x01	; 1
     7a6:	92 83       	std	Z+2, r25	; 0x02
     7a8:	81 83       	std	Z+1, r24	; 0x01
					if((*(CurrentJob->Message)) != '\0')
     7aa:	11 96       	adiw	r26, 0x01	; 1
     7ac:	8c 91       	ld	r24, X
     7ae:	88 23       	and	r24, r24
     7b0:	21 f0       	breq	.+8      	; 0x7ba <LCD_Mainfunction+0x240>
					{
						LCD_State = C_LCD_1stWrite;
     7b2:	82 e0       	ldi	r24, 0x02	; 2
     7b4:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <__data_end>
     7b8:	08 95       	ret
					}
					else
					{
						LCD_State = C_LCD_Idle;
     7ba:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <__data_end>
     7be:	08 95       	ret
					}
				}
				else
				{
					LCD_State = C_LCD_Idle;
     7c0:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <__data_end>
     7c4:	08 95       	ret

000007c6 <LCD_CheckIfJobIsAlreadyScheduled>:
/***************************************************/
/* Function Definitions                            */
/***************************************************/

static BOOL LCD_CheckIfJobIsAlreadyScheduled(const char * Command,UBYTE Cmd,BOOL InputDataType)
{
     7c6:	dc 01       	movw	r26, r24
	BOOL retval = FALSE;

	for(int i = g_LCDJobs_HeadIndex; i < g_LCDJobs_Length; i++)
     7c8:	20 91 3c 03 	lds	r18, 0x033C	; 0x80033c <g_LCDJobs_HeadIndex>
     7cc:	30 e0       	ldi	r19, 0x00	; 0
/* Function Definitions                            */
/***************************************************/

static BOOL LCD_CheckIfJobIsAlreadyScheduled(const char * Command,UBYTE Cmd,BOOL InputDataType)
{
	BOOL retval = FALSE;
     7ce:	80 e0       	ldi	r24, 0x00	; 0

	for(int i = g_LCDJobs_HeadIndex; i < g_LCDJobs_Length; i++)
     7d0:	36 c0       	rjmp	.+108    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
	{
		if((LCDJobs[i].InDataType == InputDataType) && LCDJobs[i].CmdData == Cmd && LCDJobs[i].Message == Command )
     7d2:	f9 01       	movw	r30, r18
     7d4:	ee 0f       	add	r30, r30
     7d6:	ff 1f       	adc	r31, r31
     7d8:	ee 0f       	add	r30, r30
     7da:	ff 1f       	adc	r31, r31
     7dc:	e2 0f       	add	r30, r18
     7de:	f3 1f       	adc	r31, r19
     7e0:	ed 59       	subi	r30, 0x9D	; 157
     7e2:	fb 4f       	sbci	r31, 0xFB	; 251
     7e4:	93 81       	ldd	r25, Z+3	; 0x03
     7e6:	94 13       	cpse	r25, r20
     7e8:	28 c0       	rjmp	.+80     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     7ea:	f9 01       	movw	r30, r18
     7ec:	ee 0f       	add	r30, r30
     7ee:	ff 1f       	adc	r31, r31
     7f0:	ee 0f       	add	r30, r30
     7f2:	ff 1f       	adc	r31, r31
     7f4:	e2 0f       	add	r30, r18
     7f6:	f3 1f       	adc	r31, r19
     7f8:	ed 59       	subi	r30, 0x9D	; 157
     7fa:	fb 4f       	sbci	r31, 0xFB	; 251
     7fc:	90 81       	ld	r25, Z
     7fe:	96 13       	cpse	r25, r22
     800:	1c c0       	rjmp	.+56     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     802:	f9 01       	movw	r30, r18
     804:	ee 0f       	add	r30, r30
     806:	ff 1f       	adc	r31, r31
     808:	ee 0f       	add	r30, r30
     80a:	ff 1f       	adc	r31, r31
     80c:	e2 0f       	add	r30, r18
     80e:	f3 1f       	adc	r31, r19
     810:	ed 59       	subi	r30, 0x9D	; 157
     812:	fb 4f       	sbci	r31, 0xFB	; 251
     814:	01 80       	ldd	r0, Z+1	; 0x01
     816:	f2 81       	ldd	r31, Z+2	; 0x02
     818:	e0 2d       	mov	r30, r0
     81a:	ea 17       	cp	r30, r26
     81c:	fb 07       	cpc	r31, r27
     81e:	69 f4       	brne	.+26     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
		{
			// If there is the same job already been scheduled, then check if it is in progress
			if(LCDJobs[i].Status == C_LCD_Job_Status_Scheduled)
     820:	f9 01       	movw	r30, r18
     822:	ee 0f       	add	r30, r30
     824:	ff 1f       	adc	r31, r31
     826:	ee 0f       	add	r30, r30
     828:	ff 1f       	adc	r31, r31
     82a:	e2 0f       	add	r30, r18
     82c:	f3 1f       	adc	r31, r19
     82e:	ed 59       	subi	r30, 0x9D	; 157
     830:	fb 4f       	sbci	r31, 0xFB	; 251
     832:	94 81       	ldd	r25, Z+4	; 0x04
     834:	91 30       	cpi	r25, 0x01	; 1
     836:	09 f4       	brne	.+2      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
			{
				retval = TRUE;
     838:	81 e0       	ldi	r24, 0x01	; 1

static BOOL LCD_CheckIfJobIsAlreadyScheduled(const char * Command,UBYTE Cmd,BOOL InputDataType)
{
	BOOL retval = FALSE;

	for(int i = g_LCDJobs_HeadIndex; i < g_LCDJobs_Length; i++)
     83a:	2f 5f       	subi	r18, 0xFF	; 255
     83c:	3f 4f       	sbci	r19, 0xFF	; 255
     83e:	e0 91 3d 03 	lds	r30, 0x033D	; 0x80033d <g_LCDJobs_Length>
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	2e 17       	cp	r18, r30
     846:	3f 07       	cpc	r19, r31
     848:	24 f2       	brlt	.-120    	; 0x7d2 <LCD_CheckIfJobIsAlreadyScheduled+0xc>
			}
		}
	}

	return retval;
}
     84a:	08 95       	ret

0000084c <LCD_ScheduleJob>:
 * LCD_ScheduleJob
 *
 * Function to schedule a LCD Job
 **/
BOOL LCD_ScheduleJob(const char * Command,UBYTE Cmd,BOOL InputDataType)
{
     84c:	ff 92       	push	r15
     84e:	0f 93       	push	r16
     850:	1f 93       	push	r17
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
	BOOL retval = FALSE;

	/* Accept only if there is a possibility to schedule a job */
	if(g_LCDJobs_Length < LCD_CFG_MAX_SCHEDULABLE_JOBS)
     856:	c0 91 3d 03 	lds	r28, 0x033D	; 0x80033d <g_LCDJobs_Length>
     85a:	c4 31       	cpi	r28, 0x14	; 20
     85c:	a8 f5       	brcc	.+106    	; 0x8c8 <__stack+0x69>
     85e:	f4 2e       	mov	r15, r20
     860:	d6 2f       	mov	r29, r22
     862:	8c 01       	movw	r16, r24
	{
		if(LCD_CheckIfJobIsAlreadyScheduled(Command,Cmd,InputDataType) == FALSE)
     864:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_CheckIfJobIsAlreadyScheduled>
     868:	81 11       	cpse	r24, r1
     86a:	30 c0       	rjmp	.+96     	; 0x8cc <__stack+0x6d>
		{
			LCD_JobConfig * NewJobConfig = &LCDJobs[g_LCDJobs_TailIndex];
     86c:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <g_LCDJobs_TailIndex>
     870:	28 2f       	mov	r18, r24
     872:	30 e0       	ldi	r19, 0x00	; 0

			if(NewJobConfig->Status == C_LCD_Job_Status_Idle)
     874:	f9 01       	movw	r30, r18
     876:	ee 0f       	add	r30, r30
     878:	ff 1f       	adc	r31, r31
     87a:	ee 0f       	add	r30, r30
     87c:	ff 1f       	adc	r31, r31
     87e:	e2 0f       	add	r30, r18
     880:	f3 1f       	adc	r31, r19
     882:	ed 59       	subi	r30, 0x9D	; 157
     884:	fb 4f       	sbci	r31, 0xFB	; 251
     886:	94 81       	ldd	r25, Z+4	; 0x04
     888:	91 11       	cpse	r25, r1
     88a:	22 c0       	rjmp	.+68     	; 0x8d0 <__stack+0x71>
			{
				NewJobConfig->Status = C_LCD_Job_Status_Scheduled;
     88c:	f9 01       	movw	r30, r18
     88e:	ee 0f       	add	r30, r30
     890:	ff 1f       	adc	r31, r31
     892:	ee 0f       	add	r30, r30
     894:	ff 1f       	adc	r31, r31
     896:	2e 0f       	add	r18, r30
     898:	3f 1f       	adc	r19, r31
     89a:	f9 01       	movw	r30, r18
     89c:	ed 59       	subi	r30, 0x9D	; 157
     89e:	fb 4f       	sbci	r31, 0xFB	; 251
     8a0:	91 e0       	ldi	r25, 0x01	; 1
     8a2:	94 83       	std	Z+4, r25	; 0x04
				NewJobConfig->CmdData = Cmd;
     8a4:	d0 83       	st	Z, r29
				NewJobConfig->Message = Command;
     8a6:	12 83       	std	Z+2, r17	; 0x02
     8a8:	01 83       	std	Z+1, r16	; 0x01
				NewJobConfig->InDataType = InputDataType;
     8aa:	f3 82       	std	Z+3, r15	; 0x03

				g_LCDJobs_TailIndex++; // Increment the Tail Index
     8ac:	8f 5f       	subi	r24, 0xFF	; 255
     8ae:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <g_LCDJobs_TailIndex>

				g_LCDJobs_Length++; // Increment the Job Length
     8b2:	9c 0f       	add	r25, r28
     8b4:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <g_LCDJobs_Length>
				
				/* Implement a Circular Buffer */
				if((g_LCDJobs_TailIndex == LCD_CFG_MAX_SCHEDULABLE_JOBS) && (g_LCDJobs_Length < LCD_CFG_MAX_SCHEDULABLE_JOBS))
     8b8:	84 31       	cpi	r24, 0x14	; 20
     8ba:	61 f4       	brne	.+24     	; 0x8d4 <__stack+0x75>
     8bc:	94 31       	cpi	r25, 0x14	; 20
     8be:	60 f4       	brcc	.+24     	; 0x8d8 <__stack+0x79>
				{
					g_LCDJobs_TailIndex = 0; // Circle back to 0
     8c0:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <g_LCDJobs_TailIndex>
				}

				retval = TRUE;
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	09 c0       	rjmp	.+18     	; 0x8da <__stack+0x7b>
 *
 * Function to schedule a LCD Job
 **/
BOOL LCD_ScheduleJob(const char * Command,UBYTE Cmd,BOOL InputDataType)
{
	BOOL retval = FALSE;
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	07 c0       	rjmp	.+14     	; 0x8da <__stack+0x7b>
			}
		}
		else
		{
			// If it is already scheduled, then ignore the request and FALSE
			retval = FALSE;
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	05 c0       	rjmp	.+10     	; 0x8da <__stack+0x7b>
 *
 * Function to schedule a LCD Job
 **/
BOOL LCD_ScheduleJob(const char * Command,UBYTE Cmd,BOOL InputDataType)
{
	BOOL retval = FALSE;
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	03 c0       	rjmp	.+6      	; 0x8da <__stack+0x7b>
				if((g_LCDJobs_TailIndex == LCD_CFG_MAX_SCHEDULABLE_JOBS) && (g_LCDJobs_Length < LCD_CFG_MAX_SCHEDULABLE_JOBS))
				{
					g_LCDJobs_TailIndex = 0; // Circle back to 0
				}

				retval = TRUE;
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	01 c0       	rjmp	.+2      	; 0x8da <__stack+0x7b>
     8d8:	81 e0       	ldi	r24, 0x01	; 1
			retval = FALSE;
		}
	}

	return retval;
}
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	ff 90       	pop	r15
     8e4:	08 95       	ret

000008e6 <LCD_CompleteJob>:
BOOL LCD_CompleteJob(void)
{
	BOOL retval = FALSE;

	/* Get the latest completed Job */
	LCD_JobConfig * CompletedJobConfig = &LCDJobs[g_LCDJobs_HeadIndex];
     8e6:	20 91 3c 03 	lds	r18, 0x033C	; 0x80033c <g_LCDJobs_HeadIndex>
     8ea:	82 2f       	mov	r24, r18
     8ec:	90 e0       	ldi	r25, 0x00	; 0

	/* This API shall be called only when the Job Status is completed and from the Main Function */
	if(CompletedJobConfig->Status == C_LCD_Job_Status_Completed)
     8ee:	fc 01       	movw	r30, r24
     8f0:	ee 0f       	add	r30, r30
     8f2:	ff 1f       	adc	r31, r31
     8f4:	ee 0f       	add	r30, r30
     8f6:	ff 1f       	adc	r31, r31
     8f8:	e8 0f       	add	r30, r24
     8fa:	f9 1f       	adc	r31, r25
     8fc:	ed 59       	subi	r30, 0x9D	; 157
     8fe:	fb 4f       	sbci	r31, 0xFB	; 251
     900:	34 81       	ldd	r19, Z+4	; 0x04
     902:	33 30       	cpi	r19, 0x03	; 3
     904:	f1 f4       	brne	.+60     	; 0x942 <LCD_CompleteJob+0x5c>
	{
		g_LCDJobs_HeadIndex++; // Increment the Head Index
     906:	2f 5f       	subi	r18, 0xFF	; 255
     908:	20 93 3c 03 	sts	0x033C, r18	; 0x80033c <g_LCDJobs_HeadIndex>

		g_LCDJobs_Length--; // Decrement the Length
     90c:	30 91 3d 03 	lds	r19, 0x033D	; 0x80033d <g_LCDJobs_Length>
     910:	31 50       	subi	r19, 0x01	; 1
     912:	30 93 3d 03 	sts	0x033D, r19	; 0x80033d <g_LCDJobs_Length>

		/* Logic to implement a Circular Buffer */
		if((g_LCDJobs_HeadIndex == LCD_CFG_MAX_SCHEDULABLE_JOBS) && (g_LCDJobs_Length != 0))
     916:	24 31       	cpi	r18, 0x14	; 20
     918:	19 f4       	brne	.+6      	; 0x920 <LCD_CompleteJob+0x3a>
     91a:	31 11       	cpse	r19, r1
		{
			g_LCDJobs_HeadIndex = 0; // Circle back to 0
     91c:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <g_LCDJobs_HeadIndex>
		}

		/* If the Buffer is empty, then reset the Head and Tail Indices */
		if(g_LCDJobs_Length == 0)
     920:	31 11       	cpse	r19, r1
     922:	04 c0       	rjmp	.+8      	; 0x92c <LCD_CompleteJob+0x46>
		{
			g_LCDJobs_HeadIndex = 0;
     924:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <g_LCDJobs_HeadIndex>
			g_LCDJobs_TailIndex = 0;
     928:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <g_LCDJobs_TailIndex>
		}

		/* Update the Status alone in this function. Job type is referred in the Main Function for callback */
		CompletedJobConfig->Status = C_LCD_Job_Status_Idle;
     92c:	fc 01       	movw	r30, r24
     92e:	ee 0f       	add	r30, r30
     930:	ff 1f       	adc	r31, r31
     932:	ee 0f       	add	r30, r30
     934:	ff 1f       	adc	r31, r31
     936:	8e 0f       	add	r24, r30
     938:	9f 1f       	adc	r25, r31
     93a:	fc 01       	movw	r30, r24
     93c:	ed 59       	subi	r30, 0x9D	; 157
     93e:	fb 4f       	sbci	r31, 0xFB	; 251
     940:	14 82       	std	Z+4, r1	; 0x04

		retval = FALSE;
	}
	return retval;
}
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	08 95       	ret

00000946 <LCD_ClearJobs>:
 **/
void LCD_ClearJobs(void)
{
	int i = 0;

	for(i = 0; i < LCD_CFG_MAX_SCHEDULABLE_JOBS; i++)
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	0e c0       	rjmp	.+28     	; 0x968 <LCD_ClearJobs+0x22>
	{
		LCDJobs[i].CmdData = 0;
     94c:	fc 01       	movw	r30, r24
     94e:	ee 0f       	add	r30, r30
     950:	ff 1f       	adc	r31, r31
     952:	ee 0f       	add	r30, r30
     954:	ff 1f       	adc	r31, r31
     956:	e8 0f       	add	r30, r24
     958:	f9 1f       	adc	r31, r25
     95a:	ed 59       	subi	r30, 0x9D	; 157
     95c:	fb 4f       	sbci	r31, 0xFB	; 251
     95e:	10 82       	st	Z, r1
		LCDJobs[i].Message = 0;
     960:	12 82       	std	Z+2, r1	; 0x02
     962:	11 82       	std	Z+1, r1	; 0x01
		LCDJobs[i].Status = C_LCD_Job_Status_Idle;
     964:	14 82       	std	Z+4, r1	; 0x04
 **/
void LCD_ClearJobs(void)
{
	int i = 0;

	for(i = 0; i < LCD_CFG_MAX_SCHEDULABLE_JOBS; i++)
     966:	01 96       	adiw	r24, 0x01	; 1
     968:	84 31       	cpi	r24, 0x14	; 20
     96a:	91 05       	cpc	r25, r1
     96c:	7c f3       	brlt	.-34     	; 0x94c <LCD_ClearJobs+0x6>
		LCDJobs[i].CmdData = 0;
		LCDJobs[i].Message = 0;
		LCDJobs[i].Status = C_LCD_Job_Status_Idle;
	}
	
	g_LCDJobs_HeadIndex = 0;
     96e:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <g_LCDJobs_HeadIndex>
	g_LCDJobs_TailIndex = 0;
     972:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <g_LCDJobs_TailIndex>
	g_LCDJobs_Length = 0;
     976:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <g_LCDJobs_Length>
     97a:	08 95       	ret

0000097c <SIMCOM_ResetJob>:
	if(SIMCOM_ComState == SIMCOM_WaitingForResponse)
	{
		SIMCOM_ReceptionIgnoreCommandCount = Count;

		// If there are multiple items to be received, then set the Incomplete timeout as the Job Timeout
		SIMCOM_IncompleteCounter = SIMCOM_CurrentJob.Timeout;
     97c:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <SIMCOM_ComState>
     980:	eb e2       	ldi	r30, 0x2B	; 43
     982:	f5 e0       	ldi	r31, 0x05	; 5
     984:	8a ef       	ldi	r24, 0xFA	; 250
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	91 83       	std	Z+1, r25	; 0x01
     98a:	80 83       	st	Z, r24
     98c:	12 82       	std	Z+2, r1	; 0x02
     98e:	13 82       	std	Z+3, r1	; 0x03
     990:	14 82       	std	Z+4, r1	; 0x04
     992:	15 82       	std	Z+5, r1	; 0x05
     994:	17 82       	std	Z+7, r1	; 0x07
     996:	16 82       	std	Z+6, r1	; 0x06
     998:	10 86       	std	Z+8, r1	; 0x08
     99a:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <SIMCOM_ReceptionIgnoreCommandCount>
     99e:	08 95       	ret

000009a0 <SIMCOM_UpdateCurrentJobResponse>:
     9a0:	ef 92       	push	r14
     9a2:	ff 92       	push	r15
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	1f 92       	push	r1
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
     9b0:	84 e6       	ldi	r24, 0x64	; 100
     9b2:	e7 ec       	ldi	r30, 0xC7	; 199
     9b4:	f4 e0       	ldi	r31, 0x04	; 4
     9b6:	df 01       	movw	r26, r30
     9b8:	1d 92       	st	X+, r1
     9ba:	8a 95       	dec	r24
     9bc:	e9 f7       	brne	.-6      	; 0x9b8 <SIMCOM_UpdateCurrentJobResponse+0x18>
     9be:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <SIMCOM_ResponseLength>
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <Buffer_Length>
     9c8:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <SIMCOM_ResponseLength>
     9cc:	10 e0       	ldi	r17, 0x00	; 0
     9ce:	14 c0       	rjmp	.+40     	; 0x9f8 <SIMCOM_UpdateCurrentJobResponse+0x58>
     9d0:	e1 2e       	mov	r14, r17
     9d2:	f1 2c       	mov	r15, r1
     9d4:	19 82       	std	Y+1, r1	; 0x01
     9d6:	be 01       	movw	r22, r28
     9d8:	6f 5f       	subi	r22, 0xFF	; 255
     9da:	7f 4f       	sbci	r23, 0xFF	; 255
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	0e 94 1a 01 	call	0x234	; 0x234 <Buffer_DeQueue>
     9e2:	81 11       	cpse	r24, r1
     9e4:	03 c0       	rjmp	.+6      	; 0x9ec <SIMCOM_UpdateCurrentJobResponse+0x4c>
     9e6:	8a e0       	ldi	r24, 0x0A	; 10
     9e8:	0e 94 4c 09 	call	0x1298	; 0x1298 <COSMIC_SIMCOM_Error_Callback>
     9ec:	89 81       	ldd	r24, Y+1	; 0x01
     9ee:	f7 01       	movw	r30, r14
     9f0:	e9 53       	subi	r30, 0x39	; 57
     9f2:	fb 4f       	sbci	r31, 0xFB	; 251
     9f4:	80 83       	st	Z, r24
     9f6:	1f 5f       	subi	r17, 0xFF	; 255
     9f8:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <SIMCOM_ResponseLength>
     9fc:	18 17       	cp	r17, r24
     9fe:	40 f3       	brcs	.-48     	; 0x9d0 <SIMCOM_UpdateCurrentJobResponse+0x30>
     a00:	0f 90       	pop	r0
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	1f 91       	pop	r17
     a08:	ff 90       	pop	r15
     a0a:	ef 90       	pop	r14
     a0c:	08 95       	ret

00000a0e <SIMCOM_Send_Command>:
     a0e:	09 c0       	rjmp	.+18     	; 0xa22 <SIMCOM_Send_Command+0x14>
     a10:	0e 94 97 00 	call	0x12e	; 0x12e <SIM_Send_Data>
     a14:	eb e2       	ldi	r30, 0x2B	; 43
     a16:	f5 e0       	ldi	r31, 0x05	; 5
     a18:	80 81       	ld	r24, Z
     a1a:	91 81       	ldd	r25, Z+1	; 0x01
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	91 83       	std	Z+1, r25	; 0x01
     a20:	80 83       	st	Z, r24
     a22:	e0 91 2b 05 	lds	r30, 0x052B	; 0x80052b <SIMCOM_CurrentJob>
     a26:	f0 91 2c 05 	lds	r31, 0x052C	; 0x80052c <SIMCOM_CurrentJob+0x1>
     a2a:	80 81       	ld	r24, Z
     a2c:	81 11       	cpse	r24, r1
     a2e:	f0 cf       	rjmp	.-32     	; 0xa10 <SIMCOM_Send_Command+0x2>
     a30:	8d e0       	ldi	r24, 0x0D	; 13
     a32:	0e 94 97 00 	call	0x12e	; 0x12e <SIM_Send_Data>
     a36:	08 95       	ret

00000a38 <SIMCOM_GetResponseWithoutHead_fromBuffer>:
     a38:	bc 01       	movw	r22, r24
     a3a:	87 ec       	ldi	r24, 0xC7	; 199
     a3c:	94 e0       	ldi	r25, 0x04	; 4
     a3e:	0e 94 5f 01 	call	0x2be	; 0x2be <StringHelper_GetPointerAfter>
     a42:	08 95       	ret

00000a44 <SIMCOM_GetSeparated_String_fromBuffer>:
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	d6 2f       	mov	r29, r22
     a4a:	c4 2f       	mov	r28, r20
     a4c:	0e 94 1c 05 	call	0xa38	; 0xa38 <SIMCOM_GetResponseWithoutHead_fromBuffer>
     a50:	4c 2f       	mov	r20, r28
     a52:	50 e0       	ldi	r21, 0x00	; 0
     a54:	6d 2f       	mov	r22, r29
     a56:	0e 94 8a 01 	call	0x314	; 0x314 <StringHelper_SplitAndGet>
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	08 95       	ret

00000a60 <SIMCOM_Init>:
     a60:	0e 94 be 04 	call	0x97c	; 0x97c <SIMCOM_ResetJob>
     a64:	84 e6       	ldi	r24, 0x64	; 100
     a66:	e7 ec       	ldi	r30, 0xC7	; 199
     a68:	f4 e0       	ldi	r31, 0x04	; 4
     a6a:	df 01       	movw	r26, r30
     a6c:	1d 92       	st	X+, r1
     a6e:	8a 95       	dec	r24
     a70:	e9 f7       	brne	.-6      	; 0xa6c <SIMCOM_Init+0xc>
     a72:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <SIMCOM_ResponseLength>
     a76:	44 e6       	ldi	r20, 0x64	; 100
     a78:	6b e6       	ldi	r22, 0x6B	; 107
     a7a:	75 e0       	ldi	r23, 0x05	; 5
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Buffer_Create>
     a82:	08 95       	ret

00000a84 <SIMCOM_Schedule_Job>:
     a84:	0f 93       	push	r16
     a86:	1f 93       	push	r17
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	fc 01       	movw	r30, r24
     a8e:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <SIMCOM_ComState>
     a92:	81 11       	cpse	r24, r1
     a94:	41 c0       	rjmp	.+130    	; 0xb18 <SIMCOM_Schedule_Job+0x94>
     a96:	89 01       	movw	r16, r18
     a98:	cb 01       	movw	r24, r22
     a9a:	ba 01       	movw	r22, r20
     a9c:	21 e0       	ldi	r18, 0x01	; 1
     a9e:	20 93 42 03 	sts	0x0342, r18	; 0x800342 <SIMCOM_ComState>
     aa2:	cb e2       	ldi	r28, 0x2B	; 43
     aa4:	d5 e0       	ldi	r29, 0x05	; 5
     aa6:	f9 83       	std	Y+1, r31	; 0x01
     aa8:	e8 83       	st	Y, r30
     aaa:	24 e6       	ldi	r18, 0x64	; 100
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	50 e0       	ldi	r21, 0x00	; 0
     ab2:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <__udivmodsi4>
     ab6:	2a 83       	std	Y+2, r18	; 0x02
     ab8:	3b 83       	std	Y+3, r19	; 0x03
     aba:	4c 83       	std	Y+4, r20	; 0x04
     abc:	5d 83       	std	Y+5, r21	; 0x05
     abe:	1f 83       	std	Y+7, r17	; 0x07
     ac0:	0e 83       	std	Y+6, r16	; 0x06
     ac2:	18 86       	std	Y+8, r1	; 0x08
     ac4:	8a e0       	ldi	r24, 0x0A	; 10
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <SIMCOM_IncompleteCounter>
     ad0:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <SIMCOM_IncompleteCounter+0x1>
     ad4:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <SIMCOM_IncompleteCounter+0x2>
     ad8:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <SIMCOM_IncompleteCounter+0x3>
     adc:	80 e6       	ldi	r24, 0x60	; 96
     ade:	9a ee       	ldi	r25, 0xEA	; 234
     ae0:	a0 e0       	ldi	r26, 0x00	; 0
     ae2:	b0 e0       	ldi	r27, 0x00	; 0
     ae4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     ae8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     aec:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     af0:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     af4:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <SIMCOM_ReceptionIgnoreCommandCount>
     af8:	84 e6       	ldi	r24, 0x64	; 100
     afa:	e7 ec       	ldi	r30, 0xC7	; 199
     afc:	f4 e0       	ldi	r31, 0x04	; 4
     afe:	df 01       	movw	r26, r30
     b00:	1d 92       	st	X+, r1
     b02:	8a 95       	dec	r24
     b04:	e9 f7       	brne	.-6      	; 0xb00 <SIMCOM_Schedule_Job+0x7c>
     b06:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <SIMCOM_ResponseLength>
     b0a:	0e 94 07 05 	call	0xa0e	; 0xa0e <SIMCOM_Send_Command>
     b0e:	83 e0       	ldi	r24, 0x03	; 3
     b10:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <SIMCOM_ComState>
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	01 c0       	rjmp	.+2      	; 0xb1a <SIMCOM_Schedule_Job+0x96>
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	1f 91       	pop	r17
     b20:	0f 91       	pop	r16
     b22:	08 95       	ret

00000b24 <SIMCOM_Data_Read>:
     b24:	cf 93       	push	r28
     b26:	c8 2f       	mov	r28, r24
     b28:	8d 30       	cpi	r24, 0x0D	; 13
     b2a:	11 f0       	breq	.+4      	; 0xb30 <SIMCOM_Data_Read+0xc>
     b2c:	8a 30       	cpi	r24, 0x0A	; 10
     b2e:	71 f5       	brne	.+92     	; 0xb8c <SIMCOM_Data_Read+0x68>
     b30:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <prevData.2563>
     b34:	8d 30       	cpi	r24, 0x0D	; 13
     b36:	89 f5       	brne	.+98     	; 0xb9a <SIMCOM_Data_Read+0x76>
     b38:	ca 30       	cpi	r28, 0x0A	; 10
     b3a:	91 f5       	brne	.+100    	; 0xba0 <SIMCOM_Data_Read+0x7c>
     b3c:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <SIMCOM_ComState>
     b40:	83 30       	cpi	r24, 0x03	; 3
     b42:	31 f4       	brne	.+12     	; 0xb50 <SIMCOM_Data_Read+0x2c>
     b44:	82 e0       	ldi	r24, 0x02	; 2
     b46:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <SIMCOM_ComState>
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	30 c0       	rjmp	.+96     	; 0xbb0 <SIMCOM_Data_Read+0x8c>
     b50:	82 30       	cpi	r24, 0x02	; 2
     b52:	a1 f4       	brne	.+40     	; 0xb7c <SIMCOM_Data_Read+0x58>
     b54:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <SIMCOM_ReceptionIgnoreCommandCount>
     b58:	81 11       	cpse	r24, r1
     b5a:	06 c0       	rjmp	.+12     	; 0xb68 <SIMCOM_Data_Read+0x44>
     b5c:	84 e0       	ldi	r24, 0x04	; 4
     b5e:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <SIMCOM_ComState>
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	24 c0       	rjmp	.+72     	; 0xbb0 <SIMCOM_Data_Read+0x8c>
     b68:	81 50       	subi	r24, 0x01	; 1
     b6a:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <SIMCOM_ReceptionIgnoreCommandCount>
     b6e:	6e e7       	ldi	r22, 0x7E	; 126
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	0e 94 ed 00 	call	0x1da	; 0x1da <Buffer_EnQueue>
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	1a c0       	rjmp	.+52     	; 0xbb0 <SIMCOM_Data_Read+0x8c>
     b7c:	81 11       	cpse	r24, r1
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <SIMCOM_Data_Read+0x82>
     b80:	82 e0       	ldi	r24, 0x02	; 2
     b82:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <SIMCOM_ComState>
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	12 c0       	rjmp	.+36     	; 0xbb0 <SIMCOM_Data_Read+0x8c>
     b8c:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <SIMCOM_ComState>
     b90:	82 30       	cpi	r24, 0x02	; 2
     b92:	61 f0       	breq	.+24     	; 0xbac <SIMCOM_Data_Read+0x88>
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	0b c0       	rjmp	.+22     	; 0xbb0 <SIMCOM_Data_Read+0x8c>
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	08 c0       	rjmp	.+16     	; 0xbb0 <SIMCOM_Data_Read+0x8c>
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	05 c0       	rjmp	.+10     	; 0xbb0 <SIMCOM_Data_Read+0x8c>
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <SIMCOM_Data_Read+0x8c>
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	91 30       	cpi	r25, 0x01	; 1
     bb2:	21 f4       	brne	.+8      	; 0xbbc <SIMCOM_Data_Read+0x98>
     bb4:	6c 2f       	mov	r22, r28
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	0e 94 ed 00 	call	0x1da	; 0x1da <Buffer_EnQueue>
     bbc:	c0 93 3e 03 	sts	0x033E, r28	; 0x80033e <prevData.2563>
     bc0:	cf 91       	pop	r28
     bc2:	08 95       	ret

00000bc4 <SIMCOM_GetCSV_Number_fromBuffer>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                     SIMCOM Helper Functions                    */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
ULONG SIMCOM_GetCSV_Number_fromBuffer(const char * ResponseHead, UBYTE Position)
{
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	2c 97       	sbiw	r28, 0x0c	; 12
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	46 2f       	mov	r20, r22
	ULONG retval = 0;

	if(SIMCOM_GetSeparated_String_fromBuffer(ResponseHead, ',', Position) > 0)
     bda:	6c e2       	ldi	r22, 0x2C	; 44
     bdc:	0e 94 22 05 	call	0xa44	; 0xa44 <SIMCOM_GetSeparated_String_fromBuffer>
     be0:	89 2b       	or	r24, r25
     be2:	b1 f0       	breq	.+44     	; 0xc10 <SIMCOM_GetCSV_Number_fromBuffer+0x4c>
	memset(StringHelper_Buffer, '\0', StringHelper_Buffer_LENGTH);
}

static inline void StringHelper_GetString(char * Str)
{
	strcpy(Str, StringHelper_Buffer);
     be4:	68 e5       	ldi	r22, 0x58	; 88
     be6:	73 e0       	ldi	r23, 0x03	; 3
     be8:	ce 01       	movw	r24, r28
     bea:	01 96       	adiw	r24, 0x01	; 1
     bec:	0e 94 13 10 	call	0x2026	; 0x2026 <strcpy>
/* Function Declarations */
/*************************/

static inline void StringHelper_ClearBuffer(void)
{
	memset(StringHelper_Buffer, '\0', StringHelper_Buffer_LENGTH);
     bf0:	8f ef       	ldi	r24, 0xFF	; 255
     bf2:	e8 e5       	ldi	r30, 0x58	; 88
     bf4:	f3 e0       	ldi	r31, 0x03	; 3
     bf6:	df 01       	movw	r26, r30
     bf8:	1d 92       	st	X+, r1
     bfa:	8a 95       	dec	r24
     bfc:	e9 f7       	brne	.-6      	; 0xbf8 <SIMCOM_GetCSV_Number_fromBuffer+0x34>
	{
		char NumberString[12];

		StringHelper_GetString(NumberString);

		retval = atoi(NumberString);
     bfe:	ce 01       	movw	r24, r28
     c00:	01 96       	adiw	r24, 0x01	; 1
     c02:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <atoi>
     c06:	bc 01       	movw	r22, r24
     c08:	99 0f       	add	r25, r25
     c0a:	88 0b       	sbc	r24, r24
     c0c:	99 0b       	sbc	r25, r25
     c0e:	03 c0       	rjmp	.+6      	; 0xc16 <SIMCOM_GetCSV_Number_fromBuffer+0x52>
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                     SIMCOM Helper Functions                    */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
ULONG SIMCOM_GetCSV_Number_fromBuffer(const char * ResponseHead, UBYTE Position)
{
	ULONG retval = 0;
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	cb 01       	movw	r24, r22

		retval = atoi(NumberString);
	}

	return retval;
}
     c16:	2c 96       	adiw	r28, 0x0c	; 12
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	f8 94       	cli
     c1c:	de bf       	out	0x3e, r29	; 62
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	cd bf       	out	0x3d, r28	; 61
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	08 95       	ret

00000c28 <SIMCOM_Callback>:

	SIMCOM_SEND_BYTE(CARRIAGE_RETURN);
}

static void SIMCOM_Callback(SIMCOM_Job_Result_EN JobState)
{
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	cf 93       	push	r28
     c32:	c8 2f       	mov	r28, r24
	
	if(SIMCOM_CurrentJob.Callback != NULL_PTR)
     c34:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <SIMCOM_CurrentJob+0x6>
     c38:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <SIMCOM_CurrentJob+0x7>
     c3c:	30 97       	sbiw	r30, 0x00	; 0
     c3e:	21 f0       	breq	.+8      	; 0xc48 <SIMCOM_Callback+0x20>
	{
		SIMCOM_CurrentJob.State = JobState;
     c40:	80 93 33 05 	sts	0x0533, r24	; 0x800533 <SIMCOM_CurrentJob+0x8>
		SIMCOM_CurrentJob.Callback(JobState);
     c44:	09 95       	icall
     c46:	9a c0       	rjmp	.+308    	; 0xd7c <SIMCOM_Callback+0x154>
	}
	else
	{
		if(IsSIMCOM_ResponseStartsWith("+CTZV:"))
     c48:	67 ec       	ldi	r22, 0xC7	; 199
     c4a:	74 e0       	ldi	r23, 0x04	; 4
     c4c:	83 e7       	ldi	r24, 0x73	; 115
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <StringHelper_startsWith>
     c54:	88 23       	and	r24, r24
     c56:	41 f0       	breq	.+16     	; 0xc68 <SIMCOM_Callback+0x40>
		{
			/* If there are any problem with the SIMCOM or it's sub modules, and received a feedback from GSM, then possibly the Network might have disconnected */
			if(IsSIMCOM_Module_Error() || IsSIMCOM_SubModule_Error())
     c58:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <SIMCOM_State>
     c5c:	8b 30       	cpi	r24, 0x0B	; 11
     c5e:	09 f0       	breq	.+2      	; 0xc62 <SIMCOM_Callback+0x3a>
     c60:	8d c0       	rjmp	.+282    	; 0xd7c <SIMCOM_Callback+0x154>
			{
				// So retry evaluating
				SIMCOM_ReEvaluate_State();
     c62:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <SIMCOM_State>
     c66:	8a c0       	rjmp	.+276    	; 0xd7c <SIMCOM_Callback+0x154>
			}
		}

		else if(IsSIMCOM_ResponseStartsWith("{\"cmd\":"))
     c68:	67 ec       	ldi	r22, 0xC7	; 199
     c6a:	74 e0       	ldi	r23, 0x04	; 4
     c6c:	8a e7       	ldi	r24, 0x7A	; 122
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <StringHelper_startsWith>
     c74:	88 23       	and	r24, r24
     c76:	c1 f0       	breq	.+48     	; 0xca8 <SIMCOM_Callback+0x80>
		{
 			UBYTE len,i;
 			len = SIMCOM_GetResponseLength();
     c78:	40 91 41 03 	lds	r20, 0x0341	; 0x800341 <SIMCOM_ResponseLength>
			 
			for(i = 0;i<=len;i++)
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	0b c0       	rjmp	.+22     	; 0xc96 <SIMCOM_Callback+0x6e>
			{
				SubscribeDataBuff[i] = SIMCOM_ResponseBuffer[i];
     c80:	82 2f       	mov	r24, r18
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	fc 01       	movw	r30, r24
     c86:	e9 53       	subi	r30, 0x39	; 57
     c88:	fb 4f       	sbci	r31, 0xFB	; 251
     c8a:	30 81       	ld	r19, Z
     c8c:	fc 01       	movw	r30, r24
     c8e:	e3 5b       	subi	r30, 0xB3	; 179
     c90:	fa 4f       	sbci	r31, 0xFA	; 250
     c92:	30 83       	st	Z, r19
		else if(IsSIMCOM_ResponseStartsWith("{\"cmd\":"))
		{
 			UBYTE len,i;
 			len = SIMCOM_GetResponseLength();
			 
			for(i = 0;i<=len;i++)
     c94:	2f 5f       	subi	r18, 0xFF	; 255
     c96:	42 17       	cp	r20, r18
     c98:	98 f7       	brcc	.-26     	; 0xc80 <SIMCOM_Callback+0x58>
			{
				SubscribeDataBuff[i] = SIMCOM_ResponseBuffer[i];
			}
			
			MQTTApp_State = MQTTApp_SubMessageHandling;			
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <MQTTApp_State>
			IsSubscribeMsgRecieved = TRUE;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <IsSubscribeMsgRecieved>
     ca6:	6a c0       	rjmp	.+212    	; 0xd7c <SIMCOM_Callback+0x154>
		}
		else if(IsSIMCOM_ResponseStartsWith("+CMQTTCONNECT:"))
     ca8:	67 ec       	ldi	r22, 0xC7	; 199
     caa:	74 e0       	ldi	r23, 0x04	; 4
     cac:	82 e8       	ldi	r24, 0x82	; 130
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <StringHelper_startsWith>
     cb4:	88 23       	and	r24, r24
     cb6:	d1 f0       	breq	.+52     	; 0xcec <SIMCOM_Callback+0xc4>
		{
			ULONG ConnectResponse1 = SIMCOM_GetCSV_Number_fromBuffer("+CMQTTCONNECT:", 1);
     cb8:	61 e0       	ldi	r22, 0x01	; 1
     cba:	82 e8       	ldi	r24, 0x82	; 130
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <SIMCOM_GetCSV_Number_fromBuffer>
     cc2:	6b 01       	movw	r12, r22
     cc4:	7c 01       	movw	r14, r24
			ULONG ConnectResponse2 = SIMCOM_GetCSV_Number_fromBuffer("+CMQTTCONNECT:", 2);
     cc6:	62 e0       	ldi	r22, 0x02	; 2
     cc8:	82 e8       	ldi	r24, 0x82	; 130
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <SIMCOM_GetCSV_Number_fromBuffer>
			// Check if the response is OK or not.
			if((ConnectResponse1==0)&&(ConnectResponse2==0))
     cd0:	cd 28       	or	r12, r13
     cd2:	ce 28       	or	r12, r14
     cd4:	cf 28       	or	r12, r15
     cd6:	09 f0       	breq	.+2      	; 0xcda <SIMCOM_Callback+0xb2>
     cd8:	51 c0       	rjmp	.+162    	; 0xd7c <SIMCOM_Callback+0x154>
     cda:	67 2b       	or	r22, r23
     cdc:	68 2b       	or	r22, r24
     cde:	69 2b       	or	r22, r25
     ce0:	09 f0       	breq	.+2      	; 0xce4 <SIMCOM_Callback+0xbc>
     ce2:	4c c0       	rjmp	.+152    	; 0xd7c <SIMCOM_Callback+0x154>
			{
				MQTT_State = MQTT_SubscribeTopic_Config;// Move to next state
     ce4:	85 e0       	ldi	r24, 0x05	; 5
     ce6:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <MQTT_State>
     cea:	48 c0       	rjmp	.+144    	; 0xd7c <SIMCOM_Callback+0x154>
			}
		}
		
		
		else if(IsSIMCOM_ResponseStartsWith("+CMQTTPUB:"))
     cec:	67 ec       	ldi	r22, 0xC7	; 199
     cee:	74 e0       	ldi	r23, 0x04	; 4
     cf0:	81 e9       	ldi	r24, 0x91	; 145
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <StringHelper_startsWith>
     cf8:	88 23       	and	r24, r24
     cfa:	e9 f0       	breq	.+58     	; 0xd36 <SIMCOM_Callback+0x10e>
		{
			
			ULONG PublishResponse1 = SIMCOM_GetCSV_Number_fromBuffer("+CMQTTPUB:", 1);
     cfc:	61 e0       	ldi	r22, 0x01	; 1
     cfe:	81 e9       	ldi	r24, 0x91	; 145
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <SIMCOM_GetCSV_Number_fromBuffer>
     d06:	6b 01       	movw	r12, r22
     d08:	7c 01       	movw	r14, r24
			ULONG PublishResponse2 = SIMCOM_GetCSV_Number_fromBuffer("+CMQTTPUB:", 2);
     d0a:	62 e0       	ldi	r22, 0x02	; 2
     d0c:	81 e9       	ldi	r24, 0x91	; 145
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <SIMCOM_GetCSV_Number_fromBuffer>
			// Check if the response is OK or not.
			if((PublishResponse1==0)&&(PublishResponse2==0))
     d14:	cd 28       	or	r12, r13
     d16:	ce 28       	or	r12, r14
     d18:	cf 28       	or	r12, r15
     d1a:	51 f4       	brne	.+20     	; 0xd30 <SIMCOM_Callback+0x108>
     d1c:	67 2b       	or	r22, r23
     d1e:	68 2b       	or	r22, r24
     d20:	69 2b       	or	r22, r25
     d22:	31 f4       	brne	.+12     	; 0xd30 <SIMCOM_Callback+0x108>
			{
				PublishStatus = 1;
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <PublishStatus>
				Publish_State = MQTT_Publish_Idle;
     d2a:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <Publish_State>
     d2e:	26 c0       	rjmp	.+76     	; 0xd7c <SIMCOM_Callback+0x154>
			}
			else
			{
				PublishStatus = 0;
     d30:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <PublishStatus>
     d34:	23 c0       	rjmp	.+70     	; 0xd7c <SIMCOM_Callback+0x154>
			}
		}
		
		else if(IsSIMCOM_ResponseStartsWith("+CMQTTSUB:"))
     d36:	67 ec       	ldi	r22, 0xC7	; 199
     d38:	74 e0       	ldi	r23, 0x04	; 4
     d3a:	8c e9       	ldi	r24, 0x9C	; 156
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <StringHelper_startsWith>
     d42:	88 23       	and	r24, r24
     d44:	c1 f0       	breq	.+48     	; 0xd76 <SIMCOM_Callback+0x14e>
		{
			ULONG SubscribeResponse1 = SIMCOM_GetCSV_Number_fromBuffer("+CMQTTSUB:", 1);
     d46:	61 e0       	ldi	r22, 0x01	; 1
     d48:	8c e9       	ldi	r24, 0x9C	; 156
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <SIMCOM_GetCSV_Number_fromBuffer>
     d50:	6b 01       	movw	r12, r22
     d52:	7c 01       	movw	r14, r24
			ULONG SubscribeResponse2 = SIMCOM_GetCSV_Number_fromBuffer("+CMQTTSUB:", 2);
     d54:	62 e0       	ldi	r22, 0x02	; 2
     d56:	8c e9       	ldi	r24, 0x9C	; 156
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <SIMCOM_GetCSV_Number_fromBuffer>
			// Check if the response is OK or not.
			if((SubscribeResponse1 ==0)&&(SubscribeResponse2 ==0))
     d5e:	cd 28       	or	r12, r13
     d60:	ce 28       	or	r12, r14
     d62:	cf 28       	or	r12, r15
     d64:	59 f4       	brne	.+22     	; 0xd7c <SIMCOM_Callback+0x154>
     d66:	67 2b       	or	r22, r23
     d68:	68 2b       	or	r22, r24
     d6a:	69 2b       	or	r22, r25
     d6c:	39 f4       	brne	.+14     	; 0xd7c <SIMCOM_Callback+0x154>
			{
				MQTT_State = MQTT_Ready;
     d6e:	89 e0       	ldi	r24, 0x09	; 9
     d70:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <MQTT_State>
     d74:	03 c0       	rjmp	.+6      	; 0xd7c <SIMCOM_Callback+0x154>
		}
		
		else
		{
			// If something else is received, then give a call to the Application layer to handle
			SIMCOM_GENERIC_CALLBACK(JobState);
     d76:	8c 2f       	mov	r24, r28
     d78:	0e 94 42 09 	call	0x1284	; 0x1284 <COSMIC_Generic_SIMCOM_Callback>
		}
	}
}
     d7c:	cf 91       	pop	r28
     d7e:	ff 90       	pop	r15
     d80:	ef 90       	pop	r14
     d82:	df 90       	pop	r13
     d84:	cf 90       	pop	r12
     d86:	08 95       	ret

00000d88 <SIMCOM_MainFunction>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                      SIMCOM Main Function                      */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
void SIMCOM_MainFunction(void)
{
	switch(SIMCOM_ComState)
     d88:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <SIMCOM_ComState>
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	c9 f1       	breq	.+114    	; 0xe02 <SIMCOM_MainFunction+0x7a>
     d90:	18 f4       	brcc	.+6      	; 0xd98 <SIMCOM_MainFunction+0x10>
     d92:	81 30       	cpi	r24, 0x01	; 1
     d94:	91 f1       	breq	.+100    	; 0xdfa <SIMCOM_MainFunction+0x72>
     d96:	06 c0       	rjmp	.+12     	; 0xda4 <SIMCOM_MainFunction+0x1c>
     d98:	83 30       	cpi	r24, 0x03	; 3
     d9a:	09 f4       	brne	.+2      	; 0xd9e <SIMCOM_MainFunction+0x16>
     d9c:	55 c0       	rjmp	.+170    	; 0xe48 <SIMCOM_MainFunction+0xc0>
     d9e:	84 30       	cpi	r24, 0x04	; 4
     da0:	09 f4       	brne	.+2      	; 0xda4 <SIMCOM_MainFunction+0x1c>
     da2:	73 c0       	rjmp	.+230    	; 0xe8a <SIMCOM_MainFunction+0x102>
	{
		default:
		case SIMCOM_Idle:
		{
			SIMCOM_ResetJob();
     da4:	0e 94 be 04 	call	0x97c	; 0x97c <SIMCOM_ResetJob>

			// Check for aliveness
			if(SIMCOM_Aliveness_Counter > 0)
     da8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     dac:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     db0:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     db4:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	a1 05       	cpc	r26, r1
     dbc:	b1 05       	cpc	r27, r1
     dbe:	69 f0       	breq	.+26     	; 0xdda <SIMCOM_MainFunction+0x52>
			{
				SIMCOM_Aliveness_Counter -= P_SIMCOM_TASK_CYCLE_FACTOR;
     dc0:	84 56       	subi	r24, 0x64	; 100
     dc2:	91 09       	sbc	r25, r1
     dc4:	a1 09       	sbc	r26, r1
     dc6:	b1 09       	sbc	r27, r1
     dc8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     dcc:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     dd0:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     dd4:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     dd8:	5f c0       	rjmp	.+190    	; 0xe98 <SIMCOM_MainFunction+0x110>
			}
			else
			{
				SIMCOM_ERROR_CALLBACK(SIMCOM_Error_Inactivity); // Report Error
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	0e 94 4c 09 	call	0x1298	; 0x1298 <COSMIC_SIMCOM_Error_Callback>
				SIMCOM_Aliveness_Counter = P_SIMCOM_ALIVENESS_ERROR_TIME; // Reload Timer
     de0:	80 e6       	ldi	r24, 0x60	; 96
     de2:	9a ee       	ldi	r25, 0xEA	; 234
     de4:	a0 e0       	ldi	r26, 0x00	; 0
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     dec:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     df0:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     df4:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     df8:	4f c0       	rjmp	.+158    	; 0xe98 <SIMCOM_MainFunction+0x110>
		break;

		case SIMCOM_WriteInProgress:
		{
			// Do Nothing
			SIMCOM_Callback(SIMCOM_Job_InProgress);
     dfa:	82 e0       	ldi	r24, 0x02	; 2
     dfc:	0e 94 14 06 	call	0xc28	; 0xc28 <SIMCOM_Callback>
		}
		break;
     e00:	4b c0       	rjmp	.+150    	; 0xe98 <SIMCOM_MainFunction+0x110>

		case SIMCOM_ReadInProgress:
		{
			// If the Read is in progress for one Task Cycle, then give a callback that the SIMCOM is in Progress
			SIMCOM_Callback(SIMCOM_Job_InProgress);
     e02:	82 e0       	ldi	r24, 0x02	; 2
     e04:	0e 94 14 06 	call	0xc28	; 0xc28 <SIMCOM_Callback>

			if(SIMCOM_IncompleteCounter != 0)
     e08:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <SIMCOM_IncompleteCounter>
     e0c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <SIMCOM_IncompleteCounter+0x1>
     e10:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <SIMCOM_IncompleteCounter+0x2>
     e14:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <SIMCOM_IncompleteCounter+0x3>
     e18:	00 97       	sbiw	r24, 0x00	; 0
     e1a:	a1 05       	cpc	r26, r1
     e1c:	b1 05       	cpc	r27, r1
     e1e:	61 f0       	breq	.+24     	; 0xe38 <SIMCOM_MainFunction+0xb0>
			{
				SIMCOM_IncompleteCounter--;
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	a1 09       	sbc	r26, r1
     e24:	b1 09       	sbc	r27, r1
     e26:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <SIMCOM_IncompleteCounter>
     e2a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <SIMCOM_IncompleteCounter+0x1>
     e2e:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <SIMCOM_IncompleteCounter+0x2>
     e32:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <SIMCOM_IncompleteCounter+0x3>
     e36:	30 c0       	rjmp	.+96     	; 0xe98 <SIMCOM_MainFunction+0x110>
			else
			{
//				Debug_SendString("Incomplete Response");

				// Update the Response to the SIMCOM Response Buffer even if it is incomplete, the caller will take care of the received response
				SIMCOM_UpdateCurrentJobResponse();
     e38:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <SIMCOM_UpdateCurrentJobResponse>

				// If the Read is in progress for long time, then there might be a problem with the reception.
				SIMCOM_Callback(SIMCOM_Job_Incomplete);
     e3c:	84 e0       	ldi	r24, 0x04	; 4
     e3e:	0e 94 14 06 	call	0xc28	; 0xc28 <SIMCOM_Callback>

				SIMCOM_ResetJob();
     e42:	0e 94 be 04 	call	0x97c	; 0x97c <SIMCOM_ResetJob>
     e46:	28 c0       	rjmp	.+80     	; 0xe98 <SIMCOM_MainFunction+0x110>
		break;

		case SIMCOM_WaitingForResponse:
		{
			// If waiting for response, then decrement the counter
			if(SIMCOM_CurrentJob.Timeout != 0)
     e48:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <SIMCOM_CurrentJob+0x2>
     e4c:	90 91 2e 05 	lds	r25, 0x052E	; 0x80052e <SIMCOM_CurrentJob+0x3>
     e50:	a0 91 2f 05 	lds	r26, 0x052F	; 0x80052f <SIMCOM_CurrentJob+0x4>
     e54:	b0 91 30 05 	lds	r27, 0x0530	; 0x800530 <SIMCOM_CurrentJob+0x5>
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	a1 05       	cpc	r26, r1
     e5c:	b1 05       	cpc	r27, r1
     e5e:	79 f0       	breq	.+30     	; 0xe7e <SIMCOM_MainFunction+0xf6>
			{
				SIMCOM_CurrentJob.Timeout--;
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	a1 09       	sbc	r26, r1
     e64:	b1 09       	sbc	r27, r1
     e66:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <SIMCOM_CurrentJob+0x2>
     e6a:	90 93 2e 05 	sts	0x052E, r25	; 0x80052e <SIMCOM_CurrentJob+0x3>
     e6e:	a0 93 2f 05 	sts	0x052F, r26	; 0x80052f <SIMCOM_CurrentJob+0x4>
     e72:	b0 93 30 05 	sts	0x0530, r27	; 0x800530 <SIMCOM_CurrentJob+0x5>

				SIMCOM_Callback(SIMCOM_Job_InProgress);
     e76:	82 e0       	ldi	r24, 0x02	; 2
     e78:	0e 94 14 06 	call	0xc28	; 0xc28 <SIMCOM_Callback>
     e7c:	0d c0       	rjmp	.+26     	; 0xe98 <SIMCOM_MainFunction+0x110>
			else
			{
//				Debug_SendString("Response Timeout");

				// If the response has timed out, then give a callback stating error
				SIMCOM_Callback(SIMCOM_Job_Timeout);
     e7e:	83 e0       	ldi	r24, 0x03	; 3
     e80:	0e 94 14 06 	call	0xc28	; 0xc28 <SIMCOM_Callback>

				SIMCOM_ResetJob();
     e84:	0e 94 be 04 	call	0x97c	; 0x97c <SIMCOM_ResetJob>
     e88:	07 c0       	rjmp	.+14     	; 0xe98 <SIMCOM_MainFunction+0x110>
		break;

		case SIMCOM_ReceptionCompleted:
		{
			// Update the Response to the SIMCOM Response Buffer
			SIMCOM_UpdateCurrentJobResponse();
     e8a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <SIMCOM_UpdateCurrentJobResponse>

			// Once the reception is completed, then give a callback to read the data
			SIMCOM_Callback(SIMCOM_Job_Completed);
     e8e:	85 e0       	ldi	r24, 0x05	; 5
     e90:	0e 94 14 06 	call	0xc28	; 0xc28 <SIMCOM_Callback>

			SIMCOM_ResetJob();
     e94:	0e 94 be 04 	call	0x97c	; 0x97c <SIMCOM_ResetJob>
		}
	}

	if(SIMCOM_ComState != SIMCOM_Idle)
     e98:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <SIMCOM_ComState>
     e9c:	88 23       	and	r24, r24
     e9e:	61 f0       	breq	.+24     	; 0xeb8 <SIMCOM_MainFunction+0x130>
	{
		SIMCOM_Aliveness_Counter = P_SIMCOM_ALIVENESS_ERROR_TIME; // Reload Timer
     ea0:	80 e6       	ldi	r24, 0x60	; 96
     ea2:	9a ee       	ldi	r25, 0xEA	; 234
     ea4:	a0 e0       	ldi	r26, 0x00	; 0
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     eac:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     eb0:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     eb4:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	}

	/* Call the Main Functions of the SIMCOM Sub Modules */

	SIMCOM_StateMachine();
     eb8:	0e 94 6a 07 	call	0xed4	; 0xed4 <SIMCOM_StateMachine>
	SIMCOM_SSL_CONFIG_MainFunction();
     ebc:	0e 94 95 0c 	call	0x192a	; 0x192a <SIMCOM_SSL_CONFIG_MainFunction>
	MQTT_StateMachine();
     ec0:	0e 94 5d 09 	call	0x12ba	; 0x12ba <MQTT_StateMachine>
	MQTT_Publish_StateMachine();
     ec4:	0e 94 2f 0b 	call	0x165e	; 0x165e <MQTT_Publish_StateMachine>
	MQTT_AppMain();
     ec8:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <MQTT_AppMain>
     ecc:	08 95       	ret

00000ece <SIMCOM_StateMachine_Callback>:
static void SIMCOM_StateMachine_Callback(SIMCOM_Job_Result_EN result)
{
	// This function will be called by the SIMCOM handler upon successful reception of the response

	// This will be read in the Main function, so simply set the value
	SIMCOM_Job_Result = result;
     ece:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <SIMCOM_Job_Result>
     ed2:	08 95       	ret

00000ed4 <SIMCOM_StateMachine>:
/*****************************************/
/* Function Definitions                  */
/*****************************************/

void SIMCOM_StateMachine(void)
{
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
     ed8:	c0 91 44 03 	lds	r28, 0x0344	; 0x800344 <SIMCOM_State>
	
	BOOL RetryInNextCycle = FALSE;

	switch(SIMCOM_State)
     edc:	8c 2f       	mov	r24, r28
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	87 30       	cpi	r24, 0x07	; 7
     ee2:	91 05       	cpc	r25, r1
     ee4:	08 f0       	brcs	.+2      	; 0xee8 <SIMCOM_StateMachine+0x14>
     ee6:	6f c1       	rjmp	.+734    	; 0x11c6 <SIMCOM_StateMachine+0x2f2>
     ee8:	fc 01       	movw	r30, r24
     eea:	e6 5d       	subi	r30, 0xD6	; 214
     eec:	ff 4f       	sbci	r31, 0xFF	; 255
     eee:	0c 94 ca 0f 	jmp	0x1f94	; 0x1f94 <__tablejump2__>
	{
		case SIMCOM_SM_Init:
		{
			// First Ensure the SIMCOM Module is Connected
			if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
     ef2:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <SIMCOM_Job_Result>
     ef6:	81 11       	cpse	r24, r1
     ef8:	11 c0       	rjmp	.+34     	; 0xf1c <SIMCOM_StateMachine+0x48>
			{
				// Send AT Command and wait for response
				if(SIMCOM_Schedule_Job("AT", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
     efa:	27 e6       	ldi	r18, 0x67	; 103
     efc:	37 e0       	ldi	r19, 0x07	; 7
     efe:	40 ed       	ldi	r20, 0xD0	; 208
     f00:	57 e0       	ldi	r21, 0x07	; 7
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	87 ea       	ldi	r24, 0xA7	; 167
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	0e 94 42 05 	call	0xa84	; 0xa84 <SIMCOM_Schedule_Job>
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	09 f0       	breq	.+2      	; 0xf14 <SIMCOM_StateMachine+0x40>
     f12:	5b c1       	rjmp	.+694    	; 0x11ca <SIMCOM_StateMachine+0x2f6>
				{	
					// Set it to Scheduled only when the SIMCOM Module Accepted it
					SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
     f14:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <SIMCOM_Job_Result>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
     f18:	d0 e0       	ldi	r29, 0x00	; 0
     f1a:	7a c1       	rjmp	.+756    	; 0x1210 <SIMCOM_StateMachine+0x33c>
			}
			else
			{
				
				// Cyclic part for the response
				if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
     f1c:	85 30       	cpi	r24, 0x05	; 5
     f1e:	c9 f4       	brne	.+50     	; 0xf52 <SIMCOM_StateMachine+0x7e>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
     f20:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <SIMCOM_ResponseLength>
     f24:	82 30       	cpi	r24, 0x02	; 2
     f26:	51 f4       	brne	.+20     	; 0xf3c <SIMCOM_StateMachine+0x68>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
     f28:	6a ea       	ldi	r22, 0xAA	; 170
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	87 ec       	ldi	r24, 0xC7	; 199
     f2e:	94 e0       	ldi	r25, 0x04	; 4
     f30:	0e 94 0a 10 	call	0x2014	; 0x2014 <strcmp>
     f34:	89 2b       	or	r24, r25
     f36:	21 f0       	breq	.+8      	; 0xf40 <SIMCOM_StateMachine+0x6c>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	03 c0       	rjmp	.+6      	; 0xf42 <SIMCOM_StateMachine+0x6e>
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	01 c0       	rjmp	.+2      	; 0xf42 <SIMCOM_StateMachine+0x6e>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
     f40:	81 e0       	ldi	r24, 0x01	; 1
				{
					// Job has been completed
					
					// Check if the response is OK or not.
					if(SIMCOM_IsResponseOK())
     f42:	88 23       	and	r24, r24
     f44:	09 f4       	brne	.+2      	; 0xf48 <SIMCOM_StateMachine+0x74>
     f46:	43 c1       	rjmp	.+646    	; 0x11ce <SIMCOM_StateMachine+0x2fa>
					{
						SIMCOM_State = SIMCOM_SM_SIM_Check;
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <SIMCOM_State>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
     f4e:	d0 e0       	ldi	r29, 0x00	; 0
     f50:	5f c1       	rjmp	.+702    	; 0x1210 <SIMCOM_StateMachine+0x33c>
						// If the returned value is ERROR or something else, then act accordingly
						// TODO: Later
						RetryInNextCycle = TRUE;
					}
				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
     f52:	83 50       	subi	r24, 0x03	; 3
     f54:	82 30       	cpi	r24, 0x02	; 2
     f56:	08 f4       	brcc	.+2      	; 0xf5a <SIMCOM_StateMachine+0x86>
     f58:	3c c1       	rjmp	.+632    	; 0x11d2 <SIMCOM_StateMachine+0x2fe>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
     f5a:	d0 e0       	ldi	r29, 0x00	; 0
     f5c:	59 c1       	rjmp	.+690    	; 0x1210 <SIMCOM_StateMachine+0x33c>
		break;
		
		case SIMCOM_SM_SIM_Check:
		{
			// First Ensure the SIMCOM Module is Connected
			if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
     f5e:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <SIMCOM_Job_Result>
     f62:	81 11       	cpse	r24, r1
     f64:	11 c0       	rjmp	.+34     	; 0xf88 <SIMCOM_StateMachine+0xb4>
			{

				// Send AT Command and wait for response
				if(SIMCOM_Schedule_Job("AT+CNMI=1,0,0,0,0", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
     f66:	27 e6       	ldi	r18, 0x67	; 103
     f68:	37 e0       	ldi	r19, 0x07	; 7
     f6a:	40 ed       	ldi	r20, 0xD0	; 208
     f6c:	57 e0       	ldi	r21, 0x07	; 7
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	8d ea       	ldi	r24, 0xAD	; 173
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	0e 94 42 05 	call	0xa84	; 0xa84 <SIMCOM_Schedule_Job>
     f7a:	81 30       	cpi	r24, 0x01	; 1
     f7c:	09 f0       	breq	.+2      	; 0xf80 <SIMCOM_StateMachine+0xac>
     f7e:	2b c1       	rjmp	.+598    	; 0x11d6 <SIMCOM_StateMachine+0x302>
				{
					// Set it to Scheduled only when the SIMCOM Module Accepted it
					SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
     f80:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <SIMCOM_Job_Result>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
     f84:	d0 e0       	ldi	r29, 0x00	; 0
     f86:	44 c1       	rjmp	.+648    	; 0x1210 <SIMCOM_StateMachine+0x33c>
			}
			else
			{
				
				// Cyclic part for the response
				if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
     f88:	85 30       	cpi	r24, 0x05	; 5
     f8a:	c9 f4       	brne	.+50     	; 0xfbe <SIMCOM_StateMachine+0xea>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
     f8c:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <SIMCOM_ResponseLength>
     f90:	82 30       	cpi	r24, 0x02	; 2
     f92:	51 f4       	brne	.+20     	; 0xfa8 <SIMCOM_StateMachine+0xd4>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
     f94:	6a ea       	ldi	r22, 0xAA	; 170
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	87 ec       	ldi	r24, 0xC7	; 199
     f9a:	94 e0       	ldi	r25, 0x04	; 4
     f9c:	0e 94 0a 10 	call	0x2014	; 0x2014 <strcmp>
     fa0:	89 2b       	or	r24, r25
     fa2:	21 f0       	breq	.+8      	; 0xfac <SIMCOM_StateMachine+0xd8>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	03 c0       	rjmp	.+6      	; 0xfae <SIMCOM_StateMachine+0xda>
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	01 c0       	rjmp	.+2      	; 0xfae <SIMCOM_StateMachine+0xda>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
     fac:	81 e0       	ldi	r24, 0x01	; 1
				{
					// Job has been completed
					
					// Check if the response is OK or not.
					if(SIMCOM_IsResponseOK())
     fae:	88 23       	and	r24, r24
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <SIMCOM_StateMachine+0xe0>
     fb2:	13 c1       	rjmp	.+550    	; 0x11da <SIMCOM_StateMachine+0x306>
					{
						SIMCOM_State = SIMCOMUnsollidatedErrorHandling;
     fb4:	82 e0       	ldi	r24, 0x02	; 2
     fb6:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <SIMCOM_State>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
     fba:	d0 e0       	ldi	r29, 0x00	; 0
     fbc:	29 c1       	rjmp	.+594    	; 0x1210 <SIMCOM_StateMachine+0x33c>
						// If the returned value is ERROR or something else, then act accordingly
						// TODO: Later
						RetryInNextCycle = TRUE;
					}
				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
     fbe:	83 50       	subi	r24, 0x03	; 3
     fc0:	82 30       	cpi	r24, 0x02	; 2
     fc2:	08 f4       	brcc	.+2      	; 0xfc6 <SIMCOM_StateMachine+0xf2>
     fc4:	0c c1       	rjmp	.+536    	; 0x11de <SIMCOM_StateMachine+0x30a>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
     fc6:	d0 e0       	ldi	r29, 0x00	; 0
     fc8:	23 c1       	rjmp	.+582    	; 0x1210 <SIMCOM_StateMachine+0x33c>
		break;
		
				case SIMCOMUnsollidatedErrorHandling:
				{
					// First Ensure the SIMCOM Module is Connected
					if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
     fca:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <SIMCOM_Job_Result>
     fce:	81 11       	cpse	r24, r1
     fd0:	11 c0       	rjmp	.+34     	; 0xff4 <SIMCOM_StateMachine+0x120>
					{

						// Send AT Command and wait for response
						if(SIMCOM_Schedule_Job("AT+CPIN?", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
     fd2:	27 e6       	ldi	r18, 0x67	; 103
     fd4:	37 e0       	ldi	r19, 0x07	; 7
     fd6:	40 ed       	ldi	r20, 0xD0	; 208
     fd8:	57 e0       	ldi	r21, 0x07	; 7
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	8f eb       	ldi	r24, 0xBF	; 191
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	0e 94 42 05 	call	0xa84	; 0xa84 <SIMCOM_Schedule_Job>
     fe6:	81 30       	cpi	r24, 0x01	; 1
     fe8:	09 f0       	breq	.+2      	; 0xfec <SIMCOM_StateMachine+0x118>
     fea:	fb c0       	rjmp	.+502    	; 0x11e2 <SIMCOM_StateMachine+0x30e>
						{
							// Set it to Scheduled only when the SIMCOM Module Accepted it
							SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
     fec:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <SIMCOM_Job_Result>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
     ff0:	d0 e0       	ldi	r29, 0x00	; 0
     ff2:	0e c1       	rjmp	.+540    	; 0x1210 <SIMCOM_StateMachine+0x33c>
					}
					else
					{
						
						// Cyclic part for the response
						if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
     ff4:	85 30       	cpi	r24, 0x05	; 5
     ff6:	f9 f4       	brne	.+62     	; 0x1036 <SIMCOM_StateMachine+0x162>
						{
							// Job has been completed
							char * RxString = StringHelper_GetPointerAfter(SIMCOM_GetResponseBuffer(), "+CPIN: ");
     ff8:	68 ec       	ldi	r22, 0xC8	; 200
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	87 ec       	ldi	r24, 0xC7	; 199
     ffe:	94 e0       	ldi	r25, 0x04	; 4
    1000:	0e 94 5f 01 	call	0x2be	; 0x2be <StringHelper_GetPointerAfter>
							

							if(strcmp(RxString, "READY") == 0)
    1004:	66 ed       	ldi	r22, 0xD6	; 214
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	0e 94 0a 10 	call	0x2014	; 0x2014 <strcmp>
    100c:	89 2b       	or	r24, r25
    100e:	09 f0       	breq	.+2      	; 0x1012 <SIMCOM_StateMachine+0x13e>
    1010:	ea c0       	rjmp	.+468    	; 0x11e6 <SIMCOM_StateMachine+0x312>
							{
								char * RxString = StringHelper_GetPointerAfter(SIMCOM_GetResponseBuffer(), "+CPIN:READY");
    1012:	60 ed       	ldi	r22, 0xD0	; 208
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	87 ec       	ldi	r24, 0xC7	; 199
    1018:	94 e0       	ldi	r25, 0x04	; 4
    101a:	0e 94 5f 01 	call	0x2be	; 0x2be <StringHelper_GetPointerAfter>
								
								// Check if the response is OK or not.
								if(strcmp(RxString,"OK"))
    101e:	6a ea       	ldi	r22, 0xAA	; 170
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	0e 94 0a 10 	call	0x2014	; 0x2014 <strcmp>
    1026:	89 2b       	or	r24, r25
    1028:	09 f4       	brne	.+2      	; 0x102c <SIMCOM_StateMachine+0x158>
    102a:	df c0       	rjmp	.+446    	; 0x11ea <SIMCOM_StateMachine+0x316>
								{
									SIMCOM_State = SIMCOM_SM_Check_signal_strength;
    102c:	83 e0       	ldi	r24, 0x03	; 3
    102e:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <SIMCOM_State>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1032:	d0 e0       	ldi	r29, 0x00	; 0
    1034:	ed c0       	rjmp	.+474    	; 0x1210 <SIMCOM_StateMachine+0x33c>
								}
							}
							
							
						}
						else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1036:	83 50       	subi	r24, 0x03	; 3
    1038:	82 30       	cpi	r24, 0x02	; 2
    103a:	08 f4       	brcc	.+2      	; 0x103e <SIMCOM_StateMachine+0x16a>
    103c:	d8 c0       	rjmp	.+432    	; 0x11ee <SIMCOM_StateMachine+0x31a>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    103e:	d0 e0       	ldi	r29, 0x00	; 0
    1040:	e7 c0       	rjmp	.+462    	; 0x1210 <SIMCOM_StateMachine+0x33c>
				break;
		
		case SIMCOM_SM_Check_signal_strength:
		{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1042:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <SIMCOM_Job_Result>
    1046:	81 11       	cpse	r24, r1
    1048:	11 c0       	rjmp	.+34     	; 0x106c <SIMCOM_StateMachine+0x198>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CSQ", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
    104a:	27 e6       	ldi	r18, 0x67	; 103
    104c:	37 e0       	ldi	r19, 0x07	; 7
    104e:	40 ed       	ldi	r20, 0xD0	; 208
    1050:	57 e0       	ldi	r21, 0x07	; 7
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	8c ed       	ldi	r24, 0xDC	; 220
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 94 42 05 	call	0xa84	; 0xa84 <SIMCOM_Schedule_Job>
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	09 f0       	breq	.+2      	; 0x1064 <SIMCOM_StateMachine+0x190>
    1062:	c7 c0       	rjmp	.+398    	; 0x11f2 <SIMCOM_StateMachine+0x31e>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1064:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <SIMCOM_Job_Result>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1068:	d0 e0       	ldi	r29, 0x00	; 0
    106a:	d2 c0       	rjmp	.+420    	; 0x1210 <SIMCOM_StateMachine+0x33c>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    106c:	85 30       	cpi	r24, 0x05	; 5
    106e:	81 f4       	brne	.+32     	; 0x1090 <SIMCOM_StateMachine+0x1bc>
						// Job has been completed

						// Positive Response would be -> +CLTS: <mode>
						// <mode> : 0 Disable   1 Enable

						ULONG NetworkStrength = SIMCOM_GetCSV_Number_fromBuffer("+CSQ: ", 1);
    1070:	61 e0       	ldi	r22, 0x01	; 1
    1072:	83 ee       	ldi	r24, 0xE3	; 227
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <SIMCOM_GetCSV_Number_fromBuffer>

						/* Accept both Roaming and Local Registration */
						if(NetworkStrength <= 31)
    107a:	60 32       	cpi	r22, 0x20	; 32
    107c:	71 05       	cpc	r23, r1
    107e:	81 05       	cpc	r24, r1
    1080:	91 05       	cpc	r25, r1
    1082:	08 f0       	brcs	.+2      	; 0x1086 <SIMCOM_StateMachine+0x1b2>
    1084:	b8 c0       	rjmp	.+368    	; 0x11f6 <SIMCOM_StateMachine+0x322>
						{
						
							SIMCOM_State = SIMCOM_SM_NW_Registration_Check; // Move to next state
    1086:	84 e0       	ldi	r24, 0x04	; 4
    1088:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <SIMCOM_State>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    108c:	d0 e0       	ldi	r29, 0x00	; 0
    108e:	c0 c0       	rjmp	.+384    	; 0x1210 <SIMCOM_StateMachine+0x33c>
							}

							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1090:	83 50       	subi	r24, 0x03	; 3
    1092:	82 30       	cpi	r24, 0x02	; 2
    1094:	08 f4       	brcc	.+2      	; 0x1098 <SIMCOM_StateMachine+0x1c4>
    1096:	b1 c0       	rjmp	.+354    	; 0x11fa <SIMCOM_StateMachine+0x326>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1098:	d0 e0       	ldi	r29, 0x00	; 0
    109a:	ba c0       	rjmp	.+372    	; 0x1210 <SIMCOM_StateMachine+0x33c>
		}
		break;

		case SIMCOM_SM_NW_Registration_Check:
		{
			if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    109c:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <SIMCOM_Job_Result>
    10a0:	81 11       	cpse	r24, r1
    10a2:	11 c0       	rjmp	.+34     	; 0x10c6 <SIMCOM_StateMachine+0x1f2>
			{
				// Send AT Command and wait for response
				if(SIMCOM_Schedule_Job("AT+CREG?", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
    10a4:	27 e6       	ldi	r18, 0x67	; 103
    10a6:	37 e0       	ldi	r19, 0x07	; 7
    10a8:	40 ed       	ldi	r20, 0xD0	; 208
    10aa:	57 e0       	ldi	r21, 0x07	; 7
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	8a ee       	ldi	r24, 0xEA	; 234
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0e 94 42 05 	call	0xa84	; 0xa84 <SIMCOM_Schedule_Job>
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	09 f0       	breq	.+2      	; 0x10be <SIMCOM_StateMachine+0x1ea>
    10bc:	a0 c0       	rjmp	.+320    	; 0x11fe <SIMCOM_StateMachine+0x32a>
				{
					// Set it to Scheduled only when the SIMCOM Module Accepted it
					SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    10be:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <SIMCOM_Job_Result>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    10c2:	d0 e0       	ldi	r29, 0x00	; 0
    10c4:	a5 c0       	rjmp	.+330    	; 0x1210 <SIMCOM_StateMachine+0x33c>
				}
			}
			else
			{
				// Cyclic part for the response
				if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    10c6:	85 30       	cpi	r24, 0x05	; 5
    10c8:	a9 f4       	brne	.+42     	; 0x10f4 <SIMCOM_StateMachine+0x220>
								3 Registration denied
								4 Unknown
								5 Registered, roaming
					 */

					ULONG NetworkRegistrationStatus = SIMCOM_GetCSV_Number_fromBuffer("+CREG: ", 2);
    10ca:	62 e0       	ldi	r22, 0x02	; 2
    10cc:	83 ef       	ldi	r24, 0xF3	; 243
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <SIMCOM_GetCSV_Number_fromBuffer>

					/* Accept both Roaming and Local Registration */
					if((NetworkRegistrationStatus == 1) || (NetworkRegistrationStatus == 5))
    10d4:	61 30       	cpi	r22, 0x01	; 1
    10d6:	71 05       	cpc	r23, r1
    10d8:	81 05       	cpc	r24, r1
    10da:	91 05       	cpc	r25, r1
    10dc:	31 f0       	breq	.+12     	; 0x10ea <SIMCOM_StateMachine+0x216>
    10de:	65 30       	cpi	r22, 0x05	; 5
    10e0:	71 05       	cpc	r23, r1
    10e2:	81 05       	cpc	r24, r1
    10e4:	91 05       	cpc	r25, r1
    10e6:	09 f0       	breq	.+2      	; 0x10ea <SIMCOM_StateMachine+0x216>
    10e8:	8c c0       	rjmp	.+280    	; 0x1202 <SIMCOM_StateMachine+0x32e>
					{
						
						SIMCOM_State = SIMCOM_SM_LTE_Check; // Move to next state
    10ea:	86 e0       	ldi	r24, 0x06	; 6
    10ec:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <SIMCOM_State>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    10f0:	d0 e0       	ldi	r29, 0x00	; 0

					/* Accept both Roaming and Local Registration */
					if((NetworkRegistrationStatus == 1) || (NetworkRegistrationStatus == 5))
					{
						
						SIMCOM_State = SIMCOM_SM_LTE_Check; // Move to next state
    10f2:	8e c0       	rjmp	.+284    	; 0x1210 <SIMCOM_StateMachine+0x33c>

						RetryInNextCycle = TRUE;
					}

				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    10f4:	83 50       	subi	r24, 0x03	; 3
    10f6:	82 30       	cpi	r24, 0x02	; 2
    10f8:	08 f4       	brcc	.+2      	; 0x10fc <SIMCOM_StateMachine+0x228>
    10fa:	85 c0       	rjmp	.+266    	; 0x1206 <SIMCOM_StateMachine+0x332>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    10fc:	d0 e0       	ldi	r29, 0x00	; 0
    10fe:	88 c0       	rjmp	.+272    	; 0x1210 <SIMCOM_StateMachine+0x33c>
		}
		break;
		
		case SIMCOM_SM_LTE_Check:
		{
			if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1100:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <SIMCOM_Job_Result>
    1104:	81 11       	cpse	r24, r1
    1106:	10 c0       	rjmp	.+32     	; 0x1128 <SIMCOM_StateMachine+0x254>
			{
				if(SIMCOM_Schedule_Job("AT+CPSI?", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
    1108:	27 e6       	ldi	r18, 0x67	; 103
    110a:	37 e0       	ldi	r19, 0x07	; 7
    110c:	40 ed       	ldi	r20, 0xD0	; 208
    110e:	57 e0       	ldi	r21, 0x07	; 7
    1110:	60 e0       	ldi	r22, 0x00	; 0
    1112:	70 e0       	ldi	r23, 0x00	; 0
    1114:	8b ef       	ldi	r24, 0xFB	; 251
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 42 05 	call	0xa84	; 0xa84 <SIMCOM_Schedule_Job>
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	29 f5       	brne	.+74     	; 0x116a <SIMCOM_StateMachine+0x296>
				{
					// Set it to Scheduled only when the SIMCOM Module Accepted it
					SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1120:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <SIMCOM_Job_Result>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1124:	d0 e0       	ldi	r29, 0x00	; 0
    1126:	28 c0       	rjmp	.+80     	; 0x1178 <SIMCOM_StateMachine+0x2a4>
				}
			}
			else
			{
				// Cyclic part for the response
				if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1128:	85 30       	cpi	r24, 0x05	; 5
    112a:	c1 f4       	brne	.+48     	; 0x115c <SIMCOM_StateMachine+0x288>
				{
					// Job has been completed
					char * RxString = StringHelper_GetPointerAfter(SIMCOM_GetResponseBuffer(), "+CPIN: ");
    112c:	68 ec       	ldi	r22, 0xC8	; 200
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	87 ec       	ldi	r24, 0xC7	; 199
    1132:	94 e0       	ldi	r25, 0x04	; 4
    1134:	0e 94 5f 01 	call	0x2be	; 0x2be <StringHelper_GetPointerAfter>
				
					if (*RxString)
    1138:	fc 01       	movw	r30, r24
    113a:	20 81       	ld	r18, Z
    113c:	22 23       	and	r18, r18
    113e:	b9 f0       	breq	.+46     	; 0x116e <SIMCOM_StateMachine+0x29a>
					{
						if (memcmp("LTE,Online",RxString,10))
    1140:	4a e0       	ldi	r20, 0x0A	; 10
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	bc 01       	movw	r22, r24
    1146:	84 e0       	ldi	r24, 0x04	; 4
    1148:	91 e0       	ldi	r25, 0x01	; 1
    114a:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <memcmp>
    114e:	89 2b       	or	r24, r25
    1150:	81 f0       	breq	.+32     	; 0x1172 <SIMCOM_StateMachine+0x29e>
						{
											
							//do next job
							RetryInNextCycle = FALSE;
							SIMCOM_State = SIMCOM_PDP_context;
    1152:	85 e0       	ldi	r24, 0x05	; 5
    1154:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <SIMCOM_State>
					{
						if (memcmp("LTE,Online",RxString,10))
						{
											
							//do next job
							RetryInNextCycle = FALSE;
    1158:	d0 e0       	ldi	r29, 0x00	; 0
    115a:	0e c0       	rjmp	.+28     	; 0x1178 <SIMCOM_StateMachine+0x2a4>
						//TODO: Later
						RetryInNextCycle = TRUE;
					}

				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    115c:	83 50       	subi	r24, 0x03	; 3
    115e:	82 30       	cpi	r24, 0x02	; 2
    1160:	50 f0       	brcs	.+20     	; 0x1176 <SIMCOM_StateMachine+0x2a2>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1162:	d0 e0       	ldi	r29, 0x00	; 0
    1164:	09 c0       	rjmp	.+18     	; 0x1178 <SIMCOM_StateMachine+0x2a4>
    1166:	d0 e0       	ldi	r29, 0x00	; 0
    1168:	07 c0       	rjmp	.+14     	; 0x1178 <SIMCOM_StateMachine+0x2a4>
    116a:	d0 e0       	ldi	r29, 0x00	; 0
    116c:	05 c0       	rjmp	.+10     	; 0x1178 <SIMCOM_StateMachine+0x2a4>
					}
					else
					{
						// If the returned value is ERROR or something else, then act accordingly
						//TODO: Later
						RetryInNextCycle = TRUE;
    116e:	d1 e0       	ldi	r29, 0x01	; 1
    1170:	03 c0       	rjmp	.+6      	; 0x1178 <SIMCOM_StateMachine+0x2a4>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							//TODO: Later
							RetryInNextCycle = TRUE;
    1172:	d1 e0       	ldi	r29, 0x01	; 1
    1174:	01 c0       	rjmp	.+2      	; 0x1178 <SIMCOM_StateMachine+0x2a4>

				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
				{
					// If there is a problem in reception, retry sending the command
					RetryInNextCycle = TRUE;
    1176:	d1 e0       	ldi	r29, 0x01	; 1
			}
		}
		case SIMCOM_PDP_context:
		{
			// First Ensure the SIMCOM Module is Connected
			if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1178:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <SIMCOM_Job_Result>
    117c:	81 11       	cpse	r24, r1
    117e:	0f c0       	rjmp	.+30     	; 0x119e <SIMCOM_StateMachine+0x2ca>
			{
				// Send AT Command and wait for response
				if(SIMCOM_Schedule_Job("AT+CGATT?", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
    1180:	27 e6       	ldi	r18, 0x67	; 103
    1182:	37 e0       	ldi	r19, 0x07	; 7
    1184:	40 ed       	ldi	r20, 0xD0	; 208
    1186:	57 e0       	ldi	r21, 0x07	; 7
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	8f e0       	ldi	r24, 0x0F	; 15
    118e:	91 e0       	ldi	r25, 0x01	; 1
    1190:	0e 94 42 05 	call	0xa84	; 0xa84 <SIMCOM_Schedule_Job>
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	e1 f5       	brne	.+120    	; 0x1210 <SIMCOM_StateMachine+0x33c>
				{
					// Set it to Scheduled only when the SIMCOM Module Accepted it
					SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1198:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <SIMCOM_Job_Result>
    119c:	39 c0       	rjmp	.+114    	; 0x1210 <SIMCOM_StateMachine+0x33c>
				}
			}
			else
			{
				// Cyclic part for the response
				if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    119e:	85 30       	cpi	r24, 0x05	; 5
    11a0:	71 f4       	brne	.+28     	; 0x11be <SIMCOM_StateMachine+0x2ea>
					// Job has been completed

					// Positive Response would be -> +CLTS: <mode>
					// <mode> : 0 Disable   1 Enable

					ULONG PDP_Context = SIMCOM_GetCSV_Number_fromBuffer("+CGATT: ", 1);
    11a2:	61 e0       	ldi	r22, 0x01	; 1
    11a4:	89 e1       	ldi	r24, 0x19	; 25
    11a6:	91 e0       	ldi	r25, 0x01	; 1
    11a8:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <SIMCOM_GetCSV_Number_fromBuffer>

					/* Accept both Roaming and Local Registration */
					if(PDP_Context == 1)
    11ac:	61 30       	cpi	r22, 0x01	; 1
    11ae:	71 05       	cpc	r23, r1
    11b0:	81 05       	cpc	r24, r1
    11b2:	91 05       	cpc	r25, r1
    11b4:	51 f5       	brne	.+84     	; 0x120a <SIMCOM_StateMachine+0x336>
					{
						
						SIMCOM_State = SIMCOM_SM_Ready; // Move to next state
    11b6:	8a e0       	ldi	r24, 0x0A	; 10
    11b8:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <SIMCOM_State>
    11bc:	29 c0       	rjmp	.+82     	; 0x1210 <SIMCOM_StateMachine+0x33c>
						}

						RetryInNextCycle = TRUE;
					}
				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    11be:	83 50       	subi	r24, 0x03	; 3
    11c0:	82 30       	cpi	r24, 0x02	; 2
    11c2:	30 f5       	brcc	.+76     	; 0x1210 <SIMCOM_StateMachine+0x33c>
    11c4:	24 c0       	rjmp	.+72     	; 0x120e <SIMCOM_StateMachine+0x33a>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    11c6:	d0 e0       	ldi	r29, 0x00	; 0
    11c8:	23 c0       	rjmp	.+70     	; 0x1210 <SIMCOM_StateMachine+0x33c>
    11ca:	d0 e0       	ldi	r29, 0x00	; 0
    11cc:	21 c0       	rjmp	.+66     	; 0x1210 <SIMCOM_StateMachine+0x33c>
					}
					else
					{
						// If the returned value is ERROR or something else, then act accordingly
						// TODO: Later
						RetryInNextCycle = TRUE;
    11ce:	d1 e0       	ldi	r29, 0x01	; 1
    11d0:	1f c0       	rjmp	.+62     	; 0x1210 <SIMCOM_StateMachine+0x33c>
					}
				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
				{
					// If there is a problem in reception, retry sending the command
					RetryInNextCycle = TRUE;
    11d2:	d1 e0       	ldi	r29, 0x01	; 1
    11d4:	1d c0       	rjmp	.+58     	; 0x1210 <SIMCOM_StateMachine+0x33c>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    11d6:	d0 e0       	ldi	r29, 0x00	; 0
    11d8:	1b c0       	rjmp	.+54     	; 0x1210 <SIMCOM_StateMachine+0x33c>
					}
					else
					{
						// If the returned value is ERROR or something else, then act accordingly
						// TODO: Later
						RetryInNextCycle = TRUE;
    11da:	d1 e0       	ldi	r29, 0x01	; 1
    11dc:	19 c0       	rjmp	.+50     	; 0x1210 <SIMCOM_StateMachine+0x33c>
					}
				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
				{
					// If there is a problem in reception, retry sending the command
					RetryInNextCycle = TRUE;
    11de:	d1 e0       	ldi	r29, 0x01	; 1
    11e0:	17 c0       	rjmp	.+46     	; 0x1210 <SIMCOM_StateMachine+0x33c>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    11e2:	d0 e0       	ldi	r29, 0x00	; 0
    11e4:	15 c0       	rjmp	.+42     	; 0x1210 <SIMCOM_StateMachine+0x33c>
    11e6:	d0 e0       	ldi	r29, 0x00	; 0
    11e8:	13 c0       	rjmp	.+38     	; 0x1210 <SIMCOM_StateMachine+0x33c>
								}
								else
								{
									// If the returned value is ERROR or something else, then act accordingly
									// TODO: Later
									RetryInNextCycle = TRUE;
    11ea:	d1 e0       	ldi	r29, 0x01	; 1
    11ec:	11 c0       	rjmp	.+34     	; 0x1210 <SIMCOM_StateMachine+0x33c>
							
						}
						else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
						{
							// If there is a problem in reception, retry sending the command
							RetryInNextCycle = TRUE;
    11ee:	d1 e0       	ldi	r29, 0x01	; 1
    11f0:	0f c0       	rjmp	.+30     	; 0x1210 <SIMCOM_StateMachine+0x33c>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    11f2:	d0 e0       	ldi	r29, 0x00	; 0
    11f4:	0d c0       	rjmp	.+26     	; 0x1210 <SIMCOM_StateMachine+0x33c>
							{
								// Network Not Registered.
								// TODO: Throw Error including the Status returned by the SIM800 module
							}

							RetryInNextCycle = TRUE;
    11f6:	d1 e0       	ldi	r29, 0x01	; 1
    11f8:	0b c0       	rjmp	.+22     	; 0x1210 <SIMCOM_StateMachine+0x33c>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    11fa:	d1 e0       	ldi	r29, 0x01	; 1
    11fc:	09 c0       	rjmp	.+18     	; 0x1210 <SIMCOM_StateMachine+0x33c>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    11fe:	d0 e0       	ldi	r29, 0x00	; 0
    1200:	07 c0       	rjmp	.+14     	; 0x1210 <SIMCOM_StateMachine+0x33c>
						{
							// Network Not Registered.
							// TODO: Throw Error including the Status returned by the SIM800 module
						}

						RetryInNextCycle = TRUE;
    1202:	d1 e0       	ldi	r29, 0x01	; 1
    1204:	05 c0       	rjmp	.+10     	; 0x1210 <SIMCOM_StateMachine+0x33c>

				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
				{
					// If there is a problem in reception, retry sending the command
					RetryInNextCycle = TRUE;
    1206:	d1 e0       	ldi	r29, 0x01	; 1
    1208:	03 c0       	rjmp	.+6      	; 0x1210 <SIMCOM_StateMachine+0x33c>
						{
							// Network Not Registered.
							// TODO: Throw Error including the Status returned by the SIM800 module
						}

						RetryInNextCycle = TRUE;
    120a:	d1 e0       	ldi	r29, 0x01	; 1
    120c:	01 c0       	rjmp	.+2      	; 0x1210 <SIMCOM_StateMachine+0x33c>
					}
				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
				{
					// If there is a problem in reception, retry sending the command
					RetryInNextCycle = TRUE;
    120e:	d1 e0       	ldi	r29, 0x01	; 1
			// Do Nothing, The state machine has been completed
		}
		break;
	}

	if(RetryInNextCycle == TRUE)
    1210:	d1 30       	cpi	r29, 0x01	; 1
    1212:	69 f4       	brne	.+26     	; 0x122e <SIMCOM_StateMachine+0x35a>
	{
		// If Retry is allowed
		if(SIMCOM_SM_Retry_Count != 0)
    1214:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <SIMCOM_SM_Retry_Count>
    1218:	88 23       	and	r24, r24
    121a:	31 f0       	breq	.+12     	; 0x1228 <SIMCOM_StateMachine+0x354>
		{
			SIMCOM_SM_Retry_Count--; // Decrement the Retry Count
    121c:	81 50       	subi	r24, 0x01	; 1
    121e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <SIMCOM_SM_Retry_Count>

			SIMCOM_Job_Result = SIMCOM_Job_Idle; // Setting the Job to Idle will retry the Job again in next cycle.
    1222:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <SIMCOM_Job_Result>
    1226:	03 c0       	rjmp	.+6      	; 0x122e <SIMCOM_StateMachine+0x35a>
		}
		else
		{
			// RETRY Mechanism expired, abort the Job and do not move the state
			SIMCOM_Job_Result = SIMCOM_Job_Aborted;
    1228:	86 e0       	ldi	r24, 0x06	; 6
    122a:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <SIMCOM_Job_Result>
		}
	}

	if(SIMCOM_Job_Result == SIMCOM_Job_Aborted)
    122e:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <SIMCOM_Job_Result>
    1232:	86 30       	cpi	r24, 0x06	; 6
    1234:	31 f4       	brne	.+12     	; 0x1242 <SIMCOM_StateMachine+0x36e>
	{
		// If in any of the state, the Job is aborted, then move to the Error State
		
		SIMCOM_State = SIMCOM_SM_Error;
    1236:	8b e0       	ldi	r24, 0x0B	; 11
    1238:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <SIMCOM_State>
				default:
					// Do Nothing, SIMCOM Module will timeout and report error
					break;
			}

			SIMCOM_ERROR_CALLBACK(ErrorState);
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	0e 94 4c 09 	call	0x1298	; 0x1298 <COSMIC_SIMCOM_Error_Callback>
		}
	}

	/* Check if the state changed after execution */
	if(SIMCOM_State_Before_Execution != SIMCOM_State)
    1242:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <SIMCOM_State>
    1246:	c8 17       	cp	r28, r24
    1248:	29 f0       	breq	.+10     	; 0x1254 <SIMCOM_StateMachine+0x380>
	{
		// If changed, the Set the New Job Result as Idle for the next state to proceed further
		SIMCOM_Job_Result = SIMCOM_Job_Idle; // Reset the Job state so that next command will be sent
    124a:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <SIMCOM_Job_Result>

		SIMCOM_SM_Retry_Count = P_SIMCOM_DEFAULT_FAILURE_RETRY_COUNT; // Reset the Retry Count
    124e:	8a e0       	ldi	r24, 0x0A	; 10
    1250:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <SIMCOM_SM_Retry_Count>
	}
}
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	08 95       	ret

0000125a <PRC_SYS_INIT>:
 ***********************************/

/* Initialization function */
void PRC_SYS_INIT(void)
{	
	FUN_SYS_Internal_Init();
    125a:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <FUN_SYS_Internal_Init>
    125e:	08 95       	ret

00001260 <FUN_SYS_Evaluate_Tasks_x1>:
	/* Update the tasks scheduling ONLY when the previous tasks were done. */
	if(SysOS_Ctrl.ExecPending == FALSE)
	{
#endif

		FUN_SYS_Internal_Evaluate_Tasks_x1();
    1260:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <FUN_SYS_Internal_Evaluate_Tasks_x1>
    1264:	08 95       	ret

00001266 <FUN_SYS_Execute_Tasks>:
#if (S_SYS_OS_METHOD == S_SYS_OS_POLLING_METHOD)
	if(SysOS_Ctrl.ExecPending == TRUE)
	{
#endif

		FUN_SYS_Internal_Execute_Tasks();
    1266:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <FUN_SYS_Internal_Execute_Tasks>
    126a:	08 95       	ret

0000126c <FUN_SYS_Timer_x1>:
#if (S_SYS_OS_DUAL_CORE_ENABLED != TRUE)
void FUN_SYS_Timer_x1(void)
{
	
	/* Evaluate the tasks */
	FUN_SYS_Evaluate_Tasks_x1();
    126c:	0e 94 30 09 	call	0x1260	; 0x1260 <FUN_SYS_Evaluate_Tasks_x1>

#if (S_SYS_OS_METHOD == S_SYS_OS_INTERRUPT_METHOD)
	/* If it is Interrupt method, execute the task here itself */
	FUN_SYS_Execute_Tasks();
    1270:	0e 94 33 09 	call	0x1266	; 0x1266 <FUN_SYS_Execute_Tasks>
    1274:	08 95       	ret

00001276 <SysOs_Main>:
#if (S_SYS_OS_MAIN_FUNCTION_TYPE == S_SYS_OS_DEFAULT_MAIN_FUNCTION_TYPE)
void SysOs_Main(void)
{

	/* Initialization function should be called first */
	PRC_SYS_INIT();
    1276:	0e 94 2d 09 	call	0x125a	; 0x125a <PRC_SYS_INIT>
	while(!g_Fatal_Error_B)
    127a:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <g_Fatal_Error_B>
    127e:	88 23       	and	r24, r24
    1280:	e1 f3       	breq	.-8      	; 0x127a <SysOs_Main+0x4>
		 */
		FUN_SYS_Execute_Tasks();
#endif
	}
		
}
    1282:	08 95       	ret

00001284 <COSMIC_Generic_SIMCOM_Callback>:
/* Function Declarations */
/*************************/

static inline void SIMCOM_ClearResponseBuffer()
{
	memset(SIMCOM_ResponseBuffer, 0, BUFFER_MAX_SIZE);
    1284:	84 e6       	ldi	r24, 0x64	; 100
    1286:	e7 ec       	ldi	r30, 0xC7	; 199
    1288:	f4 e0       	ldi	r31, 0x04	; 4
    128a:	df 01       	movw	r26, r30
    128c:	1d 92       	st	X+, r1
    128e:	8a 95       	dec	r24
    1290:	e9 f7       	brne	.-6      	; 0x128c <COSMIC_Generic_SIMCOM_Callback+0x8>

	SIMCOM_ResponseLength = 0;
    1292:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <SIMCOM_ResponseLength>
    1296:	08 95       	ret

00001298 <COSMIC_SIMCOM_Error_Callback>:
	SIMCOM_ClearResponseBuffer();
}

void COSMIC_SIMCOM_Error_Callback(SIMCOM_Error_State_EN Error)
{
	if(Error == SIMCOM_Error_GSM_Not_Connected)
    1298:	82 30       	cpi	r24, 0x02	; 2
    129a:	21 f4       	brne	.+8      	; 0x12a4 <COSMIC_SIMCOM_Error_Callback+0xc>
	{
		DebugStringRow2("GSM_Not_Connected");
    129c:	82 e2       	ldi	r24, 0x22	; 34
    129e:	91 e0       	ldi	r25, 0x01	; 1
    12a0:	0e 94 a5 02 	call	0x54a	; 0x54a <DebugStringRow2>
    12a4:	08 95       	ret

000012a6 <Avr_Init>:
}


void Avr_Init()
{
		DDRA  = 0XFF;
    12a6:	8f ef       	ldi	r24, 0xFF	; 255
    12a8:	8a bb       	out	0x1a, r24	; 26
		DDRB  = 0xFF;
    12aa:	87 bb       	out	0x17, r24	; 23
		PORTA = 0XFF;
    12ac:	8b bb       	out	0x1b, r24	; 27
		PORTB = 0xFF;
    12ae:	88 bb       	out	0x18, r24	; 24
    12b0:	08 95       	ret

000012b2 <Avr_Main_x10>:
}

void Avr_Main_x10()
{
    12b2:	08 95       	ret

000012b4 <MQTT_CALLBACK>:
static void MQTT_CALLBACK(SIMCOM_Job_Result_EN result)
{
	// This function will be called by the SIMCOM handler upon successful reception of the response

	// This will be read in the Main function, so simply set the value
	SIMCOM_Job_Result = result;
    12b4:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <SIMCOM_Job_Result>
    12b8:	08 95       	ret

000012ba <MQTT_StateMachine>:
/*****************************************/
/* Function Definitions                  */
/*****************************************/

void MQTT_StateMachine(void)
{
    12ba:	cf 93       	push	r28
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;
    12bc:	c0 91 47 03 	lds	r28, 0x0347	; 0x800347 <MQTT_State>

	BOOL RetryInNextCycle = FALSE;

	if(IsMQTT_SSL_Configuration_Completed())
    12c0:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <C_MQTT_SSL_Config_State>
    12c4:	86 30       	cpi	r24, 0x06	; 6
    12c6:	09 f0       	breq	.+2      	; 0x12ca <MQTT_StateMachine+0x10>
    12c8:	c5 c1       	rjmp	.+906    	; 0x1654 <MQTT_StateMachine+0x39a>
	{
		switch(MQTT_State)
    12ca:	8c 2f       	mov	r24, r28
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	88 30       	cpi	r24, 0x08	; 8
    12d0:	91 05       	cpc	r25, r1
    12d2:	08 f0       	brcs	.+2      	; 0x12d6 <MQTT_StateMachine+0x1c>
    12d4:	7e c1       	rjmp	.+764    	; 0x15d2 <MQTT_StateMachine+0x318>
    12d6:	fc 01       	movw	r30, r24
    12d8:	ef 5c       	subi	r30, 0xCF	; 207
    12da:	ff 4f       	sbci	r31, 0xFF	; 255
    12dc:	0c 94 ca 0f 	jmp	0x1f94	; 0x1f94 <__tablejump2__>
		{
			case MQTTSTART:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    12e0:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <SIMCOM_Job_Result>
    12e4:	81 11       	cpse	r24, r1
    12e6:	11 c0       	rjmp	.+34     	; 0x130a <MQTT_StateMachine+0x50>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CMQTTSTART", SIMCOM_DEFAULT_TIMEOUT, MQTT_CALLBACK) == TRUE)
    12e8:	2a e5       	ldi	r18, 0x5A	; 90
    12ea:	39 e0       	ldi	r19, 0x09	; 9
    12ec:	40 ed       	ldi	r20, 0xD0	; 208
    12ee:	57 e0       	ldi	r21, 0x07	; 7
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	84 e3       	ldi	r24, 0x34	; 52
    12f6:	91 e0       	ldi	r25, 0x01	; 1
    12f8:	0e 94 42 05 	call	0xa84	; 0xa84 <SIMCOM_Schedule_Job>
    12fc:	81 30       	cpi	r24, 0x01	; 1
    12fe:	09 f0       	breq	.+2      	; 0x1302 <MQTT_StateMachine+0x48>
    1300:	6a c1       	rjmp	.+724    	; 0x15d6 <MQTT_StateMachine+0x31c>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1302:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <SIMCOM_Job_Result>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	8d c1       	rjmp	.+794    	; 0x1624 <MQTT_StateMachine+0x36a>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    130a:	85 30       	cpi	r24, 0x05	; 5
    130c:	39 f5       	brne	.+78     	; 0x135c <MQTT_StateMachine+0xa2>
					{
						// Job has been completed
						// Positive Response would be -> +CLTS: <mode>
						// <mode> : 0 Disable   1 Enable
						
						ULONG MQTTStatus = SIMCOM_GetCSV_Number_fromBuffer("+CMQTTSTART: ", 1);
    130e:	61 e0       	ldi	r22, 0x01	; 1
    1310:	82 e4       	ldi	r24, 0x42	; 66
    1312:	91 e0       	ldi	r25, 0x01	; 1
    1314:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <SIMCOM_GetCSV_Number_fromBuffer>
						
						if(MQTTStatus == 0)
    1318:	67 2b       	or	r22, r23
    131a:	68 2b       	or	r22, r24
    131c:	69 2b       	or	r22, r25
    131e:	29 f4       	brne	.+10     	; 0x132a <MQTT_StateMachine+0x70>
						{
							MQTT_State = MQTT_Accquire;
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <MQTT_State>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	7d c1       	rjmp	.+762    	; 0x1624 <MQTT_StateMachine+0x36a>

static inline BOOL SIMCOM_IsResponseError()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 5)
    132a:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <SIMCOM_ResponseLength>
    132e:	85 30       	cpi	r24, 0x05	; 5
    1330:	51 f4       	brne	.+20     	; 0x1346 <MQTT_StateMachine+0x8c>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "ERROR") == 0)
    1332:	60 e5       	ldi	r22, 0x50	; 80
    1334:	71 e0       	ldi	r23, 0x01	; 1
    1336:	87 ec       	ldi	r24, 0xC7	; 199
    1338:	94 e0       	ldi	r25, 0x04	; 4
    133a:	0e 94 0a 10 	call	0x2014	; 0x2014 <strcmp>
    133e:	89 2b       	or	r24, r25
    1340:	21 f0       	breq	.+8      	; 0x134a <MQTT_StateMachine+0x90>
	return retval;
}

static inline BOOL SIMCOM_IsResponseError()
{
	BOOL retval = FALSE;
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	03 c0       	rjmp	.+6      	; 0x134c <MQTT_StateMachine+0x92>
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	01 c0       	rjmp	.+2      	; 0x134c <MQTT_StateMachine+0x92>

	if(SIMCOM_GetResponseLength() == 5)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "ERROR") == 0)
		{
			retval = TRUE;
    134a:	81 e0       	ldi	r24, 0x01	; 1
						if(MQTTStatus == 0)
						{
							MQTT_State = MQTT_Accquire;
							
						}
						else if(SIMCOM_IsResponseError())
    134c:	88 23       	and	r24, r24
    134e:	09 f4       	brne	.+2      	; 0x1352 <MQTT_StateMachine+0x98>
    1350:	44 c1       	rjmp	.+648    	; 0x15da <MQTT_StateMachine+0x320>
						{
							MQTT_State = MQTT_Accquire;
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <MQTT_State>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	64 c1       	rjmp	.+712    	; 0x1624 <MQTT_StateMachine+0x36a>
						else if(SIMCOM_IsResponseError())
						{
							MQTT_State = MQTT_Accquire;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    135c:	83 50       	subi	r24, 0x03	; 3
    135e:	82 30       	cpi	r24, 0x02	; 2
    1360:	08 f4       	brcc	.+2      	; 0x1364 <MQTT_StateMachine+0xaa>
    1362:	3d c1       	rjmp	.+634    	; 0x15de <MQTT_StateMachine+0x324>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	5e c1       	rjmp	.+700    	; 0x1624 <MQTT_StateMachine+0x36a>


			case MQTT_Accquire:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1368:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <SIMCOM_Job_Result>
    136c:	81 11       	cpse	r24, r1
    136e:	11 c0       	rjmp	.+34     	; 0x1392 <MQTT_StateMachine+0xd8>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CMQTTACCQ=0,\"COSMIC_Device01\",1", SIMCOM_DEFAULT_TIMEOUT, MQTT_CALLBACK) == TRUE)
    1370:	2a e5       	ldi	r18, 0x5A	; 90
    1372:	39 e0       	ldi	r19, 0x09	; 9
    1374:	40 ed       	ldi	r20, 0xD0	; 208
    1376:	57 e0       	ldi	r21, 0x07	; 7
    1378:	60 e0       	ldi	r22, 0x00	; 0
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	86 e5       	ldi	r24, 0x56	; 86
    137e:	91 e0       	ldi	r25, 0x01	; 1
    1380:	0e 94 42 05 	call	0xa84	; 0xa84 <SIMCOM_Schedule_Job>
    1384:	81 30       	cpi	r24, 0x01	; 1
    1386:	09 f0       	breq	.+2      	; 0x138a <MQTT_StateMachine+0xd0>
    1388:	2c c1       	rjmp	.+600    	; 0x15e2 <MQTT_StateMachine+0x328>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    138a:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <SIMCOM_Job_Result>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	49 c1       	rjmp	.+658    	; 0x1624 <MQTT_StateMachine+0x36a>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1392:	85 30       	cpi	r24, 0x05	; 5
    1394:	c9 f4       	brne	.+50     	; 0x13c8 <MQTT_StateMachine+0x10e>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    1396:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <SIMCOM_ResponseLength>
    139a:	82 30       	cpi	r24, 0x02	; 2
    139c:	51 f4       	brne	.+20     	; 0x13b2 <MQTT_StateMachine+0xf8>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    139e:	6a ea       	ldi	r22, 0xAA	; 170
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	87 ec       	ldi	r24, 0xC7	; 199
    13a4:	94 e0       	ldi	r25, 0x04	; 4
    13a6:	0e 94 0a 10 	call	0x2014	; 0x2014 <strcmp>
    13aa:	89 2b       	or	r24, r25
    13ac:	21 f0       	breq	.+8      	; 0x13b6 <MQTT_StateMachine+0xfc>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	03 c0       	rjmp	.+6      	; 0x13b8 <MQTT_StateMachine+0xfe>
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	01 c0       	rjmp	.+2      	; 0x13b8 <MQTT_StateMachine+0xfe>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    13b6:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    13b8:	88 23       	and	r24, r24
    13ba:	09 f4       	brne	.+2      	; 0x13be <MQTT_StateMachine+0x104>
    13bc:	14 c1       	rjmp	.+552    	; 0x15e6 <MQTT_StateMachine+0x32c>
						{
							MQTT_State = MQTT_SSL_Configure;
    13be:	82 e0       	ldi	r24, 0x02	; 2
    13c0:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <MQTT_State>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	2e c1       	rjmp	.+604    	; 0x1624 <MQTT_StateMachine+0x36a>
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
						
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    13c8:	83 50       	subi	r24, 0x03	; 3
    13ca:	82 30       	cpi	r24, 0x02	; 2
    13cc:	08 f4       	brcc	.+2      	; 0x13d0 <MQTT_StateMachine+0x116>
    13ce:	0d c1       	rjmp	.+538    	; 0x15ea <MQTT_StateMachine+0x330>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	28 c1       	rjmp	.+592    	; 0x1624 <MQTT_StateMachine+0x36a>


			case MQTT_SSL_Configure:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    13d4:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <SIMCOM_Job_Result>
    13d8:	81 11       	cpse	r24, r1
    13da:	11 c0       	rjmp	.+34     	; 0x13fe <MQTT_StateMachine+0x144>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CMQTTSSLCFG=0,0", SIMCOM_DEFAULT_TIMEOUT, MQTT_CALLBACK) == TRUE)
    13dc:	2a e5       	ldi	r18, 0x5A	; 90
    13de:	39 e0       	ldi	r19, 0x09	; 9
    13e0:	40 ed       	ldi	r20, 0xD0	; 208
    13e2:	57 e0       	ldi	r21, 0x07	; 7
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	70 e0       	ldi	r23, 0x00	; 0
    13e8:	89 e7       	ldi	r24, 0x79	; 121
    13ea:	91 e0       	ldi	r25, 0x01	; 1
    13ec:	0e 94 42 05 	call	0xa84	; 0xa84 <SIMCOM_Schedule_Job>
    13f0:	81 30       	cpi	r24, 0x01	; 1
    13f2:	09 f0       	breq	.+2      	; 0x13f6 <MQTT_StateMachine+0x13c>
    13f4:	fc c0       	rjmp	.+504    	; 0x15ee <MQTT_StateMachine+0x334>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    13f6:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <SIMCOM_Job_Result>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	13 c1       	rjmp	.+550    	; 0x1624 <MQTT_StateMachine+0x36a>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    13fe:	85 30       	cpi	r24, 0x05	; 5
    1400:	c9 f4       	brne	.+50     	; 0x1434 <MQTT_StateMachine+0x17a>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    1402:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <SIMCOM_ResponseLength>
    1406:	82 30       	cpi	r24, 0x02	; 2
    1408:	51 f4       	brne	.+20     	; 0x141e <MQTT_StateMachine+0x164>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    140a:	6a ea       	ldi	r22, 0xAA	; 170
    140c:	70 e0       	ldi	r23, 0x00	; 0
    140e:	87 ec       	ldi	r24, 0xC7	; 199
    1410:	94 e0       	ldi	r25, 0x04	; 4
    1412:	0e 94 0a 10 	call	0x2014	; 0x2014 <strcmp>
    1416:	89 2b       	or	r24, r25
    1418:	21 f0       	breq	.+8      	; 0x1422 <MQTT_StateMachine+0x168>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	03 c0       	rjmp	.+6      	; 0x1424 <MQTT_StateMachine+0x16a>
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	01 c0       	rjmp	.+2      	; 0x1424 <MQTT_StateMachine+0x16a>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    1422:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    1424:	88 23       	and	r24, r24
    1426:	09 f4       	brne	.+2      	; 0x142a <MQTT_StateMachine+0x170>
    1428:	e4 c0       	rjmp	.+456    	; 0x15f2 <MQTT_StateMachine+0x338>
						{
							MQTT_State = MQTT_Connect; // Move to next state
    142a:	83 e0       	ldi	r24, 0x03	; 3
    142c:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <MQTT_State>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	f8 c0       	rjmp	.+496    	; 0x1624 <MQTT_StateMachine+0x36a>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1434:	83 50       	subi	r24, 0x03	; 3
    1436:	82 30       	cpi	r24, 0x02	; 2
    1438:	08 f4       	brcc	.+2      	; 0x143c <MQTT_StateMachine+0x182>
    143a:	dd c0       	rjmp	.+442    	; 0x15f6 <MQTT_StateMachine+0x33c>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	f2 c0       	rjmp	.+484    	; 0x1624 <MQTT_StateMachine+0x36a>
			}
			break;
			case MQTT_Connect:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1440:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <SIMCOM_Job_Result>
    1444:	81 11       	cpse	r24, r1
    1446:	11 c0       	rjmp	.+34     	; 0x146a <MQTT_StateMachine+0x1b0>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CMQTTCONNECT=0,\"tcp://a1nwcqrp1qjjtm-ats.iot.ap-south-1.amazonaws.com:8883\",60,1", SIMCOM_DEFAULT_TIMEOUT, MQTT_CALLBACK) == TRUE)
    1448:	2a e5       	ldi	r18, 0x5A	; 90
    144a:	39 e0       	ldi	r19, 0x09	; 9
    144c:	40 ed       	ldi	r20, 0xD0	; 208
    144e:	57 e0       	ldi	r21, 0x07	; 7
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	70 e0       	ldi	r23, 0x00	; 0
    1454:	8c e8       	ldi	r24, 0x8C	; 140
    1456:	91 e0       	ldi	r25, 0x01	; 1
    1458:	0e 94 42 05 	call	0xa84	; 0xa84 <SIMCOM_Schedule_Job>
    145c:	81 30       	cpi	r24, 0x01	; 1
    145e:	09 f0       	breq	.+2      	; 0x1462 <MQTT_StateMachine+0x1a8>
    1460:	cc c0       	rjmp	.+408    	; 0x15fa <MQTT_StateMachine+0x340>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1462:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <SIMCOM_Job_Result>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	dd c0       	rjmp	.+442    	; 0x1624 <MQTT_StateMachine+0x36a>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    146a:	85 30       	cpi	r24, 0x05	; 5
    146c:	c9 f4       	brne	.+50     	; 0x14a0 <MQTT_StateMachine+0x1e6>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    146e:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <SIMCOM_ResponseLength>
    1472:	82 30       	cpi	r24, 0x02	; 2
    1474:	51 f4       	brne	.+20     	; 0x148a <MQTT_StateMachine+0x1d0>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    1476:	6a ea       	ldi	r22, 0xAA	; 170
    1478:	70 e0       	ldi	r23, 0x00	; 0
    147a:	87 ec       	ldi	r24, 0xC7	; 199
    147c:	94 e0       	ldi	r25, 0x04	; 4
    147e:	0e 94 0a 10 	call	0x2014	; 0x2014 <strcmp>
    1482:	89 2b       	or	r24, r25
    1484:	21 f0       	breq	.+8      	; 0x148e <MQTT_StateMachine+0x1d4>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	03 c0       	rjmp	.+6      	; 0x1490 <MQTT_StateMachine+0x1d6>
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	01 c0       	rjmp	.+2      	; 0x1490 <MQTT_StateMachine+0x1d6>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    148e:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    1490:	88 23       	and	r24, r24
    1492:	09 f4       	brne	.+2      	; 0x1496 <MQTT_StateMachine+0x1dc>
    1494:	b4 c0       	rjmp	.+360    	; 0x15fe <MQTT_StateMachine+0x344>
						{
							MQTT_State = MQTT_WaitForConnectResponce; // Move to next state
    1496:	84 e0       	ldi	r24, 0x04	; 4
    1498:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <MQTT_State>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	c2 c0       	rjmp	.+388    	; 0x1624 <MQTT_StateMachine+0x36a>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    14a0:	83 50       	subi	r24, 0x03	; 3
    14a2:	82 30       	cpi	r24, 0x02	; 2
    14a4:	08 f4       	brcc	.+2      	; 0x14a8 <MQTT_StateMachine+0x1ee>
    14a6:	ad c0       	rjmp	.+346    	; 0x1602 <MQTT_StateMachine+0x348>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	bc c0       	rjmp	.+376    	; 0x1624 <MQTT_StateMachine+0x36a>
				}
			}
			break;
			case MQTT_WaitForConnectResponce:
			{
				MQTTConnectWaittime--;
    14ac:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <MQTTConnectWaittime>
    14b0:	81 50       	subi	r24, 0x01	; 1
    14b2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <MQTTConnectWaittime>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    14b6:	80 e0       	ldi	r24, 0x00	; 0
				if(MQTTConnectWaittime <= 0)
				{
					
				}
			}
			break;
    14b8:	b5 c0       	rjmp	.+362    	; 0x1624 <MQTT_StateMachine+0x36a>
			case MQTT_SubscribeTopic_Config:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    14ba:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <SIMCOM_Job_Result>
    14be:	81 11       	cpse	r24, r1
    14c0:	11 c0       	rjmp	.+34     	; 0x14e4 <MQTT_StateMachine+0x22a>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CMQTTSUBTOPIC=0,16,1", SIMCOM_DEFAULT_TIMEOUT, MQTT_CALLBACK) == TRUE)
    14c2:	2a e5       	ldi	r18, 0x5A	; 90
    14c4:	39 e0       	ldi	r19, 0x09	; 9
    14c6:	40 ed       	ldi	r20, 0xD0	; 208
    14c8:	57 e0       	ldi	r21, 0x07	; 7
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	80 ee       	ldi	r24, 0xE0	; 224
    14d0:	91 e0       	ldi	r25, 0x01	; 1
    14d2:	0e 94 42 05 	call	0xa84	; 0xa84 <SIMCOM_Schedule_Job>
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	09 f0       	breq	.+2      	; 0x14dc <MQTT_StateMachine+0x222>
    14da:	95 c0       	rjmp	.+298    	; 0x1606 <MQTT_StateMachine+0x34c>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    14dc:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <SIMCOM_Job_Result>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	a0 c0       	rjmp	.+320    	; 0x1624 <MQTT_StateMachine+0x36a>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    14e4:	85 30       	cpi	r24, 0x05	; 5
    14e6:	c9 f4       	brne	.+50     	; 0x151a <MQTT_StateMachine+0x260>

static inline BOOL SIMCOM_IsResponse_Entermessage()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 1)
    14e8:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <SIMCOM_ResponseLength>
    14ec:	81 30       	cpi	r24, 0x01	; 1
    14ee:	51 f4       	brne	.+20     	; 0x1504 <MQTT_StateMachine+0x24a>
	{
		if(strcmp(SIMCOM_ResponseBuffer,ENTER_MESSAGE) == 0)
    14f0:	68 ef       	ldi	r22, 0xF8	; 248
    14f2:	71 e0       	ldi	r23, 0x01	; 1
    14f4:	87 ec       	ldi	r24, 0xC7	; 199
    14f6:	94 e0       	ldi	r25, 0x04	; 4
    14f8:	0e 94 0a 10 	call	0x2014	; 0x2014 <strcmp>
    14fc:	89 2b       	or	r24, r25
    14fe:	21 f0       	breq	.+8      	; 0x1508 <MQTT_StateMachine+0x24e>
}


static inline BOOL SIMCOM_IsResponse_Entermessage()
{
	BOOL retval = FALSE;
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	03 c0       	rjmp	.+6      	; 0x150a <MQTT_StateMachine+0x250>
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	01 c0       	rjmp	.+2      	; 0x150a <MQTT_StateMachine+0x250>

	if(SIMCOM_GetResponseLength() == 1)
	{
		if(strcmp(SIMCOM_ResponseBuffer,ENTER_MESSAGE) == 0)
		{
			retval = TRUE;
    1508:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponse_Entermessage())
    150a:	88 23       	and	r24, r24
    150c:	09 f4       	brne	.+2      	; 0x1510 <MQTT_StateMachine+0x256>
    150e:	7d c0       	rjmp	.+250    	; 0x160a <MQTT_StateMachine+0x350>
						{
							MQTT_State = MQTT_SubTopic_Name_Config; // Move to next state
    1510:	86 e0       	ldi	r24, 0x06	; 6
    1512:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <MQTT_State>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	85 c0       	rjmp	.+266    	; 0x1624 <MQTT_StateMachine+0x36a>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    151a:	83 50       	subi	r24, 0x03	; 3
    151c:	82 30       	cpi	r24, 0x02	; 2
    151e:	08 f4       	brcc	.+2      	; 0x1522 <MQTT_StateMachine+0x268>
    1520:	76 c0       	rjmp	.+236    	; 0x160e <MQTT_StateMachine+0x354>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	7f c0       	rjmp	.+254    	; 0x1624 <MQTT_StateMachine+0x36a>
			break;
			
			case MQTT_SubTopic_Name_Config:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1526:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <SIMCOM_Job_Result>
    152a:	81 11       	cpse	r24, r1
    152c:	11 c0       	rjmp	.+34     	; 0x1550 <MQTT_StateMachine+0x296>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job(SUBTOPIC, SIMCOM_DEFAULT_TIMEOUT, MQTT_CALLBACK) == TRUE)
    152e:	2a e5       	ldi	r18, 0x5A	; 90
    1530:	39 e0       	ldi	r19, 0x09	; 9
    1532:	40 ed       	ldi	r20, 0xD0	; 208
    1534:	57 e0       	ldi	r21, 0x07	; 7
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	8a ef       	ldi	r24, 0xFA	; 250
    153c:	91 e0       	ldi	r25, 0x01	; 1
    153e:	0e 94 42 05 	call	0xa84	; 0xa84 <SIMCOM_Schedule_Job>
    1542:	81 30       	cpi	r24, 0x01	; 1
    1544:	09 f0       	breq	.+2      	; 0x1548 <MQTT_StateMachine+0x28e>
    1546:	65 c0       	rjmp	.+202    	; 0x1612 <MQTT_StateMachine+0x358>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1548:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <SIMCOM_Job_Result>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	6a c0       	rjmp	.+212    	; 0x1624 <MQTT_StateMachine+0x36a>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1550:	85 30       	cpi	r24, 0x05	; 5
    1552:	c9 f4       	brne	.+50     	; 0x1586 <MQTT_StateMachine+0x2cc>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    1554:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <SIMCOM_ResponseLength>
    1558:	82 30       	cpi	r24, 0x02	; 2
    155a:	51 f4       	brne	.+20     	; 0x1570 <MQTT_StateMachine+0x2b6>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    155c:	6a ea       	ldi	r22, 0xAA	; 170
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	87 ec       	ldi	r24, 0xC7	; 199
    1562:	94 e0       	ldi	r25, 0x04	; 4
    1564:	0e 94 0a 10 	call	0x2014	; 0x2014 <strcmp>
    1568:	89 2b       	or	r24, r25
    156a:	21 f0       	breq	.+8      	; 0x1574 <MQTT_StateMachine+0x2ba>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	03 c0       	rjmp	.+6      	; 0x1576 <MQTT_StateMachine+0x2bc>
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	01 c0       	rjmp	.+2      	; 0x1576 <MQTT_StateMachine+0x2bc>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    1574:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    1576:	88 23       	and	r24, r24
    1578:	09 f4       	brne	.+2      	; 0x157c <MQTT_StateMachine+0x2c2>
    157a:	4d c0       	rjmp	.+154    	; 0x1616 <MQTT_StateMachine+0x35c>
						{
							MQTT_State = MQTT_SubTopicNameUpdate; // Move to next state
    157c:	87 e0       	ldi	r24, 0x07	; 7
    157e:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <MQTT_State>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	4f c0       	rjmp	.+158    	; 0x1624 <MQTT_StateMachine+0x36a>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1586:	83 50       	subi	r24, 0x03	; 3
    1588:	82 30       	cpi	r24, 0x02	; 2
    158a:	08 f4       	brcc	.+2      	; 0x158e <MQTT_StateMachine+0x2d4>
    158c:	46 c0       	rjmp	.+140    	; 0x161a <MQTT_StateMachine+0x360>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	49 c0       	rjmp	.+146    	; 0x1624 <MQTT_StateMachine+0x36a>
			}
			break;
			case MQTT_SubTopicNameUpdate:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1592:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <SIMCOM_Job_Result>
    1596:	81 11       	cpse	r24, r1
    1598:	10 c0       	rjmp	.+32     	; 0x15ba <MQTT_StateMachine+0x300>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CMQTTSUB=0", SIMCOM_DEFAULT_TIMEOUT, MQTT_CALLBACK) == TRUE)
    159a:	2a e5       	ldi	r18, 0x5A	; 90
    159c:	39 e0       	ldi	r19, 0x09	; 9
    159e:	40 ed       	ldi	r20, 0xD0	; 208
    15a0:	57 e0       	ldi	r21, 0x07	; 7
    15a2:	60 e0       	ldi	r22, 0x00	; 0
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	8b e0       	ldi	r24, 0x0B	; 11
    15a8:	92 e0       	ldi	r25, 0x02	; 2
    15aa:	0e 94 42 05 	call	0xa84	; 0xa84 <SIMCOM_Schedule_Job>
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	b1 f5       	brne	.+108    	; 0x161e <MQTT_StateMachine+0x364>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    15b2:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <SIMCOM_Job_Result>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	35 c0       	rjmp	.+106    	; 0x1624 <MQTT_StateMachine+0x36a>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    15ba:	85 30       	cpi	r24, 0x05	; 5
    15bc:	29 f4       	brne	.+10     	; 0x15c8 <MQTT_StateMachine+0x30e>
					{
						MQTT_State = MQTT_WaitForSubResponce;
    15be:	88 e0       	ldi	r24, 0x08	; 8
    15c0:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <MQTT_State>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	2e c0       	rjmp	.+92     	; 0x1624 <MQTT_StateMachine+0x36a>
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
					{
						MQTT_State = MQTT_WaitForSubResponce;
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    15c8:	83 50       	subi	r24, 0x03	; 3
    15ca:	82 30       	cpi	r24, 0x02	; 2
    15cc:	50 f1       	brcs	.+84     	; 0x1622 <MQTT_StateMachine+0x368>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	29 c0       	rjmp	.+82     	; 0x1624 <MQTT_StateMachine+0x36a>
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	27 c0       	rjmp	.+78     	; 0x1624 <MQTT_StateMachine+0x36a>
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	25 c0       	rjmp	.+74     	; 0x1624 <MQTT_StateMachine+0x36a>
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	23 c0       	rjmp	.+70     	; 0x1624 <MQTT_StateMachine+0x36a>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	21 c0       	rjmp	.+66     	; 0x1624 <MQTT_StateMachine+0x36a>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	1f c0       	rjmp	.+62     	; 0x1624 <MQTT_StateMachine+0x36a>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	1d c0       	rjmp	.+58     	; 0x1624 <MQTT_StateMachine+0x36a>
						
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	1b c0       	rjmp	.+54     	; 0x1624 <MQTT_StateMachine+0x36a>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	19 c0       	rjmp	.+50     	; 0x1624 <MQTT_StateMachine+0x36a>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	17 c0       	rjmp	.+46     	; 0x1624 <MQTT_StateMachine+0x36a>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	15 c0       	rjmp	.+42     	; 0x1624 <MQTT_StateMachine+0x36a>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	13 c0       	rjmp	.+38     	; 0x1624 <MQTT_StateMachine+0x36a>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	11 c0       	rjmp	.+34     	; 0x1624 <MQTT_StateMachine+0x36a>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	0f c0       	rjmp	.+30     	; 0x1624 <MQTT_StateMachine+0x36a>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	0d c0       	rjmp	.+26     	; 0x1624 <MQTT_StateMachine+0x36a>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	0b c0       	rjmp	.+22     	; 0x1624 <MQTT_StateMachine+0x36a>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	09 c0       	rjmp	.+18     	; 0x1624 <MQTT_StateMachine+0x36a>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	07 c0       	rjmp	.+14     	; 0x1624 <MQTT_StateMachine+0x36a>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	05 c0       	rjmp	.+10     	; 0x1624 <MQTT_StateMachine+0x36a>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	03 c0       	rjmp	.+6      	; 0x1624 <MQTT_StateMachine+0x36a>

void MQTT_StateMachine(void)
{
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;

	BOOL RetryInNextCycle = FALSE;
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	01 c0       	rjmp	.+2      	; 0x1624 <MQTT_StateMachine+0x36a>
						MQTT_State = MQTT_WaitForSubResponce;
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    1622:	81 e0       	ldi	r24, 0x01	; 1
				// Do Nothing, The state machine has been completed
			}
			break;
		}

		if(RetryInNextCycle == TRUE)
    1624:	81 30       	cpi	r24, 0x01	; 1
    1626:	69 f4       	brne	.+26     	; 0x1642 <MQTT_StateMachine+0x388>
		{
			// If Retry is allowed
			if(MQTT_Retry_Count != 0)
    1628:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <MQTT_Retry_Count>
    162c:	88 23       	and	r24, r24
    162e:	31 f0       	breq	.+12     	; 0x163c <MQTT_StateMachine+0x382>
			{
				MQTT_Retry_Count--; // Decrement the Retry Count
    1630:	81 50       	subi	r24, 0x01	; 1
    1632:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <MQTT_Retry_Count>

				SIMCOM_Job_Result = SIMCOM_Job_Idle; // Setting the Job to Idle will retry the Job again in next cycle.
    1636:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <SIMCOM_Job_Result>
    163a:	03 c0       	rjmp	.+6      	; 0x1642 <MQTT_StateMachine+0x388>
			}
			else
			{
				// RETRY Mechanism expired, abort the Job and do not move the state
				SIMCOM_Job_Result = SIMCOM_Job_Aborted;
    163c:	86 e0       	ldi	r24, 0x06	; 6
    163e:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <SIMCOM_Job_Result>

			//SIMCOM_ERROR_CALLBACK(SIMCOM_Error_GPRS);
		}

		/* Check if the state changed after execution */
		if(MQTT_State_Before_Execution != MQTT_State)
    1642:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <MQTT_State>
    1646:	c8 17       	cp	r28, r24
    1648:	29 f0       	breq	.+10     	; 0x1654 <MQTT_StateMachine+0x39a>
		{
			// If changed, the Set the New Job Result as Idle for the next state to proceed further
			SIMCOM_Job_Result = SIMCOM_Job_Idle; // Reset the Job state so that next command will be sent
    164a:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <SIMCOM_Job_Result>

			MQTT_Retry_Count = P_SIMCOM_DEFAULT_FAILURE_RETRY_COUNT; // Reset the Retry Count
    164e:	8a e0       	ldi	r24, 0x0A	; 10
    1650:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <MQTT_Retry_Count>
		}
	}
}
    1654:	cf 91       	pop	r28
    1656:	08 95       	ret

00001658 <MQTT_Publish_CallBack>:
static void MQTT_Publish_CallBack(SIMCOM_Job_Result_EN result)
{
	// This function will be called by the SIMCOM handler upon successful reception of the response

	// This will be read in the Main function, so simply set the value
	SIMCOM_Job_Result = result;
    1658:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <SIMCOM_Job_Result>
    165c:	08 95       	ret

0000165e <MQTT_Publish_StateMachine>:
/* Function Definitions                  */
/*****************************************/


void MQTT_Publish_StateMachine(void)
{
    165e:	ef 92       	push	r14
    1660:	ff 92       	push	r15
    1662:	1f 93       	push	r17
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	64 97       	sbiw	r28, 0x14	; 20
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	f8 94       	cli
    1672:	de bf       	out	0x3e, r29	; 62
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	cd bf       	out	0x3d, r28	; 61
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;
    1678:	10 91 49 03 	lds	r17, 0x0349	; 0x800349 <Publish_State>

	BOOL RetryInNextCycle = FALSE;

	if(IsMQTT_Ready())
    167c:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <MQTT_State>
    1680:	89 30       	cpi	r24, 0x09	; 9
    1682:	09 f0       	breq	.+2      	; 0x1686 <MQTT_Publish_StateMachine+0x28>
    1684:	43 c1       	rjmp	.+646    	; 0x190c <MQTT_Publish_StateMachine+0x2ae>
	{
		switch(Publish_State)
    1686:	13 30       	cpi	r17, 0x03	; 3
    1688:	09 f4       	brne	.+2      	; 0x168c <MQTT_Publish_StateMachine+0x2e>
    168a:	8c c0       	rjmp	.+280    	; 0x17a4 <MQTT_Publish_StateMachine+0x146>
    168c:	30 f4       	brcc	.+12     	; 0x169a <MQTT_Publish_StateMachine+0x3c>
    168e:	11 30       	cpi	r17, 0x01	; 1
    1690:	59 f0       	breq	.+22     	; 0x16a8 <MQTT_Publish_StateMachine+0x4a>
    1692:	12 30       	cpi	r17, 0x02	; 2
    1694:	09 f4       	brne	.+2      	; 0x1698 <MQTT_Publish_StateMachine+0x3a>
    1696:	50 c0       	rjmp	.+160    	; 0x1738 <MQTT_Publish_StateMachine+0xda>
    1698:	06 c1       	rjmp	.+524    	; 0x18a6 <MQTT_Publish_StateMachine+0x248>
    169a:	14 30       	cpi	r17, 0x04	; 4
    169c:	09 f4       	brne	.+2      	; 0x16a0 <MQTT_Publish_StateMachine+0x42>
    169e:	b3 c0       	rjmp	.+358    	; 0x1806 <MQTT_Publish_StateMachine+0x1a8>
    16a0:	15 30       	cpi	r17, 0x05	; 5
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <MQTT_Publish_StateMachine+0x48>
    16a4:	e0 c0       	rjmp	.+448    	; 0x1866 <MQTT_Publish_StateMachine+0x208>
    16a6:	ff c0       	rjmp	.+510    	; 0x18a6 <MQTT_Publish_StateMachine+0x248>
			}
			break;
			case MQTT_PublishTopic_Config:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    16a8:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <SIMCOM_Job_Result>
    16ac:	81 11       	cpse	r24, r1
    16ae:	23 c0       	rjmp	.+70     	; 0x16f6 <MQTT_Publish_StateMachine+0x98>
				{
					//Set topic Length by using Macro The size of the Topic is Configured in PUBTOPICLength Macro
					char SetTopicLength[20];
					
					sprintf(SetTopicLength,"AT+CMQTTTOPIC=0,%d",PUBTOPICLength);
    16b0:	1f 92       	push	r1
    16b2:	80 e1       	ldi	r24, 0x10	; 16
    16b4:	8f 93       	push	r24
    16b6:	89 e1       	ldi	r24, 0x19	; 25
    16b8:	92 e0       	ldi	r25, 0x02	; 2
    16ba:	9f 93       	push	r25
    16bc:	8f 93       	push	r24
    16be:	ce 01       	movw	r24, r28
    16c0:	01 96       	adiw	r24, 0x01	; 1
    16c2:	7c 01       	movw	r14, r24
    16c4:	9f 93       	push	r25
    16c6:	8f 93       	push	r24
    16c8:	0e 94 3c 10 	call	0x2078	; 0x2078 <sprintf>
					
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job(SetTopicLength, SIMCOM_DEFAULT_TIMEOUT, MQTT_Publish_CallBack) == TRUE)
    16cc:	2c e2       	ldi	r18, 0x2C	; 44
    16ce:	3b e0       	ldi	r19, 0x0B	; 11
    16d0:	40 ed       	ldi	r20, 0xD0	; 208
    16d2:	57 e0       	ldi	r21, 0x07	; 7
    16d4:	60 e0       	ldi	r22, 0x00	; 0
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	c7 01       	movw	r24, r14
    16da:	0e 94 42 05 	call	0xa84	; 0xa84 <SIMCOM_Schedule_Job>
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	11 f4       	brne	.+4      	; 0x16f2 <MQTT_Publish_StateMachine+0x94>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    16ee:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <SIMCOM_Job_Result>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	f3 c0       	rjmp	.+486    	; 0x18dc <MQTT_Publish_StateMachine+0x27e>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    16f6:	85 30       	cpi	r24, 0x05	; 5
    16f8:	c9 f4       	brne	.+50     	; 0x172c <MQTT_Publish_StateMachine+0xce>

static inline BOOL SIMCOM_IsResponse_Entermessage()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 1)
    16fa:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <SIMCOM_ResponseLength>
    16fe:	81 30       	cpi	r24, 0x01	; 1
    1700:	51 f4       	brne	.+20     	; 0x1716 <MQTT_Publish_StateMachine+0xb8>
	{
		if(strcmp(SIMCOM_ResponseBuffer,ENTER_MESSAGE) == 0)
    1702:	68 ef       	ldi	r22, 0xF8	; 248
    1704:	71 e0       	ldi	r23, 0x01	; 1
    1706:	87 ec       	ldi	r24, 0xC7	; 199
    1708:	94 e0       	ldi	r25, 0x04	; 4
    170a:	0e 94 0a 10 	call	0x2014	; 0x2014 <strcmp>
    170e:	89 2b       	or	r24, r25
    1710:	21 f0       	breq	.+8      	; 0x171a <MQTT_Publish_StateMachine+0xbc>
}


static inline BOOL SIMCOM_IsResponse_Entermessage()
{
	BOOL retval = FALSE;
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	03 c0       	rjmp	.+6      	; 0x171c <MQTT_Publish_StateMachine+0xbe>
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	01 c0       	rjmp	.+2      	; 0x171c <MQTT_Publish_StateMachine+0xbe>

	if(SIMCOM_GetResponseLength() == 1)
	{
		if(strcmp(SIMCOM_ResponseBuffer,ENTER_MESSAGE) == 0)
		{
			retval = TRUE;
    171a:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponse_Entermessage())
    171c:	88 23       	and	r24, r24
    171e:	09 f4       	brne	.+2      	; 0x1722 <MQTT_Publish_StateMachine+0xc4>
    1720:	c4 c0       	rjmp	.+392    	; 0x18aa <MQTT_Publish_StateMachine+0x24c>
						{
							Publish_State = MQTT_PubTopic_Name_Config; // Move to next state
    1722:	82 e0       	ldi	r24, 0x02	; 2
    1724:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <Publish_State>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	d8 c0       	rjmp	.+432    	; 0x18dc <MQTT_Publish_StateMachine+0x27e>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    172c:	83 50       	subi	r24, 0x03	; 3
    172e:	82 30       	cpi	r24, 0x02	; 2
    1730:	08 f4       	brcc	.+2      	; 0x1734 <MQTT_Publish_StateMachine+0xd6>
    1732:	bd c0       	rjmp	.+378    	; 0x18ae <MQTT_Publish_StateMachine+0x250>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	d2 c0       	rjmp	.+420    	; 0x18dc <MQTT_Publish_StateMachine+0x27e>
			break;

			case MQTT_PubTopic_Name_Config:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1738:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <SIMCOM_Job_Result>
    173c:	81 11       	cpse	r24, r1
    173e:	11 c0       	rjmp	.+34     	; 0x1762 <MQTT_Publish_StateMachine+0x104>
				{
					// Send AT Command and wait for response
						
					if(SIMCOM_Schedule_Job(PUBTOPIC, SIMCOM_DEFAULT_TIMEOUT, MQTT_Publish_CallBack) == TRUE)
    1740:	2c e2       	ldi	r18, 0x2C	; 44
    1742:	3b e0       	ldi	r19, 0x0B	; 11
    1744:	40 ed       	ldi	r20, 0xD0	; 208
    1746:	57 e0       	ldi	r21, 0x07	; 7
    1748:	60 e0       	ldi	r22, 0x00	; 0
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	8c e2       	ldi	r24, 0x2C	; 44
    174e:	92 e0       	ldi	r25, 0x02	; 2
    1750:	0e 94 42 05 	call	0xa84	; 0xa84 <SIMCOM_Schedule_Job>
    1754:	81 30       	cpi	r24, 0x01	; 1
    1756:	09 f0       	breq	.+2      	; 0x175a <MQTT_Publish_StateMachine+0xfc>
    1758:	ac c0       	rjmp	.+344    	; 0x18b2 <MQTT_Publish_StateMachine+0x254>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    175a:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <SIMCOM_Job_Result>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	bd c0       	rjmp	.+378    	; 0x18dc <MQTT_Publish_StateMachine+0x27e>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1762:	85 30       	cpi	r24, 0x05	; 5
    1764:	c9 f4       	brne	.+50     	; 0x1798 <MQTT_Publish_StateMachine+0x13a>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    1766:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <SIMCOM_ResponseLength>
    176a:	82 30       	cpi	r24, 0x02	; 2
    176c:	51 f4       	brne	.+20     	; 0x1782 <MQTT_Publish_StateMachine+0x124>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    176e:	6a ea       	ldi	r22, 0xAA	; 170
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	87 ec       	ldi	r24, 0xC7	; 199
    1774:	94 e0       	ldi	r25, 0x04	; 4
    1776:	0e 94 0a 10 	call	0x2014	; 0x2014 <strcmp>
    177a:	89 2b       	or	r24, r25
    177c:	21 f0       	breq	.+8      	; 0x1786 <MQTT_Publish_StateMachine+0x128>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	03 c0       	rjmp	.+6      	; 0x1788 <MQTT_Publish_StateMachine+0x12a>
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	01 c0       	rjmp	.+2      	; 0x1788 <MQTT_Publish_StateMachine+0x12a>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    1786:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    1788:	88 23       	and	r24, r24
    178a:	09 f4       	brne	.+2      	; 0x178e <MQTT_Publish_StateMachine+0x130>
    178c:	94 c0       	rjmp	.+296    	; 0x18b6 <MQTT_Publish_StateMachine+0x258>
						{
							Publish_State = MQTT_UpdatePayloadLength; // Move to next state
    178e:	83 e0       	ldi	r24, 0x03	; 3
    1790:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <Publish_State>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	a2 c0       	rjmp	.+324    	; 0x18dc <MQTT_Publish_StateMachine+0x27e>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1798:	83 50       	subi	r24, 0x03	; 3
    179a:	82 30       	cpi	r24, 0x02	; 2
    179c:	08 f4       	brcc	.+2      	; 0x17a0 <MQTT_Publish_StateMachine+0x142>
    179e:	8d c0       	rjmp	.+282    	; 0x18ba <MQTT_Publish_StateMachine+0x25c>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	9c c0       	rjmp	.+312    	; 0x18dc <MQTT_Publish_StateMachine+0x27e>
			}
			break;
			case MQTT_UpdatePayloadLength:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    17a4:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <SIMCOM_Job_Result>
    17a8:	81 11       	cpse	r24, r1
    17aa:	11 c0       	rjmp	.+34     	; 0x17ce <MQTT_Publish_StateMachine+0x170>
				{
					/*Set Payload length For The Publish Msg, Now its sets statically if we need dynamic change in Payload we have to update the Length*/ 
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CMQTTPAYLOAD=0,25", SIMCOM_DEFAULT_TIMEOUT, MQTT_Publish_CallBack) == TRUE)
    17ac:	2c e2       	ldi	r18, 0x2C	; 44
    17ae:	3b e0       	ldi	r19, 0x0B	; 11
    17b0:	40 ed       	ldi	r20, 0xD0	; 208
    17b2:	57 e0       	ldi	r21, 0x07	; 7
    17b4:	60 e0       	ldi	r22, 0x00	; 0
    17b6:	70 e0       	ldi	r23, 0x00	; 0
    17b8:	8d e3       	ldi	r24, 0x3D	; 61
    17ba:	92 e0       	ldi	r25, 0x02	; 2
    17bc:	0e 94 42 05 	call	0xa84	; 0xa84 <SIMCOM_Schedule_Job>
    17c0:	81 30       	cpi	r24, 0x01	; 1
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <MQTT_Publish_StateMachine+0x168>
    17c4:	7c c0       	rjmp	.+248    	; 0x18be <MQTT_Publish_StateMachine+0x260>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    17c6:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <SIMCOM_Job_Result>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	87 c0       	rjmp	.+270    	; 0x18dc <MQTT_Publish_StateMachine+0x27e>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    17ce:	85 30       	cpi	r24, 0x05	; 5
    17d0:	09 f0       	breq	.+2      	; 0x17d4 <MQTT_Publish_StateMachine+0x176>
    17d2:	77 c0       	rjmp	.+238    	; 0x18c2 <MQTT_Publish_StateMachine+0x264>

static inline BOOL SIMCOM_IsResponse_Entermessage()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 1)
    17d4:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <SIMCOM_ResponseLength>
    17d8:	81 30       	cpi	r24, 0x01	; 1
    17da:	51 f4       	brne	.+20     	; 0x17f0 <MQTT_Publish_StateMachine+0x192>
	{
		if(strcmp(SIMCOM_ResponseBuffer,ENTER_MESSAGE) == 0)
    17dc:	68 ef       	ldi	r22, 0xF8	; 248
    17de:	71 e0       	ldi	r23, 0x01	; 1
    17e0:	87 ec       	ldi	r24, 0xC7	; 199
    17e2:	94 e0       	ldi	r25, 0x04	; 4
    17e4:	0e 94 0a 10 	call	0x2014	; 0x2014 <strcmp>
    17e8:	89 2b       	or	r24, r25
    17ea:	21 f0       	breq	.+8      	; 0x17f4 <MQTT_Publish_StateMachine+0x196>
}


static inline BOOL SIMCOM_IsResponse_Entermessage()
{
	BOOL retval = FALSE;
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	03 c0       	rjmp	.+6      	; 0x17f6 <MQTT_Publish_StateMachine+0x198>
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	01 c0       	rjmp	.+2      	; 0x17f6 <MQTT_Publish_StateMachine+0x198>

	if(SIMCOM_GetResponseLength() == 1)
	{
		if(strcmp(SIMCOM_ResponseBuffer,ENTER_MESSAGE) == 0)
		{
			retval = TRUE;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed
						// Check if the response is OK or not.
						if(SIMCOM_IsResponse_Entermessage())
    17f6:	88 23       	and	r24, r24
    17f8:	09 f4       	brne	.+2      	; 0x17fc <MQTT_Publish_StateMachine+0x19e>
    17fa:	65 c0       	rjmp	.+202    	; 0x18c6 <MQTT_Publish_StateMachine+0x268>
						{
							Publish_State = MQTT_Update_PubDataforTopic; // Move to next state
    17fc:	84 e0       	ldi	r24, 0x04	; 4
    17fe:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <Publish_State>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	6b c0       	rjmp	.+214    	; 0x18dc <MQTT_Publish_StateMachine+0x27e>
			break;
				
			case MQTT_Update_PubDataforTopic:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1806:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <SIMCOM_Job_Result>
    180a:	81 11       	cpse	r24, r1
    180c:	11 c0       	rjmp	.+34     	; 0x1830 <MQTT_Publish_StateMachine+0x1d2>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job(PublishPayload, SIMCOM_DEFAULT_TIMEOUT, MQTT_Publish_CallBack) == TRUE)
    180e:	2c e2       	ldi	r18, 0x2C	; 44
    1810:	3b e0       	ldi	r19, 0x0B	; 11
    1812:	40 ed       	ldi	r20, 0xD0	; 208
    1814:	57 e0       	ldi	r21, 0x07	; 7
    1816:	60 e0       	ldi	r22, 0x00	; 0
    1818:	70 e0       	ldi	r23, 0x00	; 0
    181a:	84 e3       	ldi	r24, 0x34	; 52
    181c:	95 e0       	ldi	r25, 0x05	; 5
    181e:	0e 94 42 05 	call	0xa84	; 0xa84 <SIMCOM_Schedule_Job>
    1822:	81 30       	cpi	r24, 0x01	; 1
    1824:	09 f0       	breq	.+2      	; 0x1828 <MQTT_Publish_StateMachine+0x1ca>
    1826:	51 c0       	rjmp	.+162    	; 0x18ca <MQTT_Publish_StateMachine+0x26c>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1828:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <SIMCOM_Job_Result>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	56 c0       	rjmp	.+172    	; 0x18dc <MQTT_Publish_StateMachine+0x27e>
				}
				else
				{
						
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1830:	85 30       	cpi	r24, 0x05	; 5
    1832:	09 f0       	breq	.+2      	; 0x1836 <MQTT_Publish_StateMachine+0x1d8>
    1834:	4c c0       	rjmp	.+152    	; 0x18ce <MQTT_Publish_StateMachine+0x270>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    1836:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <SIMCOM_ResponseLength>
    183a:	82 30       	cpi	r24, 0x02	; 2
    183c:	51 f4       	brne	.+20     	; 0x1852 <MQTT_Publish_StateMachine+0x1f4>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    183e:	6a ea       	ldi	r22, 0xAA	; 170
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	87 ec       	ldi	r24, 0xC7	; 199
    1844:	94 e0       	ldi	r25, 0x04	; 4
    1846:	0e 94 0a 10 	call	0x2014	; 0x2014 <strcmp>
    184a:	89 2b       	or	r24, r25
    184c:	21 f0       	breq	.+8      	; 0x1856 <MQTT_Publish_StateMachine+0x1f8>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	03 c0       	rjmp	.+6      	; 0x1858 <MQTT_Publish_StateMachine+0x1fa>
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	01 c0       	rjmp	.+2      	; 0x1858 <MQTT_Publish_StateMachine+0x1fa>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    1856:	81 e0       	ldi	r24, 0x01	; 1
					{
						if (SIMCOM_IsResponseOK())
    1858:	88 23       	and	r24, r24
    185a:	d9 f1       	breq	.+118    	; 0x18d2 <MQTT_Publish_StateMachine+0x274>
						{
							Publish_State = MQTT_Publish_Msg; // Move to next state
    185c:	85 e0       	ldi	r24, 0x05	; 5
    185e:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <Publish_State>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	3b c0       	rjmp	.+118    	; 0x18dc <MQTT_Publish_StateMachine+0x27e>
			}
			break;
			case MQTT_Publish_Msg:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1866:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <SIMCOM_Job_Result>
    186a:	81 11       	cpse	r24, r1
    186c:	10 c0       	rjmp	.+32     	; 0x188e <MQTT_Publish_StateMachine+0x230>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CMQTTPUB=0,1,60", SIMCOM_DEFAULT_TIMEOUT, MQTT_Publish_CallBack) == TRUE)
    186e:	2c e2       	ldi	r18, 0x2C	; 44
    1870:	3b e0       	ldi	r19, 0x0B	; 11
    1872:	40 ed       	ldi	r20, 0xD0	; 208
    1874:	57 e0       	ldi	r21, 0x07	; 7
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	70 e0       	ldi	r23, 0x00	; 0
    187a:	82 e5       	ldi	r24, 0x52	; 82
    187c:	92 e0       	ldi	r25, 0x02	; 2
    187e:	0e 94 42 05 	call	0xa84	; 0xa84 <SIMCOM_Schedule_Job>
    1882:	81 30       	cpi	r24, 0x01	; 1
    1884:	41 f5       	brne	.+80     	; 0x18d6 <MQTT_Publish_StateMachine+0x278>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1886:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <SIMCOM_Job_Result>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	27 c0       	rjmp	.+78     	; 0x18dc <MQTT_Publish_StateMachine+0x27e>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    188e:	85 30       	cpi	r24, 0x05	; 5
    1890:	29 f4       	brne	.+10     	; 0x189c <MQTT_Publish_StateMachine+0x23e>
					{
						Publish_State = MQTTWaitforPublishResponse;
    1892:	86 e0       	ldi	r24, 0x06	; 6
    1894:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <Publish_State>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	20 c0       	rjmp	.+64     	; 0x18dc <MQTT_Publish_StateMachine+0x27e>
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
					{
						Publish_State = MQTTWaitforPublishResponse;
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    189c:	83 50       	subi	r24, 0x03	; 3
    189e:	82 30       	cpi	r24, 0x02	; 2
    18a0:	e0 f0       	brcs	.+56     	; 0x18da <MQTT_Publish_StateMachine+0x27c>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	1b c0       	rjmp	.+54     	; 0x18dc <MQTT_Publish_StateMachine+0x27e>
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	19 c0       	rjmp	.+50     	; 0x18dc <MQTT_Publish_StateMachine+0x27e>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	17 c0       	rjmp	.+46     	; 0x18dc <MQTT_Publish_StateMachine+0x27e>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	15 c0       	rjmp	.+42     	; 0x18dc <MQTT_Publish_StateMachine+0x27e>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	13 c0       	rjmp	.+38     	; 0x18dc <MQTT_Publish_StateMachine+0x27e>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	11 c0       	rjmp	.+34     	; 0x18dc <MQTT_Publish_StateMachine+0x27e>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	0f c0       	rjmp	.+30     	; 0x18dc <MQTT_Publish_StateMachine+0x27e>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	0d c0       	rjmp	.+26     	; 0x18dc <MQTT_Publish_StateMachine+0x27e>
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	0b c0       	rjmp	.+22     	; 0x18dc <MQTT_Publish_StateMachine+0x27e>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	09 c0       	rjmp	.+18     	; 0x18dc <MQTT_Publish_StateMachine+0x27e>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	07 c0       	rjmp	.+14     	; 0x18dc <MQTT_Publish_StateMachine+0x27e>
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	05 c0       	rjmp	.+10     	; 0x18dc <MQTT_Publish_StateMachine+0x27e>
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	03 c0       	rjmp	.+6      	; 0x18dc <MQTT_Publish_StateMachine+0x27e>
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	01 c0       	rjmp	.+2      	; 0x18dc <MQTT_Publish_StateMachine+0x27e>
						Publish_State = MQTTWaitforPublishResponse;
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    18da:	81 e0       	ldi	r24, 0x01	; 1
				// Do Nothing, The state machine has been completed
			}
			break;
		}

		if(RetryInNextCycle == TRUE)
    18dc:	81 30       	cpi	r24, 0x01	; 1
    18de:	69 f4       	brne	.+26     	; 0x18fa <MQTT_Publish_StateMachine+0x29c>
		{
			// If Retry is allowed
			if(MQTT_Publish_Retry_Count != 0)
    18e0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <MQTT_Publish_Retry_Count>
    18e4:	88 23       	and	r24, r24
    18e6:	31 f0       	breq	.+12     	; 0x18f4 <MQTT_Publish_StateMachine+0x296>
			{
				MQTT_Publish_Retry_Count--; // Decrement the Retry Count
    18e8:	81 50       	subi	r24, 0x01	; 1
    18ea:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <MQTT_Publish_Retry_Count>

				SIMCOM_Job_Result = SIMCOM_Job_Idle; // Setting the Job to Idle will retry the Job again in next cycle.
    18ee:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <SIMCOM_Job_Result>
    18f2:	03 c0       	rjmp	.+6      	; 0x18fa <MQTT_Publish_StateMachine+0x29c>
			}
			else
			{
				// RETRY Mechanism expired, abort the Job and do not move the state
				SIMCOM_Job_Result = SIMCOM_Job_Aborted;
    18f4:	86 e0       	ldi	r24, 0x06	; 6
    18f6:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <SIMCOM_Job_Result>

			//SIMCOM_ERROR_CALLBACK(SIMCOM_Error_GPRS);
		}

		/* Check if the state changed after execution */
		if(MQTT_Publish_State_Before_Execution != MQTT_State)
    18fa:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <MQTT_State>
    18fe:	18 17       	cp	r17, r24
    1900:	29 f0       	breq	.+10     	; 0x190c <MQTT_Publish_StateMachine+0x2ae>
		{
			// If changed, the Set the New Job Result as Idle for the next state to proceed further
			SIMCOM_Job_Result = SIMCOM_Job_Idle; // Reset the Job state so that next command will be sent
    1902:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <SIMCOM_Job_Result>

			MQTT_Publish_Retry_Count = 50; // Reset the Retry Count
    1906:	82 e3       	ldi	r24, 0x32	; 50
    1908:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <MQTT_Publish_Retry_Count>
		}
	}
	
    190c:	64 96       	adiw	r28, 0x14	; 20
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	f8 94       	cli
    1912:	de bf       	out	0x3e, r29	; 62
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	cd bf       	out	0x3d, r28	; 61
    1918:	df 91       	pop	r29
    191a:	cf 91       	pop	r28
    191c:	1f 91       	pop	r17
    191e:	ff 90       	pop	r15
    1920:	ef 90       	pop	r14
    1922:	08 95       	ret

00001924 <SIMCOM_SSL_Configration_Callback>:
static void SIMCOM_SSL_Configration_Callback(SIMCOM_Job_Result_EN result)
{
	// This function will be called by the SIMCOM handler upon successful reception of the response

	// This will be read in the Main function, so simply set the value
	SIMCOM_Job_Result = result;
    1924:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <SIMCOM_Job_Result>
    1928:	08 95       	ret

0000192a <SIMCOM_SSL_CONFIG_MainFunction>:
/*****************************************/
/* Function Definitions                  */
/*****************************************/

void SIMCOM_SSL_CONFIG_MainFunction(void)
{
    192a:	cf 93       	push	r28
	if(IsSIMCOM_Module_Ready())
    192c:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <SIMCOM_State>
    1930:	8a 30       	cpi	r24, 0x0A	; 10
    1932:	09 f0       	breq	.+2      	; 0x1936 <SIMCOM_SSL_CONFIG_MainFunction+0xc>
    1934:	5e c1       	rjmp	.+700    	; 0x1bf2 <SIMCOM_SSL_CONFIG_MainFunction+0x2c8>
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;
    1936:	c0 91 6d 00 	lds	r28, 0x006D	; 0x80006d <C_MQTT_SSL_Config_State>

		BOOL RetryInNextCycle = FALSE;

		switch(C_MQTT_SSL_Config_State)
    193a:	c3 30       	cpi	r28, 0x03	; 3
    193c:	09 f4       	brne	.+2      	; 0x1940 <SIMCOM_SSL_CONFIG_MainFunction+0x16>
    193e:	79 c0       	rjmp	.+242    	; 0x1a32 <SIMCOM_SSL_CONFIG_MainFunction+0x108>
    1940:	28 f4       	brcc	.+10     	; 0x194c <SIMCOM_SSL_CONFIG_MainFunction+0x22>
    1942:	c1 30       	cpi	r28, 0x01	; 1
    1944:	51 f0       	breq	.+20     	; 0x195a <SIMCOM_SSL_CONFIG_MainFunction+0x30>
    1946:	c2 30       	cpi	r28, 0x02	; 2
    1948:	f1 f1       	breq	.+124    	; 0x19c6 <SIMCOM_SSL_CONFIG_MainFunction+0x9c>
    194a:	12 c1       	rjmp	.+548    	; 0x1b70 <SIMCOM_SSL_CONFIG_MainFunction+0x246>
    194c:	c4 30       	cpi	r28, 0x04	; 4
    194e:	09 f4       	brne	.+2      	; 0x1952 <SIMCOM_SSL_CONFIG_MainFunction+0x28>
    1950:	a6 c0       	rjmp	.+332    	; 0x1a9e <SIMCOM_SSL_CONFIG_MainFunction+0x174>
    1952:	c5 30       	cpi	r28, 0x05	; 5
    1954:	09 f4       	brne	.+2      	; 0x1958 <SIMCOM_SSL_CONFIG_MainFunction+0x2e>
    1956:	d9 c0       	rjmp	.+434    	; 0x1b0a <SIMCOM_SSL_CONFIG_MainFunction+0x1e0>
    1958:	0b c1       	rjmp	.+534    	; 0x1b70 <SIMCOM_SSL_CONFIG_MainFunction+0x246>
			case C_MQTT_SSL_Init:
			{
				

				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    195a:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <SIMCOM_Job_Result>
    195e:	81 11       	cpse	r24, r1
    1960:	11 c0       	rjmp	.+34     	; 0x1984 <SIMCOM_SSL_CONFIG_MainFunction+0x5a>
				{
					
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CSSLCFG=\"sslversion\",0,4", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_SSL_Configration_Callback) == TRUE)
    1962:	22 e9       	ldi	r18, 0x92	; 146
    1964:	3c e0       	ldi	r19, 0x0C	; 12
    1966:	40 ed       	ldi	r20, 0xD0	; 208
    1968:	57 e0       	ldi	r21, 0x07	; 7
    196a:	60 e0       	ldi	r22, 0x00	; 0
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	85 e6       	ldi	r24, 0x65	; 101
    1970:	92 e0       	ldi	r25, 0x02	; 2
    1972:	0e 94 42 05 	call	0xa84	; 0xa84 <SIMCOM_Schedule_Job>
    1976:	81 30       	cpi	r24, 0x01	; 1
    1978:	09 f0       	breq	.+2      	; 0x197c <SIMCOM_SSL_CONFIG_MainFunction+0x52>
    197a:	fc c0       	rjmp	.+504    	; 0x1b74 <SIMCOM_SSL_CONFIG_MainFunction+0x24a>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    197c:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <SIMCOM_Job_Result>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	15 c1       	rjmp	.+554    	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1984:	85 30       	cpi	r24, 0x05	; 5
    1986:	c9 f4       	brne	.+50     	; 0x19ba <SIMCOM_SSL_CONFIG_MainFunction+0x90>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    1988:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <SIMCOM_ResponseLength>
    198c:	82 30       	cpi	r24, 0x02	; 2
    198e:	51 f4       	brne	.+20     	; 0x19a4 <SIMCOM_SSL_CONFIG_MainFunction+0x7a>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    1990:	6a ea       	ldi	r22, 0xAA	; 170
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	87 ec       	ldi	r24, 0xC7	; 199
    1996:	94 e0       	ldi	r25, 0x04	; 4
    1998:	0e 94 0a 10 	call	0x2014	; 0x2014 <strcmp>
    199c:	89 2b       	or	r24, r25
    199e:	21 f0       	breq	.+8      	; 0x19a8 <SIMCOM_SSL_CONFIG_MainFunction+0x7e>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	03 c0       	rjmp	.+6      	; 0x19aa <SIMCOM_SSL_CONFIG_MainFunction+0x80>
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	01 c0       	rjmp	.+2      	; 0x19aa <SIMCOM_SSL_CONFIG_MainFunction+0x80>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    19aa:	88 23       	and	r24, r24
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <SIMCOM_SSL_CONFIG_MainFunction+0x86>
    19ae:	e4 c0       	rjmp	.+456    	; 0x1b78 <SIMCOM_SSL_CONFIG_MainFunction+0x24e>
						{

							C_MQTT_SSL_Config_State = C_MQTT_SSL_Authentication; // Move to next state
    19b0:	82 e0       	ldi	r24, 0x02	; 2
    19b2:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <C_MQTT_SSL_Config_State>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	fa c0       	rjmp	.+500    	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    19ba:	83 50       	subi	r24, 0x03	; 3
    19bc:	82 30       	cpi	r24, 0x02	; 2
    19be:	08 f4       	brcc	.+2      	; 0x19c2 <SIMCOM_SSL_CONFIG_MainFunction+0x98>
    19c0:	dd c0       	rjmp	.+442    	; 0x1b7c <SIMCOM_SSL_CONFIG_MainFunction+0x252>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	f4 c0       	rjmp	.+488    	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>
			break;
			
			case C_MQTT_SSL_Authentication:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    19c6:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <SIMCOM_Job_Result>
    19ca:	81 11       	cpse	r24, r1
    19cc:	11 c0       	rjmp	.+34     	; 0x19f0 <SIMCOM_SSL_CONFIG_MainFunction+0xc6>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CSSLCFG=\"authmode\",0,2", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_SSL_Configration_Callback) == TRUE)
    19ce:	22 e9       	ldi	r18, 0x92	; 146
    19d0:	3c e0       	ldi	r19, 0x0C	; 12
    19d2:	40 ed       	ldi	r20, 0xD0	; 208
    19d4:	57 e0       	ldi	r21, 0x07	; 7
    19d6:	60 e0       	ldi	r22, 0x00	; 0
    19d8:	70 e0       	ldi	r23, 0x00	; 0
    19da:	81 e8       	ldi	r24, 0x81	; 129
    19dc:	92 e0       	ldi	r25, 0x02	; 2
    19de:	0e 94 42 05 	call	0xa84	; 0xa84 <SIMCOM_Schedule_Job>
    19e2:	81 30       	cpi	r24, 0x01	; 1
    19e4:	09 f0       	breq	.+2      	; 0x19e8 <SIMCOM_SSL_CONFIG_MainFunction+0xbe>
    19e6:	cc c0       	rjmp	.+408    	; 0x1b80 <SIMCOM_SSL_CONFIG_MainFunction+0x256>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    19e8:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <SIMCOM_Job_Result>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	df c0       	rjmp	.+446    	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    19f0:	85 30       	cpi	r24, 0x05	; 5
    19f2:	c9 f4       	brne	.+50     	; 0x1a26 <SIMCOM_SSL_CONFIG_MainFunction+0xfc>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    19f4:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <SIMCOM_ResponseLength>
    19f8:	82 30       	cpi	r24, 0x02	; 2
    19fa:	51 f4       	brne	.+20     	; 0x1a10 <SIMCOM_SSL_CONFIG_MainFunction+0xe6>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    19fc:	6a ea       	ldi	r22, 0xAA	; 170
    19fe:	70 e0       	ldi	r23, 0x00	; 0
    1a00:	87 ec       	ldi	r24, 0xC7	; 199
    1a02:	94 e0       	ldi	r25, 0x04	; 4
    1a04:	0e 94 0a 10 	call	0x2014	; 0x2014 <strcmp>
    1a08:	89 2b       	or	r24, r25
    1a0a:	21 f0       	breq	.+8      	; 0x1a14 <SIMCOM_SSL_CONFIG_MainFunction+0xea>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	03 c0       	rjmp	.+6      	; 0x1a16 <SIMCOM_SSL_CONFIG_MainFunction+0xec>
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	01 c0       	rjmp	.+2      	; 0x1a16 <SIMCOM_SSL_CONFIG_MainFunction+0xec>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    1a14:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    1a16:	88 23       	and	r24, r24
    1a18:	09 f4       	brne	.+2      	; 0x1a1c <SIMCOM_SSL_CONFIG_MainFunction+0xf2>
    1a1a:	b4 c0       	rjmp	.+360    	; 0x1b84 <SIMCOM_SSL_CONFIG_MainFunction+0x25a>
						{
							C_MQTT_SSL_Config_State = C_MQTT_SSL_CaCert_Configuration; // Move to next state
    1a1c:	83 e0       	ldi	r24, 0x03	; 3
    1a1e:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <C_MQTT_SSL_Config_State>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	c4 c0       	rjmp	.+392    	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1a26:	83 50       	subi	r24, 0x03	; 3
    1a28:	82 30       	cpi	r24, 0x02	; 2
    1a2a:	08 f4       	brcc	.+2      	; 0x1a2e <SIMCOM_SSL_CONFIG_MainFunction+0x104>
    1a2c:	ad c0       	rjmp	.+346    	; 0x1b88 <SIMCOM_SSL_CONFIG_MainFunction+0x25e>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	be c0       	rjmp	.+380    	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>


			case C_MQTT_SSL_CaCert_Configuration:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1a32:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <SIMCOM_Job_Result>
    1a36:	81 11       	cpse	r24, r1
    1a38:	11 c0       	rjmp	.+34     	; 0x1a5c <SIMCOM_SSL_CONFIG_MainFunction+0x132>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CSSLCFG=\"cacert\",0,\"cacert.pem\"", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_SSL_Configration_Callback) == TRUE)
    1a3a:	22 e9       	ldi	r18, 0x92	; 146
    1a3c:	3c e0       	ldi	r19, 0x0C	; 12
    1a3e:	40 ed       	ldi	r20, 0xD0	; 208
    1a40:	57 e0       	ldi	r21, 0x07	; 7
    1a42:	60 e0       	ldi	r22, 0x00	; 0
    1a44:	70 e0       	ldi	r23, 0x00	; 0
    1a46:	8b e9       	ldi	r24, 0x9B	; 155
    1a48:	92 e0       	ldi	r25, 0x02	; 2
    1a4a:	0e 94 42 05 	call	0xa84	; 0xa84 <SIMCOM_Schedule_Job>
    1a4e:	81 30       	cpi	r24, 0x01	; 1
    1a50:	09 f0       	breq	.+2      	; 0x1a54 <SIMCOM_SSL_CONFIG_MainFunction+0x12a>
    1a52:	9c c0       	rjmp	.+312    	; 0x1b8c <SIMCOM_SSL_CONFIG_MainFunction+0x262>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1a54:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <SIMCOM_Job_Result>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	a9 c0       	rjmp	.+338    	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1a5c:	85 30       	cpi	r24, 0x05	; 5
    1a5e:	c9 f4       	brne	.+50     	; 0x1a92 <SIMCOM_SSL_CONFIG_MainFunction+0x168>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    1a60:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <SIMCOM_ResponseLength>
    1a64:	82 30       	cpi	r24, 0x02	; 2
    1a66:	51 f4       	brne	.+20     	; 0x1a7c <SIMCOM_SSL_CONFIG_MainFunction+0x152>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    1a68:	6a ea       	ldi	r22, 0xAA	; 170
    1a6a:	70 e0       	ldi	r23, 0x00	; 0
    1a6c:	87 ec       	ldi	r24, 0xC7	; 199
    1a6e:	94 e0       	ldi	r25, 0x04	; 4
    1a70:	0e 94 0a 10 	call	0x2014	; 0x2014 <strcmp>
    1a74:	89 2b       	or	r24, r25
    1a76:	21 f0       	breq	.+8      	; 0x1a80 <SIMCOM_SSL_CONFIG_MainFunction+0x156>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	03 c0       	rjmp	.+6      	; 0x1a82 <SIMCOM_SSL_CONFIG_MainFunction+0x158>
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	01 c0       	rjmp	.+2      	; 0x1a82 <SIMCOM_SSL_CONFIG_MainFunction+0x158>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    1a80:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    1a82:	88 23       	and	r24, r24
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <SIMCOM_SSL_CONFIG_MainFunction+0x15e>
    1a86:	84 c0       	rjmp	.+264    	; 0x1b90 <SIMCOM_SSL_CONFIG_MainFunction+0x266>
						{
							C_MQTT_SSL_Config_State = C_MQTT_SSL_Clientcert_Configuration; // Move to next state
    1a88:	84 e0       	ldi	r24, 0x04	; 4
    1a8a:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <C_MQTT_SSL_Config_State>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	8e c0       	rjmp	.+284    	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1a92:	83 50       	subi	r24, 0x03	; 3
    1a94:	82 30       	cpi	r24, 0x02	; 2
    1a96:	08 f4       	brcc	.+2      	; 0x1a9a <SIMCOM_SSL_CONFIG_MainFunction+0x170>
    1a98:	7d c0       	rjmp	.+250    	; 0x1b94 <SIMCOM_SSL_CONFIG_MainFunction+0x26a>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	88 c0       	rjmp	.+272    	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>


			case C_MQTT_SSL_Clientcert_Configuration:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1a9e:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <SIMCOM_Job_Result>
    1aa2:	81 11       	cpse	r24, r1
    1aa4:	11 c0       	rjmp	.+34     	; 0x1ac8 <SIMCOM_SSL_CONFIG_MainFunction+0x19e>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CSSLCFG=\"clientcert\",0,\"clientcert.pem\"", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_SSL_Configration_Callback) == TRUE)
    1aa6:	22 e9       	ldi	r18, 0x92	; 146
    1aa8:	3c e0       	ldi	r19, 0x0C	; 12
    1aaa:	40 ed       	ldi	r20, 0xD0	; 208
    1aac:	57 e0       	ldi	r21, 0x07	; 7
    1aae:	60 e0       	ldi	r22, 0x00	; 0
    1ab0:	70 e0       	ldi	r23, 0x00	; 0
    1ab2:	8e eb       	ldi	r24, 0xBE	; 190
    1ab4:	92 e0       	ldi	r25, 0x02	; 2
    1ab6:	0e 94 42 05 	call	0xa84	; 0xa84 <SIMCOM_Schedule_Job>
    1aba:	81 30       	cpi	r24, 0x01	; 1
    1abc:	09 f0       	breq	.+2      	; 0x1ac0 <SIMCOM_SSL_CONFIG_MainFunction+0x196>
    1abe:	6c c0       	rjmp	.+216    	; 0x1b98 <SIMCOM_SSL_CONFIG_MainFunction+0x26e>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1ac0:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <SIMCOM_Job_Result>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	73 c0       	rjmp	.+230    	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1ac8:	85 30       	cpi	r24, 0x05	; 5
    1aca:	c9 f4       	brne	.+50     	; 0x1afe <SIMCOM_SSL_CONFIG_MainFunction+0x1d4>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    1acc:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <SIMCOM_ResponseLength>
    1ad0:	82 30       	cpi	r24, 0x02	; 2
    1ad2:	51 f4       	brne	.+20     	; 0x1ae8 <SIMCOM_SSL_CONFIG_MainFunction+0x1be>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    1ad4:	6a ea       	ldi	r22, 0xAA	; 170
    1ad6:	70 e0       	ldi	r23, 0x00	; 0
    1ad8:	87 ec       	ldi	r24, 0xC7	; 199
    1ada:	94 e0       	ldi	r25, 0x04	; 4
    1adc:	0e 94 0a 10 	call	0x2014	; 0x2014 <strcmp>
    1ae0:	89 2b       	or	r24, r25
    1ae2:	21 f0       	breq	.+8      	; 0x1aec <SIMCOM_SSL_CONFIG_MainFunction+0x1c2>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	03 c0       	rjmp	.+6      	; 0x1aee <SIMCOM_SSL_CONFIG_MainFunction+0x1c4>
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	01 c0       	rjmp	.+2      	; 0x1aee <SIMCOM_SSL_CONFIG_MainFunction+0x1c4>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    1aec:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    1aee:	88 23       	and	r24, r24
    1af0:	09 f4       	brne	.+2      	; 0x1af4 <SIMCOM_SSL_CONFIG_MainFunction+0x1ca>
    1af2:	54 c0       	rjmp	.+168    	; 0x1b9c <SIMCOM_SSL_CONFIG_MainFunction+0x272>
						{
							C_MQTT_SSL_Config_State = C_MQTT_SSL_Clientkey_Configuration; // Move to next state
    1af4:	85 e0       	ldi	r24, 0x05	; 5
    1af6:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <C_MQTT_SSL_Config_State>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	58 c0       	rjmp	.+176    	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1afe:	83 50       	subi	r24, 0x03	; 3
    1b00:	82 30       	cpi	r24, 0x02	; 2
    1b02:	08 f4       	brcc	.+2      	; 0x1b06 <SIMCOM_SSL_CONFIG_MainFunction+0x1dc>
    1b04:	4d c0       	rjmp	.+154    	; 0x1ba0 <SIMCOM_SSL_CONFIG_MainFunction+0x276>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	52 c0       	rjmp	.+164    	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>


			case C_MQTT_SSL_Clientkey_Configuration:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1b0a:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <SIMCOM_Job_Result>
    1b0e:	81 11       	cpse	r24, r1
    1b10:	10 c0       	rjmp	.+32     	; 0x1b32 <SIMCOM_SSL_CONFIG_MainFunction+0x208>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CSSLCFG=\"clientkey\",0,\"clientkey.pem\"", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_SSL_Configration_Callback) == TRUE)
    1b12:	22 e9       	ldi	r18, 0x92	; 146
    1b14:	3c e0       	ldi	r19, 0x0C	; 12
    1b16:	40 ed       	ldi	r20, 0xD0	; 208
    1b18:	57 e0       	ldi	r21, 0x07	; 7
    1b1a:	60 e0       	ldi	r22, 0x00	; 0
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	89 ee       	ldi	r24, 0xE9	; 233
    1b20:	92 e0       	ldi	r25, 0x02	; 2
    1b22:	0e 94 42 05 	call	0xa84	; 0xa84 <SIMCOM_Schedule_Job>
    1b26:	81 30       	cpi	r24, 0x01	; 1
    1b28:	e9 f5       	brne	.+122    	; 0x1ba4 <SIMCOM_SSL_CONFIG_MainFunction+0x27a>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1b2a:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <SIMCOM_Job_Result>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	3e c0       	rjmp	.+124    	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1b32:	85 30       	cpi	r24, 0x05	; 5
    1b34:	c1 f4       	brne	.+48     	; 0x1b66 <SIMCOM_SSL_CONFIG_MainFunction+0x23c>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    1b36:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <SIMCOM_ResponseLength>
    1b3a:	82 30       	cpi	r24, 0x02	; 2
    1b3c:	51 f4       	brne	.+20     	; 0x1b52 <SIMCOM_SSL_CONFIG_MainFunction+0x228>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    1b3e:	6a ea       	ldi	r22, 0xAA	; 170
    1b40:	70 e0       	ldi	r23, 0x00	; 0
    1b42:	87 ec       	ldi	r24, 0xC7	; 199
    1b44:	94 e0       	ldi	r25, 0x04	; 4
    1b46:	0e 94 0a 10 	call	0x2014	; 0x2014 <strcmp>
    1b4a:	89 2b       	or	r24, r25
    1b4c:	21 f0       	breq	.+8      	; 0x1b56 <SIMCOM_SSL_CONFIG_MainFunction+0x22c>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	03 c0       	rjmp	.+6      	; 0x1b58 <SIMCOM_SSL_CONFIG_MainFunction+0x22e>
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	01 c0       	rjmp	.+2      	; 0x1b58 <SIMCOM_SSL_CONFIG_MainFunction+0x22e>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    1b56:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    1b58:	88 23       	and	r24, r24
    1b5a:	31 f1       	breq	.+76     	; 0x1ba8 <SIMCOM_SSL_CONFIG_MainFunction+0x27e>
						{
							C_MQTT_SSL_Config_State = C_MQTT_SSL_Configured; // Move to next state
    1b5c:	86 e0       	ldi	r24, 0x06	; 6
    1b5e:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <C_MQTT_SSL_Config_State>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	24 c0       	rjmp	.+72     	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1b66:	83 50       	subi	r24, 0x03	; 3
    1b68:	82 30       	cpi	r24, 0x02	; 2
    1b6a:	00 f1       	brcs	.+64     	; 0x1bac <SIMCOM_SSL_CONFIG_MainFunction+0x282>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	1f c0       	rjmp	.+62     	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	1d c0       	rjmp	.+58     	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	1b c0       	rjmp	.+54     	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	19 c0       	rjmp	.+50     	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	17 c0       	rjmp	.+46     	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	15 c0       	rjmp	.+42     	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	13 c0       	rjmp	.+38     	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	11 c0       	rjmp	.+34     	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	0f c0       	rjmp	.+30     	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	0d c0       	rjmp	.+26     	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	0b c0       	rjmp	.+22     	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	09 c0       	rjmp	.+18     	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	07 c0       	rjmp	.+14     	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	05 c0       	rjmp	.+10     	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	03 c0       	rjmp	.+6      	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	01 c0       	rjmp	.+2      	; 0x1bae <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    1bac:	81 e0       	ldi	r24, 0x01	; 1
				// Do Nothing, The state machine has been completed
			}
			break;
		}

		if(RetryInNextCycle == TRUE)
    1bae:	81 30       	cpi	r24, 0x01	; 1
    1bb0:	69 f4       	brne	.+26     	; 0x1bcc <SIMCOM_SSL_CONFIG_MainFunction+0x2a2>
		{
			// If Retry is allowed
			if(SIMCOM_SSL_Config_Retry_Count != 0)
    1bb2:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <SIMCOM_SSL_Config_Retry_Count>
    1bb6:	88 23       	and	r24, r24
    1bb8:	31 f0       	breq	.+12     	; 0x1bc6 <SIMCOM_SSL_CONFIG_MainFunction+0x29c>
			{
				SIMCOM_SSL_Config_Retry_Count--; // Decrement the Retry Count
    1bba:	81 50       	subi	r24, 0x01	; 1
    1bbc:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <SIMCOM_SSL_Config_Retry_Count>

				SIMCOM_Job_Result = SIMCOM_Job_Idle; // Setting the Job to Idle will retry the Job again in next cycle.
    1bc0:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <SIMCOM_Job_Result>
    1bc4:	03 c0       	rjmp	.+6      	; 0x1bcc <SIMCOM_SSL_CONFIG_MainFunction+0x2a2>
			}
			else
			{
				// RETRY Mechanism expired, abort the Job and do not move the state
				SIMCOM_Job_Result = SIMCOM_Job_Aborted;
    1bc6:	86 e0       	ldi	r24, 0x06	; 6
    1bc8:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <SIMCOM_Job_Result>
			}
		}

		if(SIMCOM_Job_Result == SIMCOM_Job_Aborted)
    1bcc:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <SIMCOM_Job_Result>
    1bd0:	86 30       	cpi	r24, 0x06	; 6
    1bd2:	31 f4       	brne	.+12     	; 0x1be0 <SIMCOM_SSL_CONFIG_MainFunction+0x2b6>
		{
			// If in any of the state, the Job is aborted, then move to the Error State

			C_MQTT_SSL_Config_State = C_MQTT_SSL_Configration_Error;
    1bd4:	87 e0       	ldi	r24, 0x07	; 7
    1bd6:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <C_MQTT_SSL_Config_State>
					default:
					// Do Nothing, SIMCOM Module will timeout and reerror
					break;
				}

				SIMCOM_ERROR_CALLBACK(ErrorState);
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	0e 94 4c 09 	call	0x1298	; 0x1298 <COSMIC_SIMCOM_Error_Callback>
			}
		}

		/* Check if the state changed after execution */
		if(C_MQTT_SSL_Configuration_State_Before_Execution != C_MQTT_SSL_Config_State)
    1be0:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <C_MQTT_SSL_Config_State>
    1be4:	c8 17       	cp	r28, r24
    1be6:	29 f0       	breq	.+10     	; 0x1bf2 <SIMCOM_SSL_CONFIG_MainFunction+0x2c8>
		{
			// If changed, the Set the New Job Result as Idle for the next state to proceed further
			SIMCOM_Job_Result = SIMCOM_Job_Idle; // Reset the Job state so that next command will be sent
    1be8:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <SIMCOM_Job_Result>

			SIMCOM_SSL_Config_Retry_Count = P_SIMCOM_DEFAULT_FAILURE_RETRY_COUNT; // Reset the Retry Count
    1bec:	8a e0       	ldi	r24, 0x0A	; 10
    1bee:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <SIMCOM_SSL_Config_Retry_Count>
	}
	else
	{
		//SIMCOM_SSL_Config_State = SIMCOM_SSL_Configuration_Idle;
	}
    1bf2:	cf 91       	pop	r28
    1bf4:	08 95       	ret

00001bf6 <UpdatePublishdata>:
	}
	else
	{
		IO_status = 1;
	}
	sprintf(PublishPayload,PublishString,Cmd,IO_status);
    1bf6:	1f 92       	push	r1
    1bf8:	91 e0       	ldi	r25, 0x01	; 1
    1bfa:	9f 93       	push	r25
    1bfc:	1f 92       	push	r1
    1bfe:	8f 93       	push	r24
    1c00:	82 e1       	ldi	r24, 0x12	; 18
    1c02:	93 e0       	ldi	r25, 0x03	; 3
    1c04:	9f 93       	push	r25
    1c06:	8f 93       	push	r24
    1c08:	84 e3       	ldi	r24, 0x34	; 52
    1c0a:	95 e0       	ldi	r25, 0x05	; 5
    1c0c:	9f 93       	push	r25
    1c0e:	8f 93       	push	r24
    1c10:	0e 94 3c 10 	call	0x2078	; 0x2078 <sprintf>
}
    1c14:	8d b7       	in	r24, 0x3d	; 61
    1c16:	9e b7       	in	r25, 0x3e	; 62
    1c18:	08 96       	adiw	r24, 0x08	; 8
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	f8 94       	cli
    1c1e:	9e bf       	out	0x3e, r25	; 62
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	8d bf       	out	0x3d, r24	; 61
    1c24:	08 95       	ret

00001c26 <MQTT_StringSeperate>:

UBYTE MQTT_StringSeperate(char *str,char endpoint)
{
    1c26:	ef 92       	push	r14
    1c28:	ff 92       	push	r15
    1c2a:	0f 93       	push	r16
    1c2c:	1f 93       	push	r17
    1c2e:	cf 93       	push	r28
    1c30:	df 93       	push	r29
    1c32:	ec 01       	movw	r28, r24
	static char arr[5];
	int i,j,findlen,count = 0,temp;
	findlen = strlen(str);
    1c34:	dc 01       	movw	r26, r24
    1c36:	0d 90       	ld	r0, X+
    1c38:	00 20       	and	r0, r0
    1c3a:	e9 f7       	brne	.-6      	; 0x1c36 <MQTT_StringSeperate+0x10>
    1c3c:	11 97       	sbiw	r26, 0x01	; 1
    1c3e:	a8 1b       	sub	r26, r24
    1c40:	b9 0b       	sbc	r27, r25
	for(i = 0;i<SIMCOM_ResponseLength-findlen;i++)
    1c42:	40 e0       	ldi	r20, 0x00	; 0
    1c44:	50 e0       	ldi	r21, 0x00	; 0
    1c46:	46 c0       	rjmp	.+140    	; 0x1cd4 <MQTT_StringSeperate+0xae>
	{
		j = 0;
		if(SubscribeDataBuff[i] == str[0] && SubscribeDataBuff[i+1] == str[1])
    1c48:	fa 01       	movw	r30, r20
    1c4a:	e3 5b       	subi	r30, 0xB3	; 179
    1c4c:	fa 4f       	sbci	r31, 0xFA	; 250
    1c4e:	90 81       	ld	r25, Z
    1c50:	88 81       	ld	r24, Y
    1c52:	98 13       	cpse	r25, r24
    1c54:	3d c0       	rjmp	.+122    	; 0x1cd0 <MQTT_StringSeperate+0xaa>
    1c56:	fa 01       	movw	r30, r20
    1c58:	e2 5b       	subi	r30, 0xB2	; 178
    1c5a:	fa 4f       	sbci	r31, 0xFA	; 250
    1c5c:	90 81       	ld	r25, Z
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	98 13       	cpse	r25, r24
    1c62:	36 c0       	rjmp	.+108    	; 0x1cd0 <MQTT_StringSeperate+0xaa>
    1c64:	2d c0       	rjmp	.+90     	; 0x1cc0 <MQTT_StringSeperate+0x9a>
		{
			temp = i;
			while(j<findlen)
			{
				if(str[j] == SubscribeDataBuff[temp])
    1c66:	fe 01       	movw	r30, r28
    1c68:	e2 0f       	add	r30, r18
    1c6a:	f3 1f       	adc	r31, r19
    1c6c:	70 81       	ld	r23, Z
    1c6e:	f8 01       	movw	r30, r16
    1c70:	e3 5b       	subi	r30, 0xB3	; 179
    1c72:	fa 4f       	sbci	r31, 0xFA	; 250
    1c74:	90 81       	ld	r25, Z
    1c76:	79 13       	cpse	r23, r25
    1c78:	28 c0       	rjmp	.+80     	; 0x1cca <MQTT_StringSeperate+0xa4>
				{
					count++;
    1c7a:	8f ef       	ldi	r24, 0xFF	; 255
    1c7c:	e8 1a       	sub	r14, r24
    1c7e:	f8 0a       	sbc	r15, r24
					if(count == findlen)
    1c80:	ae 15       	cp	r26, r14
    1c82:	bf 05       	cpc	r27, r15
    1c84:	c1 f4       	brne	.+48     	; 0x1cb6 <MQTT_StringSeperate+0x90>
					{
						temp = temp+1;
    1c86:	0f 5f       	subi	r16, 0xFF	; 255
    1c88:	1f 4f       	sbci	r17, 0xFF	; 255
						count = 0;
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
						for(i = temp;SubscribeDataBuff[i]!=endpoint;i++)
    1c8e:	08 c0       	rjmp	.+16     	; 0x1ca0 <MQTT_StringSeperate+0x7a>
						{
							arr[count] = SubscribeDataBuff[i];
    1c90:	f9 01       	movw	r30, r18
    1c92:	e5 5b       	subi	r30, 0xB5	; 181
    1c94:	fc 4f       	sbci	r31, 0xFC	; 252
    1c96:	80 83       	st	Z, r24
							count++;
    1c98:	2f 5f       	subi	r18, 0xFF	; 255
    1c9a:	3f 4f       	sbci	r19, 0xFF	; 255
					count++;
					if(count == findlen)
					{
						temp = temp+1;
						count = 0;
						for(i = temp;SubscribeDataBuff[i]!=endpoint;i++)
    1c9c:	0f 5f       	subi	r16, 0xFF	; 255
    1c9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca0:	f8 01       	movw	r30, r16
    1ca2:	e3 5b       	subi	r30, 0xB3	; 179
    1ca4:	fa 4f       	sbci	r31, 0xFA	; 250
    1ca6:	80 81       	ld	r24, Z
    1ca8:	86 13       	cpse	r24, r22
    1caa:	f2 cf       	rjmp	.-28     	; 0x1c90 <MQTT_StringSeperate+0x6a>
						{
							arr[count] = SubscribeDataBuff[i];
							count++;
						}
						return atoi(arr);
    1cac:	8b e4       	ldi	r24, 0x4B	; 75
    1cae:	93 e0       	ldi	r25, 0x03	; 3
    1cb0:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <atoi>
    1cb4:	19 c0       	rjmp	.+50     	; 0x1ce8 <MQTT_StringSeperate+0xc2>
						break;
					}
					j++;
    1cb6:	2f 5f       	subi	r18, 0xFF	; 255
    1cb8:	3f 4f       	sbci	r19, 0xFF	; 255
					temp++;
    1cba:	0f 5f       	subi	r16, 0xFF	; 255
    1cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cbe:	05 c0       	rjmp	.+10     	; 0x1cca <MQTT_StringSeperate+0xa4>
    1cc0:	8a 01       	movw	r16, r20
    1cc2:	e1 2c       	mov	r14, r1
    1cc4:	f1 2c       	mov	r15, r1
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
	{
		j = 0;
		if(SubscribeDataBuff[i] == str[0] && SubscribeDataBuff[i+1] == str[1])
		{
			temp = i;
			while(j<findlen)
    1cca:	2a 17       	cp	r18, r26
    1ccc:	3b 07       	cpc	r19, r27
    1cce:	5c f2       	brlt	.-106    	; 0x1c66 <MQTT_StringSeperate+0x40>
UBYTE MQTT_StringSeperate(char *str,char endpoint)
{
	static char arr[5];
	int i,j,findlen,count = 0,temp;
	findlen = strlen(str);
	for(i = 0;i<SIMCOM_ResponseLength-findlen;i++)
    1cd0:	4f 5f       	subi	r20, 0xFF	; 255
    1cd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd4:	20 91 41 03 	lds	r18, 0x0341	; 0x800341 <SIMCOM_ResponseLength>
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	2a 1b       	sub	r18, r26
    1cdc:	3b 0b       	sbc	r19, r27
    1cde:	42 17       	cp	r20, r18
    1ce0:	53 07       	cpc	r21, r19
    1ce2:	0c f4       	brge	.+2      	; 0x1ce6 <MQTT_StringSeperate+0xc0>
    1ce4:	b1 cf       	rjmp	.-158    	; 0x1c48 <MQTT_StringSeperate+0x22>
			}
		}
		count=0;
	}
	
	return 0;
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
}
    1ce8:	df 91       	pop	r29
    1cea:	cf 91       	pop	r28
    1cec:	1f 91       	pop	r17
    1cee:	0f 91       	pop	r16
    1cf0:	ff 90       	pop	r15
    1cf2:	ef 90       	pop	r14
    1cf4:	08 95       	ret

00001cf6 <MQTT_AppMain>:
void MQTT_AppMain()
{
    1cf6:	ef 92       	push	r14
    1cf8:	ff 92       	push	r15
    1cfa:	0f 93       	push	r16
    1cfc:	1f 93       	push	r17
    1cfe:	cf 93       	push	r28
    1d00:	df 93       	push	r29
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	2a 97       	sbiw	r28, 0x0a	; 10
    1d08:	0f b6       	in	r0, 0x3f	; 63
    1d0a:	f8 94       	cli
    1d0c:	de bf       	out	0x3e, r29	; 62
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	cd bf       	out	0x3d, r28	; 61
	switch(MQTTApp_State)
    1d12:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <MQTTApp_State>
    1d16:	83 30       	cpi	r24, 0x03	; 3
    1d18:	d1 f0       	breq	.+52     	; 0x1d4e <MQTT_AppMain+0x58>
    1d1a:	18 f4       	brcc	.+6      	; 0x1d22 <MQTT_AppMain+0x2c>
    1d1c:	88 23       	and	r24, r24
    1d1e:	41 f0       	breq	.+16     	; 0x1d30 <MQTT_AppMain+0x3a>
    1d20:	8b c0       	rjmp	.+278    	; 0x1e38 <MQTT_AppMain+0x142>
    1d22:	84 30       	cpi	r24, 0x04	; 4
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <MQTT_AppMain+0x32>
    1d26:	80 c0       	rjmp	.+256    	; 0x1e28 <MQTT_AppMain+0x132>
    1d28:	85 30       	cpi	r24, 0x05	; 5
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <MQTT_AppMain+0x38>
    1d2c:	74 c0       	rjmp	.+232    	; 0x1e16 <MQTT_AppMain+0x120>
    1d2e:	84 c0       	rjmp	.+264    	; 0x1e38 <MQTT_AppMain+0x142>
			
		}
		break;
		case MQTTApp_Init:
		{
			if(IsMQTT_Ready())
    1d30:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <MQTT_State>
    1d34:	89 30       	cpi	r24, 0x09	; 9
    1d36:	09 f0       	breq	.+2      	; 0x1d3a <MQTT_AppMain+0x44>
    1d38:	7f c0       	rjmp	.+254    	; 0x1e38 <MQTT_AppMain+0x142>
			{
				UpdatePublishdata(255);
    1d3a:	8f ef       	ldi	r24, 0xFF	; 255
    1d3c:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <UpdatePublishdata>
				Publish_State = MQTT_PublishTopic_Config;
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <Publish_State>
				MQTTApp_State = MQTTApp_SubMessageHandling;
    1d46:	83 e0       	ldi	r24, 0x03	; 3
    1d48:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <MQTTApp_State>
    1d4c:	75 c0       	rjmp	.+234    	; 0x1e38 <MQTT_AppMain+0x142>
			}
		}
		break;
		case MQTTApp_SubMessageHandling:
		{
			if(IsSubscribeMsgRecieved == TRUE)
    1d4e:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <IsSubscribeMsgRecieved>
    1d52:	81 30       	cpi	r24, 0x01	; 1
    1d54:	09 f0       	breq	.+2      	; 0x1d58 <MQTT_AppMain+0x62>
    1d56:	70 c0       	rjmp	.+224    	; 0x1e38 <MQTT_AppMain+0x142>
			{
				IsSubscribeMsgRecieved = FALSE;
    1d58:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <IsSubscribeMsgRecieved>
				UBYTE cmd = MQTT_StringSeperate("\"cmd\":",'\"');
    1d5c:	62 e2       	ldi	r22, 0x22	; 34
    1d5e:	8b e7       	ldi	r24, 0x7B	; 123
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <MQTT_StringSeperate>
    1d66:	f8 2e       	mov	r15, r24
				char temp[5];
				sprintf(temp,"%d",cmd);
    1d68:	1f 92       	push	r1
    1d6a:	8f 93       	push	r24
    1d6c:	89 e2       	ldi	r24, 0x29	; 41
    1d6e:	92 e0       	ldi	r25, 0x02	; 2
    1d70:	9f 93       	push	r25
    1d72:	8f 93       	push	r24
    1d74:	8e 01       	movw	r16, r28
    1d76:	0a 5f       	subi	r16, 0xFA	; 250
    1d78:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7a:	1f 93       	push	r17
    1d7c:	0f 93       	push	r16
    1d7e:	0e 94 3c 10 	call	0x2078	; 0x2078 <sprintf>
				temp[4] = '\0';
    1d82:	1a 86       	std	Y+10, r1	; 0x0a
				DebugStringRow2(temp);
    1d84:	c8 01       	movw	r24, r16
    1d86:	0e 94 a5 02 	call	0x54a	; 0x54a <DebugStringRow2>
				if (cmd == 255)
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	8f ef       	ldi	r24, 0xFF	; 255
    1d98:	f8 12       	cpse	r15, r24
    1d9a:	04 c0       	rjmp	.+8      	; 0x1da4 <MQTT_AppMain+0xae>
				{
					MQTTApp_State = MQTTApp_UpdateBeforeIdle;
    1d9c:	85 e0       	ldi	r24, 0x05	; 5
    1d9e:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <MQTTApp_State>
    1da2:	08 c0       	rjmp	.+16     	; 0x1db4 <MQTT_AppMain+0xbe>
				}
				else if (cmd == 1)
    1da4:	91 e0       	ldi	r25, 0x01	; 1
    1da6:	f9 12       	cpse	r15, r25
    1da8:	04 c0       	rjmp	.+8      	; 0x1db2 <MQTT_AppMain+0xbc>
				{
					MQTTApp_State = MQTTApp_ReplyMsg;
    1daa:	84 e0       	ldi	r24, 0x04	; 4
    1dac:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <MQTTApp_State>
    1db0:	01 c0       	rjmp	.+2      	; 0x1db4 <MQTT_AppMain+0xbe>
				}
				else
				{
					//Invalid data received Error
					PORTA = 0X00;
    1db2:	1b ba       	out	0x1b, r1	; 27
				//	DebugStringRow1("error");
				}
				UBYTE IO_Control = MQTT_StringSeperate("\"m1\":",'}');
    1db4:	6d e7       	ldi	r22, 0x7D	; 125
    1db6:	8c e2       	ldi	r24, 0x2C	; 44
    1db8:	93 e0       	ldi	r25, 0x03	; 3
    1dba:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <MQTT_StringSeperate>
    1dbe:	18 2f       	mov	r17, r24
				
				char temp2[5];
				sprintf(temp2,"%d",IO_Control);
    1dc0:	1f 92       	push	r1
    1dc2:	8f 93       	push	r24
    1dc4:	89 e2       	ldi	r24, 0x29	; 41
    1dc6:	92 e0       	ldi	r25, 0x02	; 2
    1dc8:	9f 93       	push	r25
    1dca:	8f 93       	push	r24
    1dcc:	ce 01       	movw	r24, r28
    1dce:	01 96       	adiw	r24, 0x01	; 1
    1dd0:	7c 01       	movw	r14, r24
    1dd2:	9f 93       	push	r25
    1dd4:	8f 93       	push	r24
    1dd6:	0e 94 3c 10 	call	0x2078	; 0x2078 <sprintf>
				temp2[4] = '\0';
    1dda:	1d 82       	std	Y+5, r1	; 0x05
				LCD_command(0xC6);
    1ddc:	86 ec       	ldi	r24, 0xC6	; 198
    1dde:	0e 94 92 02 	call	0x524	; 0x524 <LCD_command>
				Display_String(temp2);
    1de2:	c7 01       	movw	r24, r14
    1de4:	0e 94 8d 02 	call	0x51a	; 0x51a <Display_String>
				
				if (IO_Control == 1)				
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	11 30       	cpi	r17, 0x01	; 1
    1df6:	41 f4       	brne	.+16     	; 0x1e08 <MQTT_AppMain+0x112>
				{
					DebugStringRow1("on");
    1df8:	82 e3       	ldi	r24, 0x32	; 50
    1dfa:	93 e0       	ldi	r25, 0x03	; 3
    1dfc:	0e 94 99 02 	call	0x532	; 0x532 <DebugStringRow1>
					PORTA = 0x00;
    1e00:	1b ba       	out	0x1b, r1	; 27
					PORTB = 0xFF;
    1e02:	8f ef       	ldi	r24, 0xFF	; 255
    1e04:	88 bb       	out	0x18, r24	; 24
    1e06:	18 c0       	rjmp	.+48     	; 0x1e38 <MQTT_AppMain+0x142>
				}
				else
				{
					DebugStringRow1("off");
    1e08:	85 e3       	ldi	r24, 0x35	; 53
    1e0a:	93 e0       	ldi	r25, 0x03	; 3
    1e0c:	0e 94 99 02 	call	0x532	; 0x532 <DebugStringRow1>
					PORTA = 0xFF;
    1e10:	8f ef       	ldi	r24, 0xFF	; 255
    1e12:	8b bb       	out	0x1b, r24	; 27
    1e14:	11 c0       	rjmp	.+34     	; 0x1e38 <MQTT_AppMain+0x142>
			}
		}
		break;
		case MQTTApp_UpdateBeforeIdle:
		{
			UpdatePublishdata(0);
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <UpdatePublishdata>
			Publish_State = MQTT_PublishTopic_Config;
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <Publish_State>
			MQTTApp_State = MQTTApp_Idle;
    1e22:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <MQTTApp_State>
		}
		break;
    1e26:	08 c0       	rjmp	.+16     	; 0x1e38 <MQTT_AppMain+0x142>
		case MQTTApp_ReplyMsg:
		{
			UpdatePublishdata(1);
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <UpdatePublishdata>
			Publish_State = MQTT_PublishTopic_Config;
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <Publish_State>
			MQTTApp_State = MQTTApp_Idle;
    1e34:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <MQTTApp_State>
			//do Nothing
			break;
		}
	}
	
}
    1e38:	2a 96       	adiw	r28, 0x0a	; 10
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	f8 94       	cli
    1e3e:	de bf       	out	0x3e, r29	; 62
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	cd bf       	out	0x3d, r28	; 61
    1e44:	df 91       	pop	r29
    1e46:	cf 91       	pop	r28
    1e48:	1f 91       	pop	r17
    1e4a:	0f 91       	pop	r16
    1e4c:	ff 90       	pop	r15
    1e4e:	ef 90       	pop	r14
    1e50:	08 95       	ret

00001e52 <PRC_SYSOS_TASK_INIT>:
/* Define the Process calls for the Tasks */

/* Definition for the task Init */
void PRC_SYSOS_TASK_INIT(void)
{
		TIM1_Init();
    1e52:	0e 94 58 00 	call	0xb0	; 0xb0 <TIM1_Init>
		SIMCOM_Init();
    1e56:	0e 94 30 05 	call	0xa60	; 0xa60 <SIMCOM_Init>
		Avr_Init();
    1e5a:	0e 94 53 09 	call	0x12a6	; 0x12a6 <Avr_Init>
		UART_init();
    1e5e:	0e 94 8b 00 	call	0x116	; 0x116 <UART_init>
		LCD_Init();
    1e62:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_Init>
    1e66:	08 95       	ret

00001e68 <PRC_SYSOS_TASK_X10>:
}

/* Definition for the task x10 */
void PRC_SYSOS_TASK_X10(void)
{
		Avr_Main_x10();
    1e68:	0e 94 59 09 	call	0x12b2	; 0x12b2 <Avr_Main_x10>
    1e6c:	08 95       	ret

00001e6e <PRC_SYSOS_TASK_X100>:
}

/* Definition for the task x100 */
void PRC_SYSOS_TASK_X100(void)
{
		SIMCOM_MainFunction();
    1e6e:	0e 94 c4 06 	call	0xd88	; 0xd88 <SIMCOM_MainFunction>
    1e72:	08 95       	ret

00001e74 <PRC_SYSOS_TASK_X1>:
}

/* Definition for the task x1 */
void PRC_SYSOS_TASK_X1(void)
{
		LCD_Mainfunction();
    1e74:	0e 94 bd 02 	call	0x57a	; 0x57a <LCD_Mainfunction>
    1e78:	08 95       	ret

00001e7a <FUN_SYS_Internal_Init>:

void FUN_SYS_Internal_Init(void)
{
	/* Initialize All the Tasks with Factor 1 as TRUE by default */

	PRC_SYSOS_TASK_INIT();
    1e7a:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <PRC_SYSOS_TASK_INIT>



	SysOS_Ctrl.Isx1 = TRUE;
    1e7e:	80 91 d1 05 	lds	r24, 0x05D1	; 0x8005d1 <SysOS_Ctrl>
    1e82:	88 60       	ori	r24, 0x08	; 8
    1e84:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <SysOS_Ctrl>
    1e88:	08 95       	ret

00001e8a <FUN_SYS_Internal_Evaluate_Tasks_x1>:
	/* Tasks with Factor 1 will be Ignored        */
	/* Toggle the Tasks which has the factor of 2 */
	/**********************************************/

	/* Task Init Ignored as the factor was 0 */
	SysOS_Ctrl.Isx10 = (g_SysOS_Counter % 10) ? FALSE : TRUE;
    1e8a:	40 91 cf 05 	lds	r20, 0x05CF	; 0x8005cf <g_SysOS_Counter>
    1e8e:	50 91 d0 05 	lds	r21, 0x05D0	; 0x8005d0 <g_SysOS_Counter+0x1>
    1e92:	9a 01       	movw	r18, r20
    1e94:	ad ec       	ldi	r26, 0xCD	; 205
    1e96:	bc ec       	ldi	r27, 0xCC	; 204
    1e98:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <__umulhisi3>
    1e9c:	96 95       	lsr	r25
    1e9e:	87 95       	ror	r24
    1ea0:	96 95       	lsr	r25
    1ea2:	87 95       	ror	r24
    1ea4:	96 95       	lsr	r25
    1ea6:	87 95       	ror	r24
    1ea8:	9c 01       	movw	r18, r24
    1eaa:	22 0f       	add	r18, r18
    1eac:	33 1f       	adc	r19, r19
    1eae:	88 0f       	add	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	88 0f       	add	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	88 0f       	add	r24, r24
    1eb8:	99 1f       	adc	r25, r25
    1eba:	82 0f       	add	r24, r18
    1ebc:	93 1f       	adc	r25, r19
    1ebe:	21 e0       	ldi	r18, 0x01	; 1
    1ec0:	48 17       	cp	r20, r24
    1ec2:	59 07       	cpc	r21, r25
    1ec4:	09 f0       	breq	.+2      	; 0x1ec8 <FUN_SYS_Internal_Evaluate_Tasks_x1+0x3e>
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	80 91 d1 05 	lds	r24, 0x05D1	; 0x8005d1 <SysOS_Ctrl>
    1ecc:	20 fb       	bst	r18, 0
    1ece:	81 f9       	bld	r24, 1
    1ed0:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <SysOS_Ctrl>
	SysOS_Ctrl.Isx100 = (g_SysOS_Counter % 100) ? FALSE : TRUE;
    1ed4:	9a 01       	movw	r18, r20
    1ed6:	36 95       	lsr	r19
    1ed8:	27 95       	ror	r18
    1eda:	36 95       	lsr	r19
    1edc:	27 95       	ror	r18
    1ede:	ab e7       	ldi	r26, 0x7B	; 123
    1ee0:	b4 e1       	ldi	r27, 0x14	; 20
    1ee2:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <__umulhisi3>
    1ee6:	96 95       	lsr	r25
    1ee8:	87 95       	ror	r24
    1eea:	64 e6       	ldi	r22, 0x64	; 100
    1eec:	68 9f       	mul	r22, r24
    1eee:	90 01       	movw	r18, r0
    1ef0:	69 9f       	mul	r22, r25
    1ef2:	30 0d       	add	r19, r0
    1ef4:	11 24       	eor	r1, r1
    1ef6:	91 e0       	ldi	r25, 0x01	; 1
    1ef8:	42 17       	cp	r20, r18
    1efa:	53 07       	cpc	r21, r19
    1efc:	09 f0       	breq	.+2      	; 0x1f00 <FUN_SYS_Internal_Evaluate_Tasks_x1+0x76>
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	80 91 d1 05 	lds	r24, 0x05D1	; 0x8005d1 <SysOS_Ctrl>
    1f04:	90 fb       	bst	r25, 0
    1f06:	82 f9       	bld	r24, 2
    1f08:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <SysOS_Ctrl>
	/* Task x1 Ignored as the factor was 1 */
#if (P_SYS_OS_TASK_FACTOR_MAX > 2)

	/* Increment the counter for next run */
	g_SysOS_Counter++;
    1f0c:	4f 5f       	subi	r20, 0xFF	; 255
    1f0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f10:	50 93 d0 05 	sts	0x05D0, r21	; 0x8005d0 <g_SysOS_Counter+0x1>
    1f14:	40 93 cf 05 	sts	0x05CF, r20	; 0x8005cf <g_SysOS_Counter>
	if(g_SysOS_Counter > P_SYS_OS_TASK_FACTOR_MAX)
    1f18:	45 36       	cpi	r20, 0x65	; 101
    1f1a:	51 05       	cpc	r21, r1
    1f1c:	30 f0       	brcs	.+12     	; 0x1f2a <FUN_SYS_Internal_Evaluate_Tasks_x1+0xa0>
	{
		/* Resetting the counter to zero will cause all tha tasks to be executed once again. */
		/* So Set the value of g_SysOS_Counter to 1	*/
		g_SysOS_Counter = 1; 
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <g_SysOS_Counter+0x1>
    1f26:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <g_SysOS_Counter>
    1f2a:	08 95       	ret

00001f2c <FUN_SYS_Internal_Execute_Tasks>:
}

void FUN_SYS_Internal_Execute_Tasks(void)
{

	PRC_SYSOS_TASK_X1();
    1f2c:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <PRC_SYSOS_TASK_X1>


	if(SysOS_Ctrl.Isx10 == TRUE){ PRC_SYSOS_TASK_X10();}
    1f30:	80 91 d1 05 	lds	r24, 0x05D1	; 0x8005d1 <SysOS_Ctrl>
    1f34:	81 fd       	sbrc	r24, 1
    1f36:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <PRC_SYSOS_TASK_X10>


	if(SysOS_Ctrl.Isx100 == TRUE){ PRC_SYSOS_TASK_X100();}
    1f3a:	80 91 d1 05 	lds	r24, 0x05D1	; 0x8005d1 <SysOS_Ctrl>
    1f3e:	82 fd       	sbrc	r24, 2
    1f40:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <PRC_SYSOS_TASK_X100>
    1f44:	08 95       	ret

00001f46 <main>:
#include <avr/interrupt.h>


int main(void)
{
	SysOs_Main();
    1f46:	0e 94 3b 09 	call	0x1276	; 0x1276 <SysOs_Main>
}
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	08 95       	ret

00001f50 <__udivmodsi4>:
    1f50:	a1 e2       	ldi	r26, 0x21	; 33
    1f52:	1a 2e       	mov	r1, r26
    1f54:	aa 1b       	sub	r26, r26
    1f56:	bb 1b       	sub	r27, r27
    1f58:	fd 01       	movw	r30, r26
    1f5a:	0d c0       	rjmp	.+26     	; 0x1f76 <__udivmodsi4_ep>

00001f5c <__udivmodsi4_loop>:
    1f5c:	aa 1f       	adc	r26, r26
    1f5e:	bb 1f       	adc	r27, r27
    1f60:	ee 1f       	adc	r30, r30
    1f62:	ff 1f       	adc	r31, r31
    1f64:	a2 17       	cp	r26, r18
    1f66:	b3 07       	cpc	r27, r19
    1f68:	e4 07       	cpc	r30, r20
    1f6a:	f5 07       	cpc	r31, r21
    1f6c:	20 f0       	brcs	.+8      	; 0x1f76 <__udivmodsi4_ep>
    1f6e:	a2 1b       	sub	r26, r18
    1f70:	b3 0b       	sbc	r27, r19
    1f72:	e4 0b       	sbc	r30, r20
    1f74:	f5 0b       	sbc	r31, r21

00001f76 <__udivmodsi4_ep>:
    1f76:	66 1f       	adc	r22, r22
    1f78:	77 1f       	adc	r23, r23
    1f7a:	88 1f       	adc	r24, r24
    1f7c:	99 1f       	adc	r25, r25
    1f7e:	1a 94       	dec	r1
    1f80:	69 f7       	brne	.-38     	; 0x1f5c <__udivmodsi4_loop>
    1f82:	60 95       	com	r22
    1f84:	70 95       	com	r23
    1f86:	80 95       	com	r24
    1f88:	90 95       	com	r25
    1f8a:	9b 01       	movw	r18, r22
    1f8c:	ac 01       	movw	r20, r24
    1f8e:	bd 01       	movw	r22, r26
    1f90:	cf 01       	movw	r24, r30
    1f92:	08 95       	ret

00001f94 <__tablejump2__>:
    1f94:	ee 0f       	add	r30, r30
    1f96:	ff 1f       	adc	r31, r31
    1f98:	05 90       	lpm	r0, Z+
    1f9a:	f4 91       	lpm	r31, Z
    1f9c:	e0 2d       	mov	r30, r0
    1f9e:	09 94       	ijmp

00001fa0 <__umulhisi3>:
    1fa0:	a2 9f       	mul	r26, r18
    1fa2:	b0 01       	movw	r22, r0
    1fa4:	b3 9f       	mul	r27, r19
    1fa6:	c0 01       	movw	r24, r0
    1fa8:	a3 9f       	mul	r26, r19
    1faa:	70 0d       	add	r23, r0
    1fac:	81 1d       	adc	r24, r1
    1fae:	11 24       	eor	r1, r1
    1fb0:	91 1d       	adc	r25, r1
    1fb2:	b2 9f       	mul	r27, r18
    1fb4:	70 0d       	add	r23, r0
    1fb6:	81 1d       	adc	r24, r1
    1fb8:	11 24       	eor	r1, r1
    1fba:	91 1d       	adc	r25, r1
    1fbc:	08 95       	ret

00001fbe <atoi>:
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	88 27       	eor	r24, r24
    1fc2:	99 27       	eor	r25, r25
    1fc4:	e8 94       	clt
    1fc6:	21 91       	ld	r18, Z+
    1fc8:	20 32       	cpi	r18, 0x20	; 32
    1fca:	e9 f3       	breq	.-6      	; 0x1fc6 <atoi+0x8>
    1fcc:	29 30       	cpi	r18, 0x09	; 9
    1fce:	10 f0       	brcs	.+4      	; 0x1fd4 <atoi+0x16>
    1fd0:	2e 30       	cpi	r18, 0x0E	; 14
    1fd2:	c8 f3       	brcs	.-14     	; 0x1fc6 <atoi+0x8>
    1fd4:	2b 32       	cpi	r18, 0x2B	; 43
    1fd6:	41 f0       	breq	.+16     	; 0x1fe8 <atoi+0x2a>
    1fd8:	2d 32       	cpi	r18, 0x2D	; 45
    1fda:	39 f4       	brne	.+14     	; 0x1fea <atoi+0x2c>
    1fdc:	68 94       	set
    1fde:	04 c0       	rjmp	.+8      	; 0x1fe8 <atoi+0x2a>
    1fe0:	0e 94 34 10 	call	0x2068	; 0x2068 <__mulhi_const_10>
    1fe4:	82 0f       	add	r24, r18
    1fe6:	91 1d       	adc	r25, r1
    1fe8:	21 91       	ld	r18, Z+
    1fea:	20 53       	subi	r18, 0x30	; 48
    1fec:	2a 30       	cpi	r18, 0x0A	; 10
    1fee:	c0 f3       	brcs	.-16     	; 0x1fe0 <atoi+0x22>
    1ff0:	1e f4       	brtc	.+6      	; 0x1ff8 <atoi+0x3a>
    1ff2:	90 95       	com	r25
    1ff4:	81 95       	neg	r24
    1ff6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff8:	08 95       	ret

00001ffa <memcmp>:
    1ffa:	fb 01       	movw	r30, r22
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	04 c0       	rjmp	.+8      	; 0x2008 <memcmp+0xe>
    2000:	8d 91       	ld	r24, X+
    2002:	01 90       	ld	r0, Z+
    2004:	80 19       	sub	r24, r0
    2006:	21 f4       	brne	.+8      	; 0x2010 <memcmp+0x16>
    2008:	41 50       	subi	r20, 0x01	; 1
    200a:	50 40       	sbci	r21, 0x00	; 0
    200c:	c8 f7       	brcc	.-14     	; 0x2000 <memcmp+0x6>
    200e:	88 1b       	sub	r24, r24
    2010:	99 0b       	sbc	r25, r25
    2012:	08 95       	ret

00002014 <strcmp>:
    2014:	fb 01       	movw	r30, r22
    2016:	dc 01       	movw	r26, r24
    2018:	8d 91       	ld	r24, X+
    201a:	01 90       	ld	r0, Z+
    201c:	80 19       	sub	r24, r0
    201e:	01 10       	cpse	r0, r1
    2020:	d9 f3       	breq	.-10     	; 0x2018 <strcmp+0x4>
    2022:	99 0b       	sbc	r25, r25
    2024:	08 95       	ret

00002026 <strcpy>:
    2026:	fb 01       	movw	r30, r22
    2028:	dc 01       	movw	r26, r24
    202a:	01 90       	ld	r0, Z+
    202c:	0d 92       	st	X+, r0
    202e:	00 20       	and	r0, r0
    2030:	e1 f7       	brne	.-8      	; 0x202a <strcpy+0x4>
    2032:	08 95       	ret

00002034 <strstr>:
    2034:	fb 01       	movw	r30, r22
    2036:	51 91       	ld	r21, Z+
    2038:	55 23       	and	r21, r21
    203a:	a9 f0       	breq	.+42     	; 0x2066 <strstr+0x32>
    203c:	bf 01       	movw	r22, r30
    203e:	dc 01       	movw	r26, r24
    2040:	4d 91       	ld	r20, X+
    2042:	45 17       	cp	r20, r21
    2044:	41 11       	cpse	r20, r1
    2046:	e1 f7       	brne	.-8      	; 0x2040 <strstr+0xc>
    2048:	59 f4       	brne	.+22     	; 0x2060 <strstr+0x2c>
    204a:	cd 01       	movw	r24, r26
    204c:	01 90       	ld	r0, Z+
    204e:	00 20       	and	r0, r0
    2050:	49 f0       	breq	.+18     	; 0x2064 <strstr+0x30>
    2052:	4d 91       	ld	r20, X+
    2054:	40 15       	cp	r20, r0
    2056:	41 11       	cpse	r20, r1
    2058:	c9 f3       	breq	.-14     	; 0x204c <strstr+0x18>
    205a:	fb 01       	movw	r30, r22
    205c:	41 11       	cpse	r20, r1
    205e:	ef cf       	rjmp	.-34     	; 0x203e <strstr+0xa>
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	08 95       	ret

00002068 <__mulhi_const_10>:
    2068:	7a e0       	ldi	r23, 0x0A	; 10
    206a:	97 9f       	mul	r25, r23
    206c:	90 2d       	mov	r25, r0
    206e:	87 9f       	mul	r24, r23
    2070:	80 2d       	mov	r24, r0
    2072:	91 0d       	add	r25, r1
    2074:	11 24       	eor	r1, r1
    2076:	08 95       	ret

00002078 <sprintf>:
    2078:	ae e0       	ldi	r26, 0x0E	; 14
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	e2 e4       	ldi	r30, 0x42	; 66
    207e:	f0 e1       	ldi	r31, 0x10	; 16
    2080:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__prologue_saves__+0x1c>
    2084:	0d 89       	ldd	r16, Y+21	; 0x15
    2086:	1e 89       	ldd	r17, Y+22	; 0x16
    2088:	86 e0       	ldi	r24, 0x06	; 6
    208a:	8c 83       	std	Y+4, r24	; 0x04
    208c:	1a 83       	std	Y+2, r17	; 0x02
    208e:	09 83       	std	Y+1, r16	; 0x01
    2090:	8f ef       	ldi	r24, 0xFF	; 255
    2092:	9f e7       	ldi	r25, 0x7F	; 127
    2094:	9e 83       	std	Y+6, r25	; 0x06
    2096:	8d 83       	std	Y+5, r24	; 0x05
    2098:	ae 01       	movw	r20, r28
    209a:	47 5e       	subi	r20, 0xE7	; 231
    209c:	5f 4f       	sbci	r21, 0xFF	; 255
    209e:	6f 89       	ldd	r22, Y+23	; 0x17
    20a0:	78 8d       	ldd	r23, Y+24	; 0x18
    20a2:	ce 01       	movw	r24, r28
    20a4:	01 96       	adiw	r24, 0x01	; 1
    20a6:	0e 94 5e 10 	call	0x20bc	; 0x20bc <vfprintf>
    20aa:	ef 81       	ldd	r30, Y+7	; 0x07
    20ac:	f8 85       	ldd	r31, Y+8	; 0x08
    20ae:	e0 0f       	add	r30, r16
    20b0:	f1 1f       	adc	r31, r17
    20b2:	10 82       	st	Z, r1
    20b4:	2e 96       	adiw	r28, 0x0e	; 14
    20b6:	e4 e0       	ldi	r30, 0x04	; 4
    20b8:	0c 94 19 13 	jmp	0x2632	; 0x2632 <__epilogue_restores__+0x1c>

000020bc <vfprintf>:
    20bc:	ab e0       	ldi	r26, 0x0B	; 11
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	e4 e6       	ldi	r30, 0x64	; 100
    20c2:	f0 e1       	ldi	r31, 0x10	; 16
    20c4:	0c 94 ef 12 	jmp	0x25de	; 0x25de <__prologue_saves__>
    20c8:	6c 01       	movw	r12, r24
    20ca:	7b 01       	movw	r14, r22
    20cc:	8a 01       	movw	r16, r20
    20ce:	fc 01       	movw	r30, r24
    20d0:	17 82       	std	Z+7, r1	; 0x07
    20d2:	16 82       	std	Z+6, r1	; 0x06
    20d4:	83 81       	ldd	r24, Z+3	; 0x03
    20d6:	81 ff       	sbrs	r24, 1
    20d8:	cc c1       	rjmp	.+920    	; 0x2472 <vfprintf+0x3b6>
    20da:	ce 01       	movw	r24, r28
    20dc:	01 96       	adiw	r24, 0x01	; 1
    20de:	3c 01       	movw	r6, r24
    20e0:	f6 01       	movw	r30, r12
    20e2:	93 81       	ldd	r25, Z+3	; 0x03
    20e4:	f7 01       	movw	r30, r14
    20e6:	93 fd       	sbrc	r25, 3
    20e8:	85 91       	lpm	r24, Z+
    20ea:	93 ff       	sbrs	r25, 3
    20ec:	81 91       	ld	r24, Z+
    20ee:	7f 01       	movw	r14, r30
    20f0:	88 23       	and	r24, r24
    20f2:	09 f4       	brne	.+2      	; 0x20f6 <vfprintf+0x3a>
    20f4:	ba c1       	rjmp	.+884    	; 0x246a <vfprintf+0x3ae>
    20f6:	85 32       	cpi	r24, 0x25	; 37
    20f8:	39 f4       	brne	.+14     	; 0x2108 <vfprintf+0x4c>
    20fa:	93 fd       	sbrc	r25, 3
    20fc:	85 91       	lpm	r24, Z+
    20fe:	93 ff       	sbrs	r25, 3
    2100:	81 91       	ld	r24, Z+
    2102:	7f 01       	movw	r14, r30
    2104:	85 32       	cpi	r24, 0x25	; 37
    2106:	29 f4       	brne	.+10     	; 0x2112 <vfprintf+0x56>
    2108:	b6 01       	movw	r22, r12
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	0e 94 55 12 	call	0x24aa	; 0x24aa <fputc>
    2110:	e7 cf       	rjmp	.-50     	; 0x20e0 <vfprintf+0x24>
    2112:	91 2c       	mov	r9, r1
    2114:	21 2c       	mov	r2, r1
    2116:	31 2c       	mov	r3, r1
    2118:	ff e1       	ldi	r31, 0x1F	; 31
    211a:	f3 15       	cp	r31, r3
    211c:	d8 f0       	brcs	.+54     	; 0x2154 <vfprintf+0x98>
    211e:	8b 32       	cpi	r24, 0x2B	; 43
    2120:	79 f0       	breq	.+30     	; 0x2140 <vfprintf+0x84>
    2122:	38 f4       	brcc	.+14     	; 0x2132 <vfprintf+0x76>
    2124:	80 32       	cpi	r24, 0x20	; 32
    2126:	79 f0       	breq	.+30     	; 0x2146 <vfprintf+0x8a>
    2128:	83 32       	cpi	r24, 0x23	; 35
    212a:	a1 f4       	brne	.+40     	; 0x2154 <vfprintf+0x98>
    212c:	23 2d       	mov	r18, r3
    212e:	20 61       	ori	r18, 0x10	; 16
    2130:	1d c0       	rjmp	.+58     	; 0x216c <vfprintf+0xb0>
    2132:	8d 32       	cpi	r24, 0x2D	; 45
    2134:	61 f0       	breq	.+24     	; 0x214e <vfprintf+0x92>
    2136:	80 33       	cpi	r24, 0x30	; 48
    2138:	69 f4       	brne	.+26     	; 0x2154 <vfprintf+0x98>
    213a:	23 2d       	mov	r18, r3
    213c:	21 60       	ori	r18, 0x01	; 1
    213e:	16 c0       	rjmp	.+44     	; 0x216c <vfprintf+0xb0>
    2140:	83 2d       	mov	r24, r3
    2142:	82 60       	ori	r24, 0x02	; 2
    2144:	38 2e       	mov	r3, r24
    2146:	e3 2d       	mov	r30, r3
    2148:	e4 60       	ori	r30, 0x04	; 4
    214a:	3e 2e       	mov	r3, r30
    214c:	2a c0       	rjmp	.+84     	; 0x21a2 <vfprintf+0xe6>
    214e:	f3 2d       	mov	r31, r3
    2150:	f8 60       	ori	r31, 0x08	; 8
    2152:	1d c0       	rjmp	.+58     	; 0x218e <vfprintf+0xd2>
    2154:	37 fc       	sbrc	r3, 7
    2156:	2d c0       	rjmp	.+90     	; 0x21b2 <vfprintf+0xf6>
    2158:	20 ed       	ldi	r18, 0xD0	; 208
    215a:	28 0f       	add	r18, r24
    215c:	2a 30       	cpi	r18, 0x0A	; 10
    215e:	40 f0       	brcs	.+16     	; 0x2170 <vfprintf+0xb4>
    2160:	8e 32       	cpi	r24, 0x2E	; 46
    2162:	b9 f4       	brne	.+46     	; 0x2192 <vfprintf+0xd6>
    2164:	36 fc       	sbrc	r3, 6
    2166:	81 c1       	rjmp	.+770    	; 0x246a <vfprintf+0x3ae>
    2168:	23 2d       	mov	r18, r3
    216a:	20 64       	ori	r18, 0x40	; 64
    216c:	32 2e       	mov	r3, r18
    216e:	19 c0       	rjmp	.+50     	; 0x21a2 <vfprintf+0xe6>
    2170:	36 fe       	sbrs	r3, 6
    2172:	06 c0       	rjmp	.+12     	; 0x2180 <vfprintf+0xc4>
    2174:	8a e0       	ldi	r24, 0x0A	; 10
    2176:	98 9e       	mul	r9, r24
    2178:	20 0d       	add	r18, r0
    217a:	11 24       	eor	r1, r1
    217c:	92 2e       	mov	r9, r18
    217e:	11 c0       	rjmp	.+34     	; 0x21a2 <vfprintf+0xe6>
    2180:	ea e0       	ldi	r30, 0x0A	; 10
    2182:	2e 9e       	mul	r2, r30
    2184:	20 0d       	add	r18, r0
    2186:	11 24       	eor	r1, r1
    2188:	22 2e       	mov	r2, r18
    218a:	f3 2d       	mov	r31, r3
    218c:	f0 62       	ori	r31, 0x20	; 32
    218e:	3f 2e       	mov	r3, r31
    2190:	08 c0       	rjmp	.+16     	; 0x21a2 <vfprintf+0xe6>
    2192:	8c 36       	cpi	r24, 0x6C	; 108
    2194:	21 f4       	brne	.+8      	; 0x219e <vfprintf+0xe2>
    2196:	83 2d       	mov	r24, r3
    2198:	80 68       	ori	r24, 0x80	; 128
    219a:	38 2e       	mov	r3, r24
    219c:	02 c0       	rjmp	.+4      	; 0x21a2 <vfprintf+0xe6>
    219e:	88 36       	cpi	r24, 0x68	; 104
    21a0:	41 f4       	brne	.+16     	; 0x21b2 <vfprintf+0xf6>
    21a2:	f7 01       	movw	r30, r14
    21a4:	93 fd       	sbrc	r25, 3
    21a6:	85 91       	lpm	r24, Z+
    21a8:	93 ff       	sbrs	r25, 3
    21aa:	81 91       	ld	r24, Z+
    21ac:	7f 01       	movw	r14, r30
    21ae:	81 11       	cpse	r24, r1
    21b0:	b3 cf       	rjmp	.-154    	; 0x2118 <vfprintf+0x5c>
    21b2:	98 2f       	mov	r25, r24
    21b4:	9f 7d       	andi	r25, 0xDF	; 223
    21b6:	95 54       	subi	r25, 0x45	; 69
    21b8:	93 30       	cpi	r25, 0x03	; 3
    21ba:	28 f4       	brcc	.+10     	; 0x21c6 <vfprintf+0x10a>
    21bc:	0c 5f       	subi	r16, 0xFC	; 252
    21be:	1f 4f       	sbci	r17, 0xFF	; 255
    21c0:	9f e3       	ldi	r25, 0x3F	; 63
    21c2:	99 83       	std	Y+1, r25	; 0x01
    21c4:	0d c0       	rjmp	.+26     	; 0x21e0 <vfprintf+0x124>
    21c6:	83 36       	cpi	r24, 0x63	; 99
    21c8:	31 f0       	breq	.+12     	; 0x21d6 <vfprintf+0x11a>
    21ca:	83 37       	cpi	r24, 0x73	; 115
    21cc:	71 f0       	breq	.+28     	; 0x21ea <vfprintf+0x12e>
    21ce:	83 35       	cpi	r24, 0x53	; 83
    21d0:	09 f0       	breq	.+2      	; 0x21d4 <vfprintf+0x118>
    21d2:	59 c0       	rjmp	.+178    	; 0x2286 <vfprintf+0x1ca>
    21d4:	21 c0       	rjmp	.+66     	; 0x2218 <vfprintf+0x15c>
    21d6:	f8 01       	movw	r30, r16
    21d8:	80 81       	ld	r24, Z
    21da:	89 83       	std	Y+1, r24	; 0x01
    21dc:	0e 5f       	subi	r16, 0xFE	; 254
    21de:	1f 4f       	sbci	r17, 0xFF	; 255
    21e0:	88 24       	eor	r8, r8
    21e2:	83 94       	inc	r8
    21e4:	91 2c       	mov	r9, r1
    21e6:	53 01       	movw	r10, r6
    21e8:	13 c0       	rjmp	.+38     	; 0x2210 <vfprintf+0x154>
    21ea:	28 01       	movw	r4, r16
    21ec:	f2 e0       	ldi	r31, 0x02	; 2
    21ee:	4f 0e       	add	r4, r31
    21f0:	51 1c       	adc	r5, r1
    21f2:	f8 01       	movw	r30, r16
    21f4:	a0 80       	ld	r10, Z
    21f6:	b1 80       	ldd	r11, Z+1	; 0x01
    21f8:	36 fe       	sbrs	r3, 6
    21fa:	03 c0       	rjmp	.+6      	; 0x2202 <vfprintf+0x146>
    21fc:	69 2d       	mov	r22, r9
    21fe:	70 e0       	ldi	r23, 0x00	; 0
    2200:	02 c0       	rjmp	.+4      	; 0x2206 <vfprintf+0x14a>
    2202:	6f ef       	ldi	r22, 0xFF	; 255
    2204:	7f ef       	ldi	r23, 0xFF	; 255
    2206:	c5 01       	movw	r24, r10
    2208:	0e 94 4a 12 	call	0x2494	; 0x2494 <strnlen>
    220c:	4c 01       	movw	r8, r24
    220e:	82 01       	movw	r16, r4
    2210:	f3 2d       	mov	r31, r3
    2212:	ff 77       	andi	r31, 0x7F	; 127
    2214:	3f 2e       	mov	r3, r31
    2216:	16 c0       	rjmp	.+44     	; 0x2244 <vfprintf+0x188>
    2218:	28 01       	movw	r4, r16
    221a:	22 e0       	ldi	r18, 0x02	; 2
    221c:	42 0e       	add	r4, r18
    221e:	51 1c       	adc	r5, r1
    2220:	f8 01       	movw	r30, r16
    2222:	a0 80       	ld	r10, Z
    2224:	b1 80       	ldd	r11, Z+1	; 0x01
    2226:	36 fe       	sbrs	r3, 6
    2228:	03 c0       	rjmp	.+6      	; 0x2230 <vfprintf+0x174>
    222a:	69 2d       	mov	r22, r9
    222c:	70 e0       	ldi	r23, 0x00	; 0
    222e:	02 c0       	rjmp	.+4      	; 0x2234 <vfprintf+0x178>
    2230:	6f ef       	ldi	r22, 0xFF	; 255
    2232:	7f ef       	ldi	r23, 0xFF	; 255
    2234:	c5 01       	movw	r24, r10
    2236:	0e 94 3f 12 	call	0x247e	; 0x247e <strnlen_P>
    223a:	4c 01       	movw	r8, r24
    223c:	f3 2d       	mov	r31, r3
    223e:	f0 68       	ori	r31, 0x80	; 128
    2240:	3f 2e       	mov	r3, r31
    2242:	82 01       	movw	r16, r4
    2244:	33 fc       	sbrc	r3, 3
    2246:	1b c0       	rjmp	.+54     	; 0x227e <vfprintf+0x1c2>
    2248:	82 2d       	mov	r24, r2
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	88 16       	cp	r8, r24
    224e:	99 06       	cpc	r9, r25
    2250:	b0 f4       	brcc	.+44     	; 0x227e <vfprintf+0x1c2>
    2252:	b6 01       	movw	r22, r12
    2254:	80 e2       	ldi	r24, 0x20	; 32
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	0e 94 55 12 	call	0x24aa	; 0x24aa <fputc>
    225c:	2a 94       	dec	r2
    225e:	f4 cf       	rjmp	.-24     	; 0x2248 <vfprintf+0x18c>
    2260:	f5 01       	movw	r30, r10
    2262:	37 fc       	sbrc	r3, 7
    2264:	85 91       	lpm	r24, Z+
    2266:	37 fe       	sbrs	r3, 7
    2268:	81 91       	ld	r24, Z+
    226a:	5f 01       	movw	r10, r30
    226c:	b6 01       	movw	r22, r12
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	0e 94 55 12 	call	0x24aa	; 0x24aa <fputc>
    2274:	21 10       	cpse	r2, r1
    2276:	2a 94       	dec	r2
    2278:	21 e0       	ldi	r18, 0x01	; 1
    227a:	82 1a       	sub	r8, r18
    227c:	91 08       	sbc	r9, r1
    227e:	81 14       	cp	r8, r1
    2280:	91 04       	cpc	r9, r1
    2282:	71 f7       	brne	.-36     	; 0x2260 <vfprintf+0x1a4>
    2284:	e8 c0       	rjmp	.+464    	; 0x2456 <vfprintf+0x39a>
    2286:	84 36       	cpi	r24, 0x64	; 100
    2288:	11 f0       	breq	.+4      	; 0x228e <vfprintf+0x1d2>
    228a:	89 36       	cpi	r24, 0x69	; 105
    228c:	41 f5       	brne	.+80     	; 0x22de <vfprintf+0x222>
    228e:	f8 01       	movw	r30, r16
    2290:	37 fe       	sbrs	r3, 7
    2292:	07 c0       	rjmp	.+14     	; 0x22a2 <vfprintf+0x1e6>
    2294:	60 81       	ld	r22, Z
    2296:	71 81       	ldd	r23, Z+1	; 0x01
    2298:	82 81       	ldd	r24, Z+2	; 0x02
    229a:	93 81       	ldd	r25, Z+3	; 0x03
    229c:	0c 5f       	subi	r16, 0xFC	; 252
    229e:	1f 4f       	sbci	r17, 0xFF	; 255
    22a0:	08 c0       	rjmp	.+16     	; 0x22b2 <vfprintf+0x1f6>
    22a2:	60 81       	ld	r22, Z
    22a4:	71 81       	ldd	r23, Z+1	; 0x01
    22a6:	07 2e       	mov	r0, r23
    22a8:	00 0c       	add	r0, r0
    22aa:	88 0b       	sbc	r24, r24
    22ac:	99 0b       	sbc	r25, r25
    22ae:	0e 5f       	subi	r16, 0xFE	; 254
    22b0:	1f 4f       	sbci	r17, 0xFF	; 255
    22b2:	f3 2d       	mov	r31, r3
    22b4:	ff 76       	andi	r31, 0x6F	; 111
    22b6:	3f 2e       	mov	r3, r31
    22b8:	97 ff       	sbrs	r25, 7
    22ba:	09 c0       	rjmp	.+18     	; 0x22ce <vfprintf+0x212>
    22bc:	90 95       	com	r25
    22be:	80 95       	com	r24
    22c0:	70 95       	com	r23
    22c2:	61 95       	neg	r22
    22c4:	7f 4f       	sbci	r23, 0xFF	; 255
    22c6:	8f 4f       	sbci	r24, 0xFF	; 255
    22c8:	9f 4f       	sbci	r25, 0xFF	; 255
    22ca:	f0 68       	ori	r31, 0x80	; 128
    22cc:	3f 2e       	mov	r3, r31
    22ce:	2a e0       	ldi	r18, 0x0A	; 10
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	a3 01       	movw	r20, r6
    22d4:	0e 94 91 12 	call	0x2522	; 0x2522 <__ultoa_invert>
    22d8:	88 2e       	mov	r8, r24
    22da:	86 18       	sub	r8, r6
    22dc:	45 c0       	rjmp	.+138    	; 0x2368 <vfprintf+0x2ac>
    22de:	85 37       	cpi	r24, 0x75	; 117
    22e0:	31 f4       	brne	.+12     	; 0x22ee <vfprintf+0x232>
    22e2:	23 2d       	mov	r18, r3
    22e4:	2f 7e       	andi	r18, 0xEF	; 239
    22e6:	b2 2e       	mov	r11, r18
    22e8:	2a e0       	ldi	r18, 0x0A	; 10
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	25 c0       	rjmp	.+74     	; 0x2338 <vfprintf+0x27c>
    22ee:	93 2d       	mov	r25, r3
    22f0:	99 7f       	andi	r25, 0xF9	; 249
    22f2:	b9 2e       	mov	r11, r25
    22f4:	8f 36       	cpi	r24, 0x6F	; 111
    22f6:	c1 f0       	breq	.+48     	; 0x2328 <vfprintf+0x26c>
    22f8:	18 f4       	brcc	.+6      	; 0x2300 <vfprintf+0x244>
    22fa:	88 35       	cpi	r24, 0x58	; 88
    22fc:	79 f0       	breq	.+30     	; 0x231c <vfprintf+0x260>
    22fe:	b5 c0       	rjmp	.+362    	; 0x246a <vfprintf+0x3ae>
    2300:	80 37       	cpi	r24, 0x70	; 112
    2302:	19 f0       	breq	.+6      	; 0x230a <vfprintf+0x24e>
    2304:	88 37       	cpi	r24, 0x78	; 120
    2306:	21 f0       	breq	.+8      	; 0x2310 <vfprintf+0x254>
    2308:	b0 c0       	rjmp	.+352    	; 0x246a <vfprintf+0x3ae>
    230a:	e9 2f       	mov	r30, r25
    230c:	e0 61       	ori	r30, 0x10	; 16
    230e:	be 2e       	mov	r11, r30
    2310:	b4 fe       	sbrs	r11, 4
    2312:	0d c0       	rjmp	.+26     	; 0x232e <vfprintf+0x272>
    2314:	fb 2d       	mov	r31, r11
    2316:	f4 60       	ori	r31, 0x04	; 4
    2318:	bf 2e       	mov	r11, r31
    231a:	09 c0       	rjmp	.+18     	; 0x232e <vfprintf+0x272>
    231c:	34 fe       	sbrs	r3, 4
    231e:	0a c0       	rjmp	.+20     	; 0x2334 <vfprintf+0x278>
    2320:	29 2f       	mov	r18, r25
    2322:	26 60       	ori	r18, 0x06	; 6
    2324:	b2 2e       	mov	r11, r18
    2326:	06 c0       	rjmp	.+12     	; 0x2334 <vfprintf+0x278>
    2328:	28 e0       	ldi	r18, 0x08	; 8
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	05 c0       	rjmp	.+10     	; 0x2338 <vfprintf+0x27c>
    232e:	20 e1       	ldi	r18, 0x10	; 16
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <vfprintf+0x27c>
    2334:	20 e1       	ldi	r18, 0x10	; 16
    2336:	32 e0       	ldi	r19, 0x02	; 2
    2338:	f8 01       	movw	r30, r16
    233a:	b7 fe       	sbrs	r11, 7
    233c:	07 c0       	rjmp	.+14     	; 0x234c <vfprintf+0x290>
    233e:	60 81       	ld	r22, Z
    2340:	71 81       	ldd	r23, Z+1	; 0x01
    2342:	82 81       	ldd	r24, Z+2	; 0x02
    2344:	93 81       	ldd	r25, Z+3	; 0x03
    2346:	0c 5f       	subi	r16, 0xFC	; 252
    2348:	1f 4f       	sbci	r17, 0xFF	; 255
    234a:	06 c0       	rjmp	.+12     	; 0x2358 <vfprintf+0x29c>
    234c:	60 81       	ld	r22, Z
    234e:	71 81       	ldd	r23, Z+1	; 0x01
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	0e 5f       	subi	r16, 0xFE	; 254
    2356:	1f 4f       	sbci	r17, 0xFF	; 255
    2358:	a3 01       	movw	r20, r6
    235a:	0e 94 91 12 	call	0x2522	; 0x2522 <__ultoa_invert>
    235e:	88 2e       	mov	r8, r24
    2360:	86 18       	sub	r8, r6
    2362:	fb 2d       	mov	r31, r11
    2364:	ff 77       	andi	r31, 0x7F	; 127
    2366:	3f 2e       	mov	r3, r31
    2368:	36 fe       	sbrs	r3, 6
    236a:	0d c0       	rjmp	.+26     	; 0x2386 <vfprintf+0x2ca>
    236c:	23 2d       	mov	r18, r3
    236e:	2e 7f       	andi	r18, 0xFE	; 254
    2370:	a2 2e       	mov	r10, r18
    2372:	89 14       	cp	r8, r9
    2374:	58 f4       	brcc	.+22     	; 0x238c <vfprintf+0x2d0>
    2376:	34 fe       	sbrs	r3, 4
    2378:	0b c0       	rjmp	.+22     	; 0x2390 <vfprintf+0x2d4>
    237a:	32 fc       	sbrc	r3, 2
    237c:	09 c0       	rjmp	.+18     	; 0x2390 <vfprintf+0x2d4>
    237e:	83 2d       	mov	r24, r3
    2380:	8e 7e       	andi	r24, 0xEE	; 238
    2382:	a8 2e       	mov	r10, r24
    2384:	05 c0       	rjmp	.+10     	; 0x2390 <vfprintf+0x2d4>
    2386:	b8 2c       	mov	r11, r8
    2388:	a3 2c       	mov	r10, r3
    238a:	03 c0       	rjmp	.+6      	; 0x2392 <vfprintf+0x2d6>
    238c:	b8 2c       	mov	r11, r8
    238e:	01 c0       	rjmp	.+2      	; 0x2392 <vfprintf+0x2d6>
    2390:	b9 2c       	mov	r11, r9
    2392:	a4 fe       	sbrs	r10, 4
    2394:	0f c0       	rjmp	.+30     	; 0x23b4 <vfprintf+0x2f8>
    2396:	fe 01       	movw	r30, r28
    2398:	e8 0d       	add	r30, r8
    239a:	f1 1d       	adc	r31, r1
    239c:	80 81       	ld	r24, Z
    239e:	80 33       	cpi	r24, 0x30	; 48
    23a0:	21 f4       	brne	.+8      	; 0x23aa <vfprintf+0x2ee>
    23a2:	9a 2d       	mov	r25, r10
    23a4:	99 7e       	andi	r25, 0xE9	; 233
    23a6:	a9 2e       	mov	r10, r25
    23a8:	09 c0       	rjmp	.+18     	; 0x23bc <vfprintf+0x300>
    23aa:	a2 fe       	sbrs	r10, 2
    23ac:	06 c0       	rjmp	.+12     	; 0x23ba <vfprintf+0x2fe>
    23ae:	b3 94       	inc	r11
    23b0:	b3 94       	inc	r11
    23b2:	04 c0       	rjmp	.+8      	; 0x23bc <vfprintf+0x300>
    23b4:	8a 2d       	mov	r24, r10
    23b6:	86 78       	andi	r24, 0x86	; 134
    23b8:	09 f0       	breq	.+2      	; 0x23bc <vfprintf+0x300>
    23ba:	b3 94       	inc	r11
    23bc:	a3 fc       	sbrc	r10, 3
    23be:	11 c0       	rjmp	.+34     	; 0x23e2 <vfprintf+0x326>
    23c0:	a0 fe       	sbrs	r10, 0
    23c2:	06 c0       	rjmp	.+12     	; 0x23d0 <vfprintf+0x314>
    23c4:	b2 14       	cp	r11, r2
    23c6:	88 f4       	brcc	.+34     	; 0x23ea <vfprintf+0x32e>
    23c8:	28 0c       	add	r2, r8
    23ca:	92 2c       	mov	r9, r2
    23cc:	9b 18       	sub	r9, r11
    23ce:	0e c0       	rjmp	.+28     	; 0x23ec <vfprintf+0x330>
    23d0:	b2 14       	cp	r11, r2
    23d2:	60 f4       	brcc	.+24     	; 0x23ec <vfprintf+0x330>
    23d4:	b6 01       	movw	r22, r12
    23d6:	80 e2       	ldi	r24, 0x20	; 32
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	0e 94 55 12 	call	0x24aa	; 0x24aa <fputc>
    23de:	b3 94       	inc	r11
    23e0:	f7 cf       	rjmp	.-18     	; 0x23d0 <vfprintf+0x314>
    23e2:	b2 14       	cp	r11, r2
    23e4:	18 f4       	brcc	.+6      	; 0x23ec <vfprintf+0x330>
    23e6:	2b 18       	sub	r2, r11
    23e8:	02 c0       	rjmp	.+4      	; 0x23ee <vfprintf+0x332>
    23ea:	98 2c       	mov	r9, r8
    23ec:	21 2c       	mov	r2, r1
    23ee:	a4 fe       	sbrs	r10, 4
    23f0:	10 c0       	rjmp	.+32     	; 0x2412 <vfprintf+0x356>
    23f2:	b6 01       	movw	r22, r12
    23f4:	80 e3       	ldi	r24, 0x30	; 48
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	0e 94 55 12 	call	0x24aa	; 0x24aa <fputc>
    23fc:	a2 fe       	sbrs	r10, 2
    23fe:	17 c0       	rjmp	.+46     	; 0x242e <vfprintf+0x372>
    2400:	a1 fc       	sbrc	r10, 1
    2402:	03 c0       	rjmp	.+6      	; 0x240a <vfprintf+0x34e>
    2404:	88 e7       	ldi	r24, 0x78	; 120
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	02 c0       	rjmp	.+4      	; 0x240e <vfprintf+0x352>
    240a:	88 e5       	ldi	r24, 0x58	; 88
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	b6 01       	movw	r22, r12
    2410:	0c c0       	rjmp	.+24     	; 0x242a <vfprintf+0x36e>
    2412:	8a 2d       	mov	r24, r10
    2414:	86 78       	andi	r24, 0x86	; 134
    2416:	59 f0       	breq	.+22     	; 0x242e <vfprintf+0x372>
    2418:	a1 fe       	sbrs	r10, 1
    241a:	02 c0       	rjmp	.+4      	; 0x2420 <vfprintf+0x364>
    241c:	8b e2       	ldi	r24, 0x2B	; 43
    241e:	01 c0       	rjmp	.+2      	; 0x2422 <vfprintf+0x366>
    2420:	80 e2       	ldi	r24, 0x20	; 32
    2422:	a7 fc       	sbrc	r10, 7
    2424:	8d e2       	ldi	r24, 0x2D	; 45
    2426:	b6 01       	movw	r22, r12
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	0e 94 55 12 	call	0x24aa	; 0x24aa <fputc>
    242e:	89 14       	cp	r8, r9
    2430:	38 f4       	brcc	.+14     	; 0x2440 <vfprintf+0x384>
    2432:	b6 01       	movw	r22, r12
    2434:	80 e3       	ldi	r24, 0x30	; 48
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	0e 94 55 12 	call	0x24aa	; 0x24aa <fputc>
    243c:	9a 94       	dec	r9
    243e:	f7 cf       	rjmp	.-18     	; 0x242e <vfprintf+0x372>
    2440:	8a 94       	dec	r8
    2442:	f3 01       	movw	r30, r6
    2444:	e8 0d       	add	r30, r8
    2446:	f1 1d       	adc	r31, r1
    2448:	80 81       	ld	r24, Z
    244a:	b6 01       	movw	r22, r12
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	0e 94 55 12 	call	0x24aa	; 0x24aa <fputc>
    2452:	81 10       	cpse	r8, r1
    2454:	f5 cf       	rjmp	.-22     	; 0x2440 <vfprintf+0x384>
    2456:	22 20       	and	r2, r2
    2458:	09 f4       	brne	.+2      	; 0x245c <vfprintf+0x3a0>
    245a:	42 ce       	rjmp	.-892    	; 0x20e0 <vfprintf+0x24>
    245c:	b6 01       	movw	r22, r12
    245e:	80 e2       	ldi	r24, 0x20	; 32
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	0e 94 55 12 	call	0x24aa	; 0x24aa <fputc>
    2466:	2a 94       	dec	r2
    2468:	f6 cf       	rjmp	.-20     	; 0x2456 <vfprintf+0x39a>
    246a:	f6 01       	movw	r30, r12
    246c:	86 81       	ldd	r24, Z+6	; 0x06
    246e:	97 81       	ldd	r25, Z+7	; 0x07
    2470:	02 c0       	rjmp	.+4      	; 0x2476 <vfprintf+0x3ba>
    2472:	8f ef       	ldi	r24, 0xFF	; 255
    2474:	9f ef       	ldi	r25, 0xFF	; 255
    2476:	2b 96       	adiw	r28, 0x0b	; 11
    2478:	e2 e1       	ldi	r30, 0x12	; 18
    247a:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <__epilogue_restores__>

0000247e <strnlen_P>:
    247e:	fc 01       	movw	r30, r24
    2480:	05 90       	lpm	r0, Z+
    2482:	61 50       	subi	r22, 0x01	; 1
    2484:	70 40       	sbci	r23, 0x00	; 0
    2486:	01 10       	cpse	r0, r1
    2488:	d8 f7       	brcc	.-10     	; 0x2480 <strnlen_P+0x2>
    248a:	80 95       	com	r24
    248c:	90 95       	com	r25
    248e:	8e 0f       	add	r24, r30
    2490:	9f 1f       	adc	r25, r31
    2492:	08 95       	ret

00002494 <strnlen>:
    2494:	fc 01       	movw	r30, r24
    2496:	61 50       	subi	r22, 0x01	; 1
    2498:	70 40       	sbci	r23, 0x00	; 0
    249a:	01 90       	ld	r0, Z+
    249c:	01 10       	cpse	r0, r1
    249e:	d8 f7       	brcc	.-10     	; 0x2496 <strnlen+0x2>
    24a0:	80 95       	com	r24
    24a2:	90 95       	com	r25
    24a4:	8e 0f       	add	r24, r30
    24a6:	9f 1f       	adc	r25, r31
    24a8:	08 95       	ret

000024aa <fputc>:
    24aa:	0f 93       	push	r16
    24ac:	1f 93       	push	r17
    24ae:	cf 93       	push	r28
    24b0:	df 93       	push	r29
    24b2:	fb 01       	movw	r30, r22
    24b4:	23 81       	ldd	r18, Z+3	; 0x03
    24b6:	21 fd       	sbrc	r18, 1
    24b8:	03 c0       	rjmp	.+6      	; 0x24c0 <fputc+0x16>
    24ba:	8f ef       	ldi	r24, 0xFF	; 255
    24bc:	9f ef       	ldi	r25, 0xFF	; 255
    24be:	2c c0       	rjmp	.+88     	; 0x2518 <fputc+0x6e>
    24c0:	22 ff       	sbrs	r18, 2
    24c2:	16 c0       	rjmp	.+44     	; 0x24f0 <fputc+0x46>
    24c4:	46 81       	ldd	r20, Z+6	; 0x06
    24c6:	57 81       	ldd	r21, Z+7	; 0x07
    24c8:	24 81       	ldd	r18, Z+4	; 0x04
    24ca:	35 81       	ldd	r19, Z+5	; 0x05
    24cc:	42 17       	cp	r20, r18
    24ce:	53 07       	cpc	r21, r19
    24d0:	44 f4       	brge	.+16     	; 0x24e2 <fputc+0x38>
    24d2:	a0 81       	ld	r26, Z
    24d4:	b1 81       	ldd	r27, Z+1	; 0x01
    24d6:	9d 01       	movw	r18, r26
    24d8:	2f 5f       	subi	r18, 0xFF	; 255
    24da:	3f 4f       	sbci	r19, 0xFF	; 255
    24dc:	31 83       	std	Z+1, r19	; 0x01
    24de:	20 83       	st	Z, r18
    24e0:	8c 93       	st	X, r24
    24e2:	26 81       	ldd	r18, Z+6	; 0x06
    24e4:	37 81       	ldd	r19, Z+7	; 0x07
    24e6:	2f 5f       	subi	r18, 0xFF	; 255
    24e8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ea:	37 83       	std	Z+7, r19	; 0x07
    24ec:	26 83       	std	Z+6, r18	; 0x06
    24ee:	14 c0       	rjmp	.+40     	; 0x2518 <fputc+0x6e>
    24f0:	8b 01       	movw	r16, r22
    24f2:	ec 01       	movw	r28, r24
    24f4:	fb 01       	movw	r30, r22
    24f6:	00 84       	ldd	r0, Z+8	; 0x08
    24f8:	f1 85       	ldd	r31, Z+9	; 0x09
    24fa:	e0 2d       	mov	r30, r0
    24fc:	09 95       	icall
    24fe:	89 2b       	or	r24, r25
    2500:	e1 f6       	brne	.-72     	; 0x24ba <fputc+0x10>
    2502:	d8 01       	movw	r26, r16
    2504:	16 96       	adiw	r26, 0x06	; 6
    2506:	8d 91       	ld	r24, X+
    2508:	9c 91       	ld	r25, X
    250a:	17 97       	sbiw	r26, 0x07	; 7
    250c:	01 96       	adiw	r24, 0x01	; 1
    250e:	17 96       	adiw	r26, 0x07	; 7
    2510:	9c 93       	st	X, r25
    2512:	8e 93       	st	-X, r24
    2514:	16 97       	sbiw	r26, 0x06	; 6
    2516:	ce 01       	movw	r24, r28
    2518:	df 91       	pop	r29
    251a:	cf 91       	pop	r28
    251c:	1f 91       	pop	r17
    251e:	0f 91       	pop	r16
    2520:	08 95       	ret

00002522 <__ultoa_invert>:
    2522:	fa 01       	movw	r30, r20
    2524:	aa 27       	eor	r26, r26
    2526:	28 30       	cpi	r18, 0x08	; 8
    2528:	51 f1       	breq	.+84     	; 0x257e <__ultoa_invert+0x5c>
    252a:	20 31       	cpi	r18, 0x10	; 16
    252c:	81 f1       	breq	.+96     	; 0x258e <__ultoa_invert+0x6c>
    252e:	e8 94       	clt
    2530:	6f 93       	push	r22
    2532:	6e 7f       	andi	r22, 0xFE	; 254
    2534:	6e 5f       	subi	r22, 0xFE	; 254
    2536:	7f 4f       	sbci	r23, 0xFF	; 255
    2538:	8f 4f       	sbci	r24, 0xFF	; 255
    253a:	9f 4f       	sbci	r25, 0xFF	; 255
    253c:	af 4f       	sbci	r26, 0xFF	; 255
    253e:	b1 e0       	ldi	r27, 0x01	; 1
    2540:	3e d0       	rcall	.+124    	; 0x25be <__ultoa_invert+0x9c>
    2542:	b4 e0       	ldi	r27, 0x04	; 4
    2544:	3c d0       	rcall	.+120    	; 0x25be <__ultoa_invert+0x9c>
    2546:	67 0f       	add	r22, r23
    2548:	78 1f       	adc	r23, r24
    254a:	89 1f       	adc	r24, r25
    254c:	9a 1f       	adc	r25, r26
    254e:	a1 1d       	adc	r26, r1
    2550:	68 0f       	add	r22, r24
    2552:	79 1f       	adc	r23, r25
    2554:	8a 1f       	adc	r24, r26
    2556:	91 1d       	adc	r25, r1
    2558:	a1 1d       	adc	r26, r1
    255a:	6a 0f       	add	r22, r26
    255c:	71 1d       	adc	r23, r1
    255e:	81 1d       	adc	r24, r1
    2560:	91 1d       	adc	r25, r1
    2562:	a1 1d       	adc	r26, r1
    2564:	20 d0       	rcall	.+64     	; 0x25a6 <__ultoa_invert+0x84>
    2566:	09 f4       	brne	.+2      	; 0x256a <__ultoa_invert+0x48>
    2568:	68 94       	set
    256a:	3f 91       	pop	r19
    256c:	2a e0       	ldi	r18, 0x0A	; 10
    256e:	26 9f       	mul	r18, r22
    2570:	11 24       	eor	r1, r1
    2572:	30 19       	sub	r19, r0
    2574:	30 5d       	subi	r19, 0xD0	; 208
    2576:	31 93       	st	Z+, r19
    2578:	de f6       	brtc	.-74     	; 0x2530 <__ultoa_invert+0xe>
    257a:	cf 01       	movw	r24, r30
    257c:	08 95       	ret
    257e:	46 2f       	mov	r20, r22
    2580:	47 70       	andi	r20, 0x07	; 7
    2582:	40 5d       	subi	r20, 0xD0	; 208
    2584:	41 93       	st	Z+, r20
    2586:	b3 e0       	ldi	r27, 0x03	; 3
    2588:	0f d0       	rcall	.+30     	; 0x25a8 <__ultoa_invert+0x86>
    258a:	c9 f7       	brne	.-14     	; 0x257e <__ultoa_invert+0x5c>
    258c:	f6 cf       	rjmp	.-20     	; 0x257a <__ultoa_invert+0x58>
    258e:	46 2f       	mov	r20, r22
    2590:	4f 70       	andi	r20, 0x0F	; 15
    2592:	40 5d       	subi	r20, 0xD0	; 208
    2594:	4a 33       	cpi	r20, 0x3A	; 58
    2596:	18 f0       	brcs	.+6      	; 0x259e <__ultoa_invert+0x7c>
    2598:	49 5d       	subi	r20, 0xD9	; 217
    259a:	31 fd       	sbrc	r19, 1
    259c:	40 52       	subi	r20, 0x20	; 32
    259e:	41 93       	st	Z+, r20
    25a0:	02 d0       	rcall	.+4      	; 0x25a6 <__ultoa_invert+0x84>
    25a2:	a9 f7       	brne	.-22     	; 0x258e <__ultoa_invert+0x6c>
    25a4:	ea cf       	rjmp	.-44     	; 0x257a <__ultoa_invert+0x58>
    25a6:	b4 e0       	ldi	r27, 0x04	; 4
    25a8:	a6 95       	lsr	r26
    25aa:	97 95       	ror	r25
    25ac:	87 95       	ror	r24
    25ae:	77 95       	ror	r23
    25b0:	67 95       	ror	r22
    25b2:	ba 95       	dec	r27
    25b4:	c9 f7       	brne	.-14     	; 0x25a8 <__ultoa_invert+0x86>
    25b6:	00 97       	sbiw	r24, 0x00	; 0
    25b8:	61 05       	cpc	r22, r1
    25ba:	71 05       	cpc	r23, r1
    25bc:	08 95       	ret
    25be:	9b 01       	movw	r18, r22
    25c0:	ac 01       	movw	r20, r24
    25c2:	0a 2e       	mov	r0, r26
    25c4:	06 94       	lsr	r0
    25c6:	57 95       	ror	r21
    25c8:	47 95       	ror	r20
    25ca:	37 95       	ror	r19
    25cc:	27 95       	ror	r18
    25ce:	ba 95       	dec	r27
    25d0:	c9 f7       	brne	.-14     	; 0x25c4 <__ultoa_invert+0xa2>
    25d2:	62 0f       	add	r22, r18
    25d4:	73 1f       	adc	r23, r19
    25d6:	84 1f       	adc	r24, r20
    25d8:	95 1f       	adc	r25, r21
    25da:	a0 1d       	adc	r26, r0
    25dc:	08 95       	ret

000025de <__prologue_saves__>:
    25de:	2f 92       	push	r2
    25e0:	3f 92       	push	r3
    25e2:	4f 92       	push	r4
    25e4:	5f 92       	push	r5
    25e6:	6f 92       	push	r6
    25e8:	7f 92       	push	r7
    25ea:	8f 92       	push	r8
    25ec:	9f 92       	push	r9
    25ee:	af 92       	push	r10
    25f0:	bf 92       	push	r11
    25f2:	cf 92       	push	r12
    25f4:	df 92       	push	r13
    25f6:	ef 92       	push	r14
    25f8:	ff 92       	push	r15
    25fa:	0f 93       	push	r16
    25fc:	1f 93       	push	r17
    25fe:	cf 93       	push	r28
    2600:	df 93       	push	r29
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
    2606:	ca 1b       	sub	r28, r26
    2608:	db 0b       	sbc	r29, r27
    260a:	0f b6       	in	r0, 0x3f	; 63
    260c:	f8 94       	cli
    260e:	de bf       	out	0x3e, r29	; 62
    2610:	0f be       	out	0x3f, r0	; 63
    2612:	cd bf       	out	0x3d, r28	; 61
    2614:	09 94       	ijmp

00002616 <__epilogue_restores__>:
    2616:	2a 88       	ldd	r2, Y+18	; 0x12
    2618:	39 88       	ldd	r3, Y+17	; 0x11
    261a:	48 88       	ldd	r4, Y+16	; 0x10
    261c:	5f 84       	ldd	r5, Y+15	; 0x0f
    261e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2620:	7d 84       	ldd	r7, Y+13	; 0x0d
    2622:	8c 84       	ldd	r8, Y+12	; 0x0c
    2624:	9b 84       	ldd	r9, Y+11	; 0x0b
    2626:	aa 84       	ldd	r10, Y+10	; 0x0a
    2628:	b9 84       	ldd	r11, Y+9	; 0x09
    262a:	c8 84       	ldd	r12, Y+8	; 0x08
    262c:	df 80       	ldd	r13, Y+7	; 0x07
    262e:	ee 80       	ldd	r14, Y+6	; 0x06
    2630:	fd 80       	ldd	r15, Y+5	; 0x05
    2632:	0c 81       	ldd	r16, Y+4	; 0x04
    2634:	1b 81       	ldd	r17, Y+3	; 0x03
    2636:	aa 81       	ldd	r26, Y+2	; 0x02
    2638:	b9 81       	ldd	r27, Y+1	; 0x01
    263a:	ce 0f       	add	r28, r30
    263c:	d1 1d       	adc	r29, r1
    263e:	0f b6       	in	r0, 0x3f	; 63
    2640:	f8 94       	cli
    2642:	de bf       	out	0x3e, r29	; 62
    2644:	0f be       	out	0x3f, r0	; 63
    2646:	cd bf       	out	0x3d, r28	; 61
    2648:	ed 01       	movw	r28, r26
    264a:	08 95       	ret

0000264c <_exit>:
    264c:	f8 94       	cli

0000264e <__stop_program>:
    264e:	ff cf       	rjmp	.-2      	; 0x264e <__stop_program>
