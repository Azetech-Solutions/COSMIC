
COSMIC-IoT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003a8  00800060  00002e5e  00002ef2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000039d  00800408  00800408  0000329a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000329a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000032f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004d0  00000000  00000000  00003334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000072db  00000000  00000000  00003804  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000221f  00000000  00000000  0000aadf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003ef3  00000000  00000000  0000ccfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b0c  00000000  00000000  00010bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001f7e  00000000  00000000  00011700  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003d7b  00000000  00000000  0001367e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000588  00000000  00000000  000173f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 42 00 	jmp	0x84	; 0x84 <__ctors_end>
       4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_9>
      28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      34:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_13>
      38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      54:	e8 09       	sbc	r30, r8
      56:	1e 0a       	sbc	r1, r30
      58:	fc 0a       	sbc	r15, r28
      5a:	29 0b       	sbc	r18, r25
      5c:	fb 0b       	sbc	r31, r27
      5e:	5a 0a       	sbc	r5, r26
      60:	90 0a       	sbc	r9, r16
      62:	c6 0a       	sbc	r12, r22
      64:	c4 0b       	sbc	r28, r20
      66:	28 0c       	add	r2, r8
      68:	5b 0b       	sbc	r21, r27
      6a:	8e 0b       	sbc	r24, r30
      6c:	f2 0c       	add	r15, r2
      6e:	36 0d       	add	r19, r6
      70:	82 0d       	add	r24, r2
      72:	ce 0d       	add	r28, r14
      74:	04 0e       	add	r0, r20
      76:	3a 0e       	add	r3, r26
      78:	6d 0e       	add	r6, r29
      7a:	77 0e       	add	r7, r23
      7c:	ad 0e       	add	r10, r29
      7e:	e3 0e       	add	r14, r19
      80:	05 0f       	add	r16, r21
      82:	0f 0f       	add	r16, r31

00000084 <__ctors_end>:
      84:	11 24       	eor	r1, r1
      86:	1f be       	out	0x3f, r1	; 63
      88:	cf e5       	ldi	r28, 0x5F	; 95
      8a:	d8 e0       	ldi	r29, 0x08	; 8
      8c:	de bf       	out	0x3e, r29	; 62
      8e:	cd bf       	out	0x3d, r28	; 61

00000090 <__do_copy_data>:
      90:	14 e0       	ldi	r17, 0x04	; 4
      92:	a0 e6       	ldi	r26, 0x60	; 96
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	ee e5       	ldi	r30, 0x5E	; 94
      98:	fe e2       	ldi	r31, 0x2E	; 46
      9a:	02 c0       	rjmp	.+4      	; 0xa0 <__do_copy_data+0x10>
      9c:	05 90       	lpm	r0, Z+
      9e:	0d 92       	st	X+, r0
      a0:	a8 30       	cpi	r26, 0x08	; 8
      a2:	b1 07       	cpc	r27, r17
      a4:	d9 f7       	brne	.-10     	; 0x9c <__do_copy_data+0xc>

000000a6 <__do_clear_bss>:
      a6:	27 e0       	ldi	r18, 0x07	; 7
      a8:	a8 e0       	ldi	r26, 0x08	; 8
      aa:	b4 e0       	ldi	r27, 0x04	; 4
      ac:	01 c0       	rjmp	.+2      	; 0xb0 <.do_clear_bss_start>

000000ae <.do_clear_bss_loop>:
      ae:	1d 92       	st	X+, r1

000000b0 <.do_clear_bss_start>:
      b0:	a5 3a       	cpi	r26, 0xA5	; 165
      b2:	b2 07       	cpc	r27, r18
      b4:	e1 f7       	brne	.-8      	; 0xae <.do_clear_bss_loop>
      b6:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <main>
      ba:	0c 94 2d 17 	jmp	0x2e5a	; 0x2e5a <_exit>

000000be <__bad_interrupt>:
      be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <TIM1_Init>:


void TIM1_Init(void)
{
	/* Initialize TIMER1 to use the overflow ISR */
	TCCR1B =  PRESCALER_8;
      c2:	82 e0       	ldi	r24, 0x02	; 2
      c4:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << TOIE1);
      c6:	89 b7       	in	r24, 0x39	; 57
      c8:	84 60       	ori	r24, 0x04	; 4
      ca:	89 bf       	out	0x39, r24	; 57
	TCNT1 = 15535;
      cc:	8f ea       	ldi	r24, 0xAF	; 175
      ce:	9c e3       	ldi	r25, 0x3C	; 60
      d0:	9d bd       	out	0x2d, r25	; 45
      d2:	8c bd       	out	0x2c, r24	; 44
	sei();
      d4:	78 94       	sei
      d6:	08 95       	ret

000000d8 <__vector_9>:
	return;
}

ISR(TIMER1_OVF_vect)
{ 
      d8:	1f 92       	push	r1
      da:	0f 92       	push	r0
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	0f 92       	push	r0
      e0:	11 24       	eor	r1, r1
      e2:	2f 93       	push	r18
      e4:	3f 93       	push	r19
      e6:	4f 93       	push	r20
      e8:	5f 93       	push	r21
      ea:	6f 93       	push	r22
      ec:	7f 93       	push	r23
      ee:	8f 93       	push	r24
      f0:	9f 93       	push	r25
      f2:	af 93       	push	r26
      f4:	bf 93       	push	r27
      f6:	ef 93       	push	r30
      f8:	ff 93       	push	r31
	TCNT1 = 15535;
      fa:	8f ea       	ldi	r24, 0xAF	; 175
      fc:	9c e3       	ldi	r25, 0x3C	; 60
      fe:	9d bd       	out	0x2d, r25	; 45
     100:	8c bd       	out	0x2c, r24	; 44
	FUN_SYS_Timer_x1();
     102:	0e 94 ad 0c 	call	0x195a	; 0x195a <FUN_SYS_Timer_x1>

     106:	ff 91       	pop	r31
     108:	ef 91       	pop	r30
     10a:	bf 91       	pop	r27
     10c:	af 91       	pop	r26
     10e:	9f 91       	pop	r25
     110:	8f 91       	pop	r24
     112:	7f 91       	pop	r23
     114:	6f 91       	pop	r22
     116:	5f 91       	pop	r21
     118:	4f 91       	pop	r20
     11a:	3f 91       	pop	r19
     11c:	2f 91       	pop	r18
     11e:	0f 90       	pop	r0
     120:	0f be       	out	0x3f, r0	; 63
     122:	0f 90       	pop	r0
     124:	1f 90       	pop	r1
     126:	18 95       	reti

00000128 <UART_init>:
unsigned char uart_rx()
{
	while ( !(UCSRA & (1<<RXC)) );
	unsigned char a=UDR;
	return a;
}
     128:	10 bc       	out	0x20, r1	; 32
     12a:	8c e0       	ldi	r24, 0x0C	; 12
     12c:	89 b9       	out	0x09, r24	; 9
     12e:	88 e1       	ldi	r24, 0x18	; 24
     130:	8a b9       	out	0x0a, r24	; 10
     132:	8e e8       	ldi	r24, 0x8E	; 142
     134:	80 bd       	out	0x20, r24	; 32
     136:	8a b1       	in	r24, 0x0a	; 10
     138:	80 68       	ori	r24, 0x80	; 128
     13a:	8a b9       	out	0x0a, r24	; 10
     13c:	8b b1       	in	r24, 0x0b	; 11
     13e:	82 60       	ori	r24, 0x02	; 2
     140:	8b b9       	out	0x0b, r24	; 11
     142:	78 94       	sei
     144:	08 95       	ret

00000146 <SIM_Send_Data>:
     146:	5d 9b       	sbis	0x0b, 5	; 11
     148:	fe cf       	rjmp	.-4      	; 0x146 <SIM_Send_Data>
     14a:	8c b9       	out	0x0c, r24	; 12
     14c:	08 95       	ret

0000014e <__vector_13>:



ISR(USART_RXC_vect)
{
     14e:	1f 92       	push	r1
     150:	0f 92       	push	r0
     152:	0f b6       	in	r0, 0x3f	; 63
     154:	0f 92       	push	r0
     156:	11 24       	eor	r1, r1
     158:	2f 93       	push	r18
     15a:	3f 93       	push	r19
     15c:	4f 93       	push	r20
     15e:	5f 93       	push	r21
     160:	6f 93       	push	r22
     162:	7f 93       	push	r23
     164:	8f 93       	push	r24
     166:	9f 93       	push	r25
     168:	af 93       	push	r26
     16a:	bf 93       	push	r27
     16c:	ef 93       	push	r30
     16e:	ff 93       	push	r31
	
	unsigned char d = UDR;
     170:	8c b1       	in	r24, 0x0c	; 12
	SIMCOM_Data_Read(d);
     172:	0e 94 a0 07 	call	0xf40	; 0xf40 <SIMCOM_Data_Read>

     176:	ff 91       	pop	r31
     178:	ef 91       	pop	r30
     17a:	bf 91       	pop	r27
     17c:	af 91       	pop	r26
     17e:	9f 91       	pop	r25
     180:	8f 91       	pop	r24
     182:	7f 91       	pop	r23
     184:	6f 91       	pop	r22
     186:	5f 91       	pop	r21
     188:	4f 91       	pop	r20
     18a:	3f 91       	pop	r19
     18c:	2f 91       	pop	r18
     18e:	0f 90       	pop	r0
     190:	0f be       	out	0x3f, r0	; 63
     192:	0f 90       	pop	r0
     194:	1f 90       	pop	r1
     196:	18 95       	reti

00000198 <ComIf_ErrorNotify>:
    
    return handle;
}

void ComIf_ErrorNotify(ComIf_ChannelConfigType * Channel, ULONG Debug0, ULONG Debug1)
{
     198:	0f 93       	push	r16
     19a:	1f 93       	push	r17
	if(Channel->ErrorCallback != NULL)
     19c:	dc 01       	movw	r26, r24
     19e:	12 96       	adiw	r26, 0x02	; 2
     1a0:	ed 91       	ld	r30, X+
     1a2:	fc 91       	ld	r31, X
     1a4:	13 97       	sbiw	r26, 0x03	; 3
     1a6:	30 97       	sbiw	r30, 0x00	; 0
     1a8:	29 f0       	breq	.+10     	; 0x1b4 <ComIf_ErrorNotify+0x1c>
     1aa:	cb 01       	movw	r24, r22
     1ac:	ba 01       	movw	r22, r20
	{
		Channel->ErrorCallback(Debug0, Debug1);
     1ae:	a9 01       	movw	r20, r18
     1b0:	98 01       	movw	r18, r16
     1b2:	09 95       	icall
	}
}
     1b4:	1f 91       	pop	r17
     1b6:	0f 91       	pop	r16
     1b8:	08 95       	ret

000001ba <ComIf_GetChecksumMaskValue>:
	return Checksum;
}


ULONG ComIf_GetChecksumMaskValue(UBYTE ChecksumLength)
{
     1ba:	28 2f       	mov	r18, r24
	ULONG Mask = 0xFF; // Default 1 Byte Checksum Mask

	if(ChecksumLength > COMIF_MAX_SUPPORTED_CHKLEN)
     1bc:	82 30       	cpi	r24, 0x02	; 2
     1be:	08 f0       	brcs	.+2      	; 0x1c2 <ComIf_GetChecksumMaskValue+0x8>
	{
		ChecksumLength = COMIF_MAX_SUPPORTED_CHKLEN;
     1c0:	21 e0       	ldi	r18, 0x01	; 1
     1c2:	6f ef       	ldi	r22, 0xFF	; 255
     1c4:	70 e0       	ldi	r23, 0x00	; 0
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	07 c0       	rjmp	.+14     	; 0x1da <ComIf_GetChecksumMaskValue+0x20>
	}

    while(--ChecksumLength)
    {
        Mask <<= 8;
     1cc:	b8 2f       	mov	r27, r24
     1ce:	a7 2f       	mov	r26, r23
     1d0:	96 2f       	mov	r25, r22
     1d2:	88 27       	eor	r24, r24
        Mask |= 0xFF;
     1d4:	bc 01       	movw	r22, r24
     1d6:	cd 01       	movw	r24, r26
     1d8:	6f 6f       	ori	r22, 0xFF	; 255
	if(ChecksumLength > COMIF_MAX_SUPPORTED_CHKLEN)
	{
		ChecksumLength = COMIF_MAX_SUPPORTED_CHKLEN;
	}

    while(--ChecksumLength)
     1da:	21 50       	subi	r18, 0x01	; 1
     1dc:	b9 f7       	brne	.-18     	; 0x1cc <ComIf_GetChecksumMaskValue+0x12>
        Mask <<= 8;
        Mask |= 0xFF;
    }
    
	return Mask;
}
     1de:	08 95       	ret

000001e0 <ComIf_EncodeFromShadowToChannelBuffer>:
}



UBYTE ComIf_EncodeFromShadowToChannelBuffer(UBYTE ChannelIndex, UBYTE MsgIndex, UBYTE Length, UWORD * OutLength, UBYTE * OutBuffer, UWORD BoundLimit)
{
     1e0:	2f 92       	push	r2
     1e2:	3f 92       	push	r3
     1e4:	4f 92       	push	r4
     1e6:	5f 92       	push	r5
     1e8:	6f 92       	push	r6
     1ea:	7f 92       	push	r7
     1ec:	8f 92       	push	r8
     1ee:	9f 92       	push	r9
     1f0:	af 92       	push	r10
     1f2:	bf 92       	push	r11
     1f4:	cf 92       	push	r12
     1f6:	df 92       	push	r13
     1f8:	ef 92       	push	r14
     1fa:	ff 92       	push	r15
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	00 d0       	rcall	.+0      	; 0x206 <ComIf_EncodeFromShadowToChannelBuffer+0x26>
     206:	00 d0       	rcall	.+0      	; 0x208 <ComIf_EncodeFromShadowToChannelBuffer+0x28>
     208:	1f 92       	push	r1
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
     20e:	c8 2e       	mov	r12, r24
     210:	69 83       	std	Y+1, r22	; 0x01
     212:	d4 2e       	mov	r13, r20
     214:	3b 83       	std	Y+3, r19	; 0x03
     216:	2a 83       	std	Y+2, r18	; 0x02

	ULONG Checksum = 0;
	UWORD CurrentIndex = 0;
	UWORD TentativeDataLength = 0;

	ComIf_ChannelConfigType * Channel = &ComIf_ChannelConfig[ChannelIndex];
     218:	88 2e       	mov	r8, r24
     21a:	91 2c       	mov	r9, r1
     21c:	23 e1       	ldi	r18, 0x13	; 19
     21e:	28 9d       	mul	r18, r8
     220:	c0 01       	movw	r24, r0
     222:	29 9d       	mul	r18, r9
     224:	90 0d       	add	r25, r0
     226:	11 24       	eor	r1, r1
     228:	9c 01       	movw	r18, r24
     22a:	21 59       	subi	r18, 0x91	; 145
     22c:	3f 4f       	sbci	r19, 0xFF	; 255
     22e:	19 01       	movw	r2, r18

	// Once the update shadow buffer return no error, then it means the channel and msg indices were valid
	// So, we can simply get the information from the channel and msg indices

	ComIfTxMessageConfig * TxMsgCfg = &(Channel->TxMessages[MsgIndex]);
     230:	d9 01       	movw	r26, r18
     232:	1a 96       	adiw	r26, 0x0a	; 10
     234:	ad 90       	ld	r10, X+
     236:	bc 90       	ld	r11, X
     238:	1b 97       	sbiw	r26, 0x0b	; 11
     23a:	bb e0       	ldi	r27, 0x0B	; 11
     23c:	6b 9f       	mul	r22, r27
     23e:	a0 0c       	add	r10, r0
     240:	b1 1c       	adc	r11, r1
     242:	11 24       	eor	r1, r1
	ComIf_ChannelConfigType * Channel = &ComIf_ChannelConfig[ChannelIndex];

	// Once the update shadow buffer return no error, then it means the channel and msg indices were valid
	// So, we can simply get the information from the channel and msg indices

	ComIfTxMessageConfig * TxMsgCfg = &(Channel->TxMessages[MsgIndex]);
     244:	d5 01       	movw	r26, r10

UBYTE ComIf_EncodeFromShadowToChannelBuffer(UBYTE ChannelIndex, UBYTE MsgIndex, UBYTE Length, UWORD * OutLength, UBYTE * OutBuffer, UWORD BoundLimit)
{
	UBYTE retval = COMIF_EC_NO_ERROR;

	ULONG Checksum = 0;
     246:	41 2c       	mov	r4, r1
     248:	51 2c       	mov	r5, r1
     24a:	32 01       	movw	r6, r4
	ComIfTxMessageConfig * TxMsgCfg = &(Channel->TxMessages[MsgIndex]);

	/* Calculate Checksum for the data */
	ComIf_Lock_TxShadowBuffer();
	{
		for(UBYTE i = 0; i < Length; i++)
     24c:	20 e0       	ldi	r18, 0x00	; 0
}

static inline UWORD ComIf_GetChecksumAndTentativeDataLength(UBYTE ChannelIndex, UBYTE MsgIndex, UBYTE Length, ULONG *Checksum)
{
	ULONG ChecksumMask = 0;
	UWORD TentativeDataLength = 1 + 1 + 1 + 1; // STX, ID, DLC, ETX
     24e:	e4 e0       	ldi	r30, 0x04	; 4
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	fd 83       	std	Y+5, r31	; 0x05
     254:	ec 83       	std	Y+4, r30	; 0x04
     256:	1f c0       	rjmp	.+62     	; 0x296 <ComIf_EncodeFromShadowToChannelBuffer+0xb6>
	/* Calculate Checksum for the data */
	ComIf_Lock_TxShadowBuffer();
	{
		for(UBYTE i = 0; i < Length; i++)
		{
			UBYTE DataByte = TxMsgCfg->ShadowBuffer[i];
     258:	15 96       	adiw	r26, 0x05	; 5
     25a:	ed 91       	ld	r30, X+
     25c:	fc 91       	ld	r31, X
     25e:	16 97       	sbiw	r26, 0x06	; 6
     260:	e2 0f       	add	r30, r18
     262:	f1 1d       	adc	r31, r1
     264:	30 81       	ld	r19, Z

			*Checksum += DataByte;
     266:	43 0e       	add	r4, r19
     268:	51 1c       	adc	r5, r1
     26a:	61 1c       	adc	r6, r1
     26c:	71 1c       	adc	r7, r1

			TentativeDataLength++;
     26e:	8c 81       	ldd	r24, Y+4	; 0x04
     270:	9d 81       	ldd	r25, Y+5	; 0x05
     272:	01 96       	adiw	r24, 0x01	; 1

static inline BOOL ComIf_IsNeedDelimiter(UBYTE Data)
{
	if( (Data == COMIF_STX)
	 || (Data == COMIF_DLE)
	 || (Data == COMIF_ETX)
     274:	3b 57       	subi	r19, 0x7B	; 123
	*(Str + 1) = ((Value & 0x0F) + 0x30);
}

static inline BOOL ComIf_IsNeedDelimiter(UBYTE Data)
{
	if( (Data == COMIF_STX)
     276:	33 30       	cpi	r19, 0x03	; 3
     278:	10 f4       	brcc	.+4      	; 0x27e <ComIf_EncodeFromShadowToChannelBuffer+0x9e>
	 || (Data == COMIF_DLE)
	 || (Data == COMIF_ETX)
	)
	{
		return TRUE;
     27a:	31 e0       	ldi	r19, 0x01	; 1
     27c:	01 c0       	rjmp	.+2      	; 0x280 <ComIf_EncodeFromShadowToChannelBuffer+0xa0>
	}
	return FALSE;
     27e:	30 e0       	ldi	r19, 0x00	; 0

			*Checksum += DataByte;

			TentativeDataLength++;

			if(ComIf_IsNeedDelimiter(DataByte)) { TentativeDataLength++; }
     280:	33 23       	and	r19, r19
     282:	31 f0       	breq	.+12     	; 0x290 <ComIf_EncodeFromShadowToChannelBuffer+0xb0>
     284:	8c 81       	ldd	r24, Y+4	; 0x04
     286:	9d 81       	ldd	r25, Y+5	; 0x05
     288:	02 96       	adiw	r24, 0x02	; 2
     28a:	9d 83       	std	Y+5, r25	; 0x05
     28c:	8c 83       	std	Y+4, r24	; 0x04
     28e:	02 c0       	rjmp	.+4      	; 0x294 <ComIf_EncodeFromShadowToChannelBuffer+0xb4>
		{
			UBYTE DataByte = TxMsgCfg->ShadowBuffer[i];

			*Checksum += DataByte;

			TentativeDataLength++;
     290:	9d 83       	std	Y+5, r25	; 0x05
     292:	8c 83       	std	Y+4, r24	; 0x04
	ComIfTxMessageConfig * TxMsgCfg = &(Channel->TxMessages[MsgIndex]);

	/* Calculate Checksum for the data */
	ComIf_Lock_TxShadowBuffer();
	{
		for(UBYTE i = 0; i < Length; i++)
     294:	2f 5f       	subi	r18, 0xFF	; 255
     296:	2d 15       	cp	r18, r13
     298:	f8 f2       	brcs	.-66     	; 0x258 <ComIf_EncodeFromShadowToChannelBuffer+0x78>
			if(ComIf_IsNeedDelimiter(DataByte)) { TentativeDataLength++; }
		}
	}
	ComIf_UnLock_TxShadowBuffer();

	ChecksumMask = ComIf_GetChecksumMaskValue(TxMsgCfg->ChecksumLength);
     29a:	d5 01       	movw	r26, r10
     29c:	13 96       	adiw	r26, 0x03	; 3
     29e:	8c 91       	ld	r24, X
     2a0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <ComIf_GetChecksumMaskValue>

	(*Checksum) = (((~(*Checksum)) + 1) & ChecksumMask);
     2a4:	70 94       	com	r7
     2a6:	60 94       	com	r6
     2a8:	50 94       	com	r5
     2aa:	40 94       	com	r4
     2ac:	41 1c       	adc	r4, r1
     2ae:	51 1c       	adc	r5, r1
     2b0:	61 1c       	adc	r6, r1
     2b2:	71 1c       	adc	r7, r1
     2b4:	46 22       	and	r4, r22
     2b6:	57 22       	and	r5, r23
     2b8:	68 22       	and	r6, r24
     2ba:	79 22       	and	r7, r25

	for(int i = TxMsgCfg->ChecksumLength - 1; i >= 0; i--)
     2bc:	f5 01       	movw	r30, r10
     2be:	83 81       	ldd	r24, Z+3	; 0x03
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	01 97       	sbiw	r24, 0x01	; 1
     2c4:	34 c0       	rjmp	.+104    	; 0x32e <ComIf_EncodeFromShadowToChannelBuffer+0x14e>
	{
		UBYTE ChkData = (UB)(((*Checksum) & (((UL)0xFF) << (i * 8))) >> (i * 8));
     2c6:	9c 01       	movw	r18, r24
     2c8:	22 0f       	add	r18, r18
     2ca:	33 1f       	adc	r19, r19
     2cc:	22 0f       	add	r18, r18
     2ce:	33 1f       	adc	r19, r19
     2d0:	22 0f       	add	r18, r18
     2d2:	33 1f       	adc	r19, r19
     2d4:	4f ef       	ldi	r20, 0xFF	; 255
     2d6:	50 e0       	ldi	r21, 0x00	; 0
     2d8:	60 e0       	ldi	r22, 0x00	; 0
     2da:	70 e0       	ldi	r23, 0x00	; 0
     2dc:	02 2e       	mov	r0, r18
     2de:	04 c0       	rjmp	.+8      	; 0x2e8 <ComIf_EncodeFromShadowToChannelBuffer+0x108>
     2e0:	44 0f       	add	r20, r20
     2e2:	55 1f       	adc	r21, r21
     2e4:	66 1f       	adc	r22, r22
     2e6:	77 1f       	adc	r23, r23
     2e8:	0a 94       	dec	r0
     2ea:	d2 f7       	brpl	.-12     	; 0x2e0 <ComIf_EncodeFromShadowToChannelBuffer+0x100>
     2ec:	44 21       	and	r20, r4
     2ee:	55 21       	and	r21, r5
     2f0:	66 21       	and	r22, r6
     2f2:	77 21       	and	r23, r7
     2f4:	04 c0       	rjmp	.+8      	; 0x2fe <ComIf_EncodeFromShadowToChannelBuffer+0x11e>
     2f6:	76 95       	lsr	r23
     2f8:	67 95       	ror	r22
     2fa:	57 95       	ror	r21
     2fc:	47 95       	ror	r20
     2fe:	2a 95       	dec	r18
     300:	d2 f7       	brpl	.-12     	; 0x2f6 <ComIf_EncodeFromShadowToChannelBuffer+0x116>

		TentativeDataLength++;
     302:	2c 81       	ldd	r18, Y+4	; 0x04
     304:	3d 81       	ldd	r19, Y+5	; 0x05
     306:	2f 5f       	subi	r18, 0xFF	; 255
     308:	3f 4f       	sbci	r19, 0xFF	; 255

static inline BOOL ComIf_IsNeedDelimiter(UBYTE Data)
{
	if( (Data == COMIF_STX)
	 || (Data == COMIF_DLE)
	 || (Data == COMIF_ETX)
     30a:	4b 57       	subi	r20, 0x7B	; 123
	*(Str + 1) = ((Value & 0x0F) + 0x30);
}

static inline BOOL ComIf_IsNeedDelimiter(UBYTE Data)
{
	if( (Data == COMIF_STX)
     30c:	43 30       	cpi	r20, 0x03	; 3
     30e:	10 f4       	brcc	.+4      	; 0x314 <ComIf_EncodeFromShadowToChannelBuffer+0x134>
	 || (Data == COMIF_DLE)
	 || (Data == COMIF_ETX)
	)
	{
		return TRUE;
     310:	41 e0       	ldi	r20, 0x01	; 1
     312:	01 c0       	rjmp	.+2      	; 0x316 <ComIf_EncodeFromShadowToChannelBuffer+0x136>
	}
	return FALSE;
     314:	40 e0       	ldi	r20, 0x00	; 0
	{
		UBYTE ChkData = (UB)(((*Checksum) & (((UL)0xFF) << (i * 8))) >> (i * 8));

		TentativeDataLength++;

		if(ComIf_IsNeedDelimiter(ChkData)) { TentativeDataLength++; }
     316:	44 23       	and	r20, r20
     318:	39 f0       	breq	.+14     	; 0x328 <ComIf_EncodeFromShadowToChannelBuffer+0x148>
     31a:	2c 81       	ldd	r18, Y+4	; 0x04
     31c:	3d 81       	ldd	r19, Y+5	; 0x05
     31e:	2e 5f       	subi	r18, 0xFE	; 254
     320:	3f 4f       	sbci	r19, 0xFF	; 255
     322:	3d 83       	std	Y+5, r19	; 0x05
     324:	2c 83       	std	Y+4, r18	; 0x04
     326:	02 c0       	rjmp	.+4      	; 0x32c <ComIf_EncodeFromShadowToChannelBuffer+0x14c>

	for(int i = TxMsgCfg->ChecksumLength - 1; i >= 0; i--)
	{
		UBYTE ChkData = (UB)(((*Checksum) & (((UL)0xFF) << (i * 8))) >> (i * 8));

		TentativeDataLength++;
     328:	3d 83       	std	Y+5, r19	; 0x05
     32a:	2c 83       	std	Y+4, r18	; 0x04

	ChecksumMask = ComIf_GetChecksumMaskValue(TxMsgCfg->ChecksumLength);

	(*Checksum) = (((~(*Checksum)) + 1) & ChecksumMask);

	for(int i = TxMsgCfg->ChecksumLength - 1; i >= 0; i--)
     32c:	01 97       	sbiw	r24, 0x01	; 1
     32e:	99 23       	and	r25, r25
     330:	54 f6       	brge	.-108    	; 0x2c6 <ComIf_EncodeFromShadowToChannelBuffer+0xe6>
		TentativeDataLength++;

		if(ComIf_IsNeedDelimiter(ChkData)) { TentativeDataLength++; }
	}

	if(Channel->DataTxfrMethod == COMIF_DATA_TXFR_METHOD_STRING)
     332:	83 e1       	ldi	r24, 0x13	; 19
     334:	88 9d       	mul	r24, r8
     336:	f0 01       	movw	r30, r0
     338:	89 9d       	mul	r24, r9
     33a:	f0 0d       	add	r31, r0
     33c:	11 24       	eor	r1, r1
     33e:	e1 59       	subi	r30, 0x91	; 145
     340:	ff 4f       	sbci	r31, 0xFF	; 255
     342:	81 85       	ldd	r24, Z+9	; 0x09
     344:	81 30       	cpi	r24, 0x01	; 1
     346:	39 f4       	brne	.+14     	; 0x356 <ComIf_EncodeFromShadowToChannelBuffer+0x176>
	{
		/* If the Data transfer method is STRING, then add 2 chars per byte and a NULL character at the end */
		TentativeDataLength = (TentativeDataLength * 2) + 1;
     348:	8c 81       	ldd	r24, Y+4	; 0x04
     34a:	9d 81       	ldd	r25, Y+5	; 0x05
     34c:	88 0f       	add	r24, r24
     34e:	99 1f       	adc	r25, r25
     350:	01 96       	adiw	r24, 0x01	; 1
     352:	9d 83       	std	Y+5, r25	; 0x05
     354:	8c 83       	std	Y+4, r24	; 0x04
#endif

	TentativeDataLength = ComIf_GetChecksumAndTentativeDataLength(ChannelIndex, MsgIndex, Length, &Checksum);

	/* Build Data Buffer */
	if(Channel->DataTxfrMethod == COMIF_DATA_TXFR_METHOD_STRING)
     356:	23 e1       	ldi	r18, 0x13	; 19
     358:	28 9d       	mul	r18, r8
     35a:	c0 01       	movw	r24, r0
     35c:	29 9d       	mul	r18, r9
     35e:	90 0d       	add	r25, r0
     360:	11 24       	eor	r1, r1
     362:	fc 01       	movw	r30, r24
     364:	e1 59       	subi	r30, 0x91	; 145
     366:	ff 4f       	sbci	r31, 0xFF	; 255
     368:	81 85       	ldd	r24, Z+9	; 0x09
     36a:	81 30       	cpi	r24, 0x01	; 1
     36c:	09 f0       	breq	.+2      	; 0x370 <ComIf_EncodeFromShadowToChannelBuffer+0x190>
     36e:	bf c0       	rjmp	.+382    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
	{
		/* Check if the channel buffer has enough space to fill in */
		if(TentativeDataLength < BoundLimit)
     370:	ac 81       	ldd	r26, Y+4	; 0x04
     372:	bd 81       	ldd	r27, Y+5	; 0x05
     374:	ae 15       	cp	r26, r14
     376:	bf 05       	cpc	r27, r15
     378:	08 f0       	brcs	.+2      	; 0x37c <ComIf_EncodeFromShadowToChannelBuffer+0x19c>
     37a:	9a c0       	rjmp	.+308    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
/* Function Definitions                            */
/***************************************************/

static inline void ConvertByteToString(unsigned char * Str, UBYTE Value)
{
	*Str = (((Value & 0xF0) >> 4) + 0x30);
     37c:	87 e3       	ldi	r24, 0x37	; 55
     37e:	f8 01       	movw	r30, r16
     380:	80 83       	st	Z, r24
	*(Str + 1) = ((Value & 0x0F) + 0x30);
     382:	8b e3       	ldi	r24, 0x3B	; 59
     384:	81 83       	std	Z+1, r24	; 0x01
		if(TentativeDataLength < BoundLimit)
		{
			ConvertByteToString(&(OutBuffer[CurrentIndex]), COMIF_STX);
			CurrentIndex += 2;

			ConvertByteToString(&(OutBuffer[CurrentIndex]), TxMsgCfg->ID);
     386:	d5 01       	movw	r26, r10
     388:	8c 91       	ld	r24, X
/* Function Definitions                            */
/***************************************************/

static inline void ConvertByteToString(unsigned char * Str, UBYTE Value)
{
	*Str = (((Value & 0xF0) >> 4) + 0x30);
     38a:	98 2f       	mov	r25, r24
     38c:	92 95       	swap	r25
     38e:	9f 70       	andi	r25, 0x0F	; 15
     390:	90 5d       	subi	r25, 0xD0	; 208
     392:	92 83       	std	Z+2, r25	; 0x02
	*(Str + 1) = ((Value & 0x0F) + 0x30);
     394:	8f 70       	andi	r24, 0x0F	; 15
     396:	80 5d       	subi	r24, 0xD0	; 208
     398:	83 83       	std	Z+3, r24	; 0x03
/* Function Definitions                            */
/***************************************************/

static inline void ConvertByteToString(unsigned char * Str, UBYTE Value)
{
	*Str = (((Value & 0xF0) >> 4) + 0x30);
     39a:	8d 2d       	mov	r24, r13
     39c:	82 95       	swap	r24
     39e:	8f 70       	andi	r24, 0x0F	; 15
     3a0:	80 5d       	subi	r24, 0xD0	; 208
     3a2:	84 83       	std	Z+4, r24	; 0x04
	*(Str + 1) = ((Value & 0x0F) + 0x30);
     3a4:	8d 2d       	mov	r24, r13
     3a6:	8f 70       	andi	r24, 0x0F	; 15
     3a8:	80 5d       	subi	r24, 0xD0	; 208
     3aa:	85 83       	std	Z+5, r24	; 0x05
			ConvertByteToString(&(OutBuffer[CurrentIndex]), DLC);
			CurrentIndex += 2;

			ComIf_Lock_TxShadowBuffer();
			{
				for(UBYTE i = 0; i < Length; i++)
     3ac:	40 e0       	ldi	r20, 0x00	; 0

			ConvertByteToString(&(OutBuffer[CurrentIndex]), TxMsgCfg->ID);
			CurrentIndex += 2;

			ConvertByteToString(&(OutBuffer[CurrentIndex]), DLC);
			CurrentIndex += 2;
     3ae:	26 e0       	ldi	r18, 0x06	; 6
     3b0:	30 e0       	ldi	r19, 0x00	; 0

			ComIf_Lock_TxShadowBuffer();
			{
				for(UBYTE i = 0; i < Length; i++)
     3b2:	24 c0       	rjmp	.+72     	; 0x3fc <ComIf_EncodeFromShadowToChannelBuffer+0x21c>
				{
					CurrentIndex += ComIf_AppendString(&(OutBuffer[CurrentIndex]), TxMsgCfg->ShadowBuffer[i]);
     3b4:	d5 01       	movw	r26, r10
     3b6:	15 96       	adiw	r26, 0x05	; 5
     3b8:	ed 91       	ld	r30, X+
     3ba:	fc 91       	ld	r31, X
     3bc:	16 97       	sbiw	r26, 0x06	; 6
     3be:	e4 0f       	add	r30, r20
     3c0:	f1 1d       	adc	r31, r1
     3c2:	80 81       	ld	r24, Z
     3c4:	f8 01       	movw	r30, r16
     3c6:	e2 0f       	add	r30, r18
     3c8:	f3 1f       	adc	r31, r19
{
	UBYTE AppendLength = 0;

	if( (Data == COMIF_STX)
	 || (Data == COMIF_DLE)
	 || (Data == COMIF_ETX)
     3ca:	95 e8       	ldi	r25, 0x85	; 133
     3cc:	98 0f       	add	r25, r24

static inline UBYTE ComIf_AppendString(UBYTE * DataPtr, UBYTE Data)
{
	UBYTE AppendLength = 0;

	if( (Data == COMIF_STX)
     3ce:	93 30       	cpi	r25, 0x03	; 3
     3d0:	30 f4       	brcc	.+12     	; 0x3de <ComIf_EncodeFromShadowToChannelBuffer+0x1fe>
/* Function Definitions                            */
/***************************************************/

static inline void ConvertByteToString(unsigned char * Str, UBYTE Value)
{
	*Str = (((Value & 0xF0) >> 4) + 0x30);
     3d2:	97 e3       	ldi	r25, 0x37	; 55
     3d4:	90 83       	st	Z, r25
	*(Str + 1) = ((Value & 0x0F) + 0x30);
     3d6:	9c e3       	ldi	r25, 0x3C	; 60
     3d8:	91 83       	std	Z+1, r25	; 0x01
	 || (Data == COMIF_ETX)
	)
	{
		// If there are any control characters available in the Data, then add a Delimiter
		ConvertByteToString(DataPtr, COMIF_DLE);
		AppendLength += 2;
     3da:	92 e0       	ldi	r25, 0x02	; 2
     3dc:	01 c0       	rjmp	.+2      	; 0x3e0 <ComIf_EncodeFromShadowToChannelBuffer+0x200>
	return AppendLength + 1; // Add 1 more byte as the return value should hold the length instead of index
}

static inline UBYTE ComIf_AppendString(UBYTE * DataPtr, UBYTE Data)
{
	UBYTE AppendLength = 0;
     3de:	90 e0       	ldi	r25, 0x00	; 0
		// If there are any control characters available in the Data, then add a Delimiter
		ConvertByteToString(DataPtr, COMIF_DLE);
		AppendLength += 2;
	}

	ConvertByteToString(&(DataPtr[AppendLength]), Data);
     3e0:	e9 0f       	add	r30, r25
     3e2:	f1 1d       	adc	r31, r1
/* Function Definitions                            */
/***************************************************/

static inline void ConvertByteToString(unsigned char * Str, UBYTE Value)
{
	*Str = (((Value & 0xF0) >> 4) + 0x30);
     3e4:	58 2f       	mov	r21, r24
     3e6:	52 95       	swap	r21
     3e8:	5f 70       	andi	r21, 0x0F	; 15
     3ea:	50 5d       	subi	r21, 0xD0	; 208
     3ec:	50 83       	st	Z, r21
	*(Str + 1) = ((Value & 0x0F) + 0x30);
     3ee:	8f 70       	andi	r24, 0x0F	; 15
     3f0:	80 5d       	subi	r24, 0xD0	; 208
     3f2:	81 83       	std	Z+1, r24	; 0x01
		ConvertByteToString(DataPtr, COMIF_DLE);
		AppendLength += 2;
	}

	ConvertByteToString(&(DataPtr[AppendLength]), Data);
	AppendLength += 2;
     3f4:	9e 5f       	subi	r25, 0xFE	; 254

			ComIf_Lock_TxShadowBuffer();
			{
				for(UBYTE i = 0; i < Length; i++)
				{
					CurrentIndex += ComIf_AppendString(&(OutBuffer[CurrentIndex]), TxMsgCfg->ShadowBuffer[i]);
     3f6:	29 0f       	add	r18, r25
     3f8:	31 1d       	adc	r19, r1
			ConvertByteToString(&(OutBuffer[CurrentIndex]), DLC);
			CurrentIndex += 2;

			ComIf_Lock_TxShadowBuffer();
			{
				for(UBYTE i = 0; i < Length; i++)
     3fa:	4f 5f       	subi	r20, 0xFF	; 255
     3fc:	4d 15       	cp	r20, r13
     3fe:	d0 f2       	brcs	.-76     	; 0x3b4 <ComIf_EncodeFromShadowToChannelBuffer+0x1d4>
					CurrentIndex += ComIf_AppendString(&(OutBuffer[CurrentIndex]), TxMsgCfg->ShadowBuffer[i]);
				}
			}
			ComIf_UnLock_TxShadowBuffer();

			for(int i = TxMsgCfg->ChecksumLength - 1; i >= 0; i--)
     400:	f5 01       	movw	r30, r10
     402:	43 81       	ldd	r20, Z+3	; 0x03
     404:	50 e0       	ldi	r21, 0x00	; 0
     406:	41 50       	subi	r20, 0x01	; 1
     408:	51 09       	sbc	r21, r1
     40a:	3b c0       	rjmp	.+118    	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
			{
				UBYTE ChkData = (UB)((Checksum & (((UL)0xFF) << (i * 8))) >> (i * 8));
     40c:	ba 01       	movw	r22, r20
     40e:	66 0f       	add	r22, r22
     410:	77 1f       	adc	r23, r23
     412:	66 0f       	add	r22, r22
     414:	77 1f       	adc	r23, r23
     416:	66 0f       	add	r22, r22
     418:	77 1f       	adc	r23, r23
     41a:	8f ef       	ldi	r24, 0xFF	; 255
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	a0 e0       	ldi	r26, 0x00	; 0
     420:	b0 e0       	ldi	r27, 0x00	; 0
     422:	06 2e       	mov	r0, r22
     424:	04 c0       	rjmp	.+8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     426:	88 0f       	add	r24, r24
     428:	99 1f       	adc	r25, r25
     42a:	aa 1f       	adc	r26, r26
     42c:	bb 1f       	adc	r27, r27
     42e:	0a 94       	dec	r0
     430:	d2 f7       	brpl	.-12     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     432:	84 21       	and	r24, r4
     434:	95 21       	and	r25, r5
     436:	a6 21       	and	r26, r6
     438:	b7 21       	and	r27, r7
     43a:	04 c0       	rjmp	.+8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
     43c:	b6 95       	lsr	r27
     43e:	a7 95       	ror	r26
     440:	97 95       	ror	r25
     442:	87 95       	ror	r24
     444:	6a 95       	dec	r22
     446:	d2 f7       	brpl	.-12     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>

				CurrentIndex += ComIf_AppendString(&(OutBuffer[CurrentIndex]), ChkData);
     448:	f8 01       	movw	r30, r16
     44a:	e2 0f       	add	r30, r18
     44c:	f3 1f       	adc	r31, r19
{
	UBYTE AppendLength = 0;

	if( (Data == COMIF_STX)
	 || (Data == COMIF_DLE)
	 || (Data == COMIF_ETX)
     44e:	65 e8       	ldi	r22, 0x85	; 133
     450:	68 0f       	add	r22, r24

static inline UBYTE ComIf_AppendString(UBYTE * DataPtr, UBYTE Data)
{
	UBYTE AppendLength = 0;

	if( (Data == COMIF_STX)
     452:	63 30       	cpi	r22, 0x03	; 3
     454:	30 f4       	brcc	.+12     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
/* Function Definitions                            */
/***************************************************/

static inline void ConvertByteToString(unsigned char * Str, UBYTE Value)
{
	*Str = (((Value & 0xF0) >> 4) + 0x30);
     456:	67 e3       	ldi	r22, 0x37	; 55
     458:	60 83       	st	Z, r22
	*(Str + 1) = ((Value & 0x0F) + 0x30);
     45a:	6c e3       	ldi	r22, 0x3C	; 60
     45c:	61 83       	std	Z+1, r22	; 0x01
	 || (Data == COMIF_ETX)
	)
	{
		// If there are any control characters available in the Data, then add a Delimiter
		ConvertByteToString(DataPtr, COMIF_DLE);
		AppendLength += 2;
     45e:	62 e0       	ldi	r22, 0x02	; 2
     460:	01 c0       	rjmp	.+2      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
	return AppendLength + 1; // Add 1 more byte as the return value should hold the length instead of index
}

static inline UBYTE ComIf_AppendString(UBYTE * DataPtr, UBYTE Data)
{
	UBYTE AppendLength = 0;
     462:	60 e0       	ldi	r22, 0x00	; 0
		// If there are any control characters available in the Data, then add a Delimiter
		ConvertByteToString(DataPtr, COMIF_DLE);
		AppendLength += 2;
	}

	ConvertByteToString(&(DataPtr[AppendLength]), Data);
     464:	e6 0f       	add	r30, r22
     466:	f1 1d       	adc	r31, r1
/* Function Definitions                            */
/***************************************************/

static inline void ConvertByteToString(unsigned char * Str, UBYTE Value)
{
	*Str = (((Value & 0xF0) >> 4) + 0x30);
     468:	78 2f       	mov	r23, r24
     46a:	72 95       	swap	r23
     46c:	7f 70       	andi	r23, 0x0F	; 15
     46e:	70 5d       	subi	r23, 0xD0	; 208
     470:	70 83       	st	Z, r23
	*(Str + 1) = ((Value & 0x0F) + 0x30);
     472:	8f 70       	andi	r24, 0x0F	; 15
     474:	80 5d       	subi	r24, 0xD0	; 208
     476:	81 83       	std	Z+1, r24	; 0x01
		ConvertByteToString(DataPtr, COMIF_DLE);
		AppendLength += 2;
	}

	ConvertByteToString(&(DataPtr[AppendLength]), Data);
	AppendLength += 2;
     478:	6e 5f       	subi	r22, 0xFE	; 254

			for(int i = TxMsgCfg->ChecksumLength - 1; i >= 0; i--)
			{
				UBYTE ChkData = (UB)((Checksum & (((UL)0xFF) << (i * 8))) >> (i * 8));

				CurrentIndex += ComIf_AppendString(&(OutBuffer[CurrentIndex]), ChkData);
     47a:	26 0f       	add	r18, r22
     47c:	31 1d       	adc	r19, r1
					CurrentIndex += ComIf_AppendString(&(OutBuffer[CurrentIndex]), TxMsgCfg->ShadowBuffer[i]);
				}
			}
			ComIf_UnLock_TxShadowBuffer();

			for(int i = TxMsgCfg->ChecksumLength - 1; i >= 0; i--)
     47e:	41 50       	subi	r20, 0x01	; 1
     480:	51 09       	sbc	r21, r1
     482:	55 23       	and	r21, r21
     484:	1c f6       	brge	.-122    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
				UBYTE ChkData = (UB)((Checksum & (((UL)0xFF) << (i * 8))) >> (i * 8));

				CurrentIndex += ComIf_AppendString(&(OutBuffer[CurrentIndex]), ChkData);
			}

			ConvertByteToString(&(OutBuffer[CurrentIndex]), COMIF_ETX);
     486:	f8 01       	movw	r30, r16
     488:	e2 0f       	add	r30, r18
     48a:	f3 1f       	adc	r31, r19
/* Function Definitions                            */
/***************************************************/

static inline void ConvertByteToString(unsigned char * Str, UBYTE Value)
{
	*Str = (((Value & 0xF0) >> 4) + 0x30);
     48c:	87 e3       	ldi	r24, 0x37	; 55
     48e:	80 83       	st	Z, r24
	*(Str + 1) = ((Value & 0x0F) + 0x30);
     490:	8d e3       	ldi	r24, 0x3D	; 61
     492:	81 83       	std	Z+1, r24	; 0x01

				CurrentIndex += ComIf_AppendString(&(OutBuffer[CurrentIndex]), ChkData);
			}

			ConvertByteToString(&(OutBuffer[CurrentIndex]), COMIF_ETX);
			CurrentIndex += 2;
     494:	c9 01       	movw	r24, r18
     496:	02 96       	adiw	r24, 0x02	; 2

			OutBuffer[CurrentIndex++] = '\0';
     498:	2d 5f       	subi	r18, 0xFD	; 253
     49a:	3f 4f       	sbci	r19, 0xFF	; 255
     49c:	f8 01       	movw	r30, r16
     49e:	e8 0f       	add	r30, r24
     4a0:	f9 1f       	adc	r31, r25
     4a2:	10 82       	st	Z, r1

			*OutLength = CurrentIndex;
     4a4:	aa 81       	ldd	r26, Y+2	; 0x02
     4a6:	bb 81       	ldd	r27, Y+3	; 0x03
     4a8:	2d 93       	st	X+, r18
     4aa:	3c 93       	st	X, r19



UBYTE ComIf_EncodeFromShadowToChannelBuffer(UBYTE ChannelIndex, UBYTE MsgIndex, UBYTE Length, UWORD * OutLength, UBYTE * OutBuffer, UWORD BoundLimit)
{
	UBYTE retval = COMIF_EC_NO_ERROR;
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	b5 c0       	rjmp	.+362    	; 0x61a <__EEPROM_REGION_LENGTH__+0x21a>
		else
		{
			retval = COMIF_EC_BUFFER_OVERFLOW;

            /* Report Error */
			ComIf_ErrorNotify(Channel, COMIF_DEBUG_DATA_BYTES(0, retval, ChannelIndex, MsgIndex), COMIF_DEBUG_DATA_WORDS(TentativeDataLength, BoundLimit));
     4b0:	ec 81       	ldd	r30, Y+4	; 0x04
     4b2:	fd 81       	ldd	r31, Y+5	; 0x05
     4b4:	8f 01       	movw	r16, r30
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	98 01       	movw	r18, r16
     4bc:	11 27       	eor	r17, r17
     4be:	00 27       	eor	r16, r16
     4c0:	4c 2d       	mov	r20, r12
     4c2:	50 e0       	ldi	r21, 0x00	; 0
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	76 2f       	mov	r23, r22
     4ca:	65 2f       	mov	r22, r21
     4cc:	54 2f       	mov	r21, r20
     4ce:	44 27       	eor	r20, r20
     4d0:	62 61       	ori	r22, 0x12	; 18
     4d2:	c7 01       	movw	r24, r14
     4d4:	a0 e0       	ldi	r26, 0x00	; 0
     4d6:	b0 e0       	ldi	r27, 0x00	; 0
     4d8:	08 2b       	or	r16, r24
     4da:	19 2b       	or	r17, r25
     4dc:	2a 2b       	or	r18, r26
     4de:	3b 2b       	or	r19, r27
     4e0:	f9 81       	ldd	r31, Y+1	; 0x01
     4e2:	4f 2b       	or	r20, r31
     4e4:	c1 01       	movw	r24, r2
     4e6:	0e 94 cc 00 	call	0x198	; 0x198 <ComIf_ErrorNotify>

			*OutLength = CurrentIndex;
		}
		else
		{
			retval = COMIF_EC_BUFFER_OVERFLOW;
     4ea:	82 e1       	ldi	r24, 0x12	; 18
     4ec:	96 c0       	rjmp	.+300    	; 0x61a <__EEPROM_REGION_LENGTH__+0x21a>
	}
	else
	{
		/* If Data Transfer Method is COMIF_DATA_TXFR_METHOD_BYTES */

		if(TentativeDataLength < BoundLimit)
     4ee:	2c 81       	ldd	r18, Y+4	; 0x04
     4f0:	3d 81       	ldd	r19, Y+5	; 0x05
     4f2:	2e 15       	cp	r18, r14
     4f4:	3f 05       	cpc	r19, r15
     4f6:	08 f0       	brcs	.+2      	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
     4f8:	72 c0       	rjmp	.+228    	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
		{
			OutBuffer[CurrentIndex++] = COMIF_STX;
     4fa:	8b e7       	ldi	r24, 0x7B	; 123
     4fc:	d8 01       	movw	r26, r16
     4fe:	8c 93       	st	X, r24
			OutBuffer[CurrentIndex++] = TxMsgCfg->ID;
     500:	f5 01       	movw	r30, r10
     502:	80 81       	ld	r24, Z
     504:	11 96       	adiw	r26, 0x01	; 1
     506:	8c 93       	st	X, r24
     508:	11 97       	sbiw	r26, 0x01	; 1
			OutBuffer[CurrentIndex++] = DLC;
     50a:	12 96       	adiw	r26, 0x02	; 2
     50c:	dc 92       	st	X, r13

			ComIf_Lock_TxShadowBuffer();
			{
				for(UBYTE i = 0; i < Length; i++)
     50e:	90 e0       	ldi	r25, 0x00	; 0

		if(TentativeDataLength < BoundLimit)
		{
			OutBuffer[CurrentIndex++] = COMIF_STX;
			OutBuffer[CurrentIndex++] = TxMsgCfg->ID;
			OutBuffer[CurrentIndex++] = DLC;
     510:	23 e0       	ldi	r18, 0x03	; 3
     512:	30 e0       	ldi	r19, 0x00	; 0

			ComIf_Lock_TxShadowBuffer();
			{
				for(UBYTE i = 0; i < Length; i++)
     514:	1b c0       	rjmp	.+54     	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
				{
					CurrentIndex += ComIf_AppendByte(&(OutBuffer[CurrentIndex]), TxMsgCfg->ShadowBuffer[i]);
     516:	d5 01       	movw	r26, r10
     518:	15 96       	adiw	r26, 0x05	; 5
     51a:	ed 91       	ld	r30, X+
     51c:	fc 91       	ld	r31, X
     51e:	16 97       	sbiw	r26, 0x06	; 6
     520:	e9 0f       	add	r30, r25
     522:	f1 1d       	adc	r31, r1
     524:	40 81       	ld	r20, Z
     526:	f8 01       	movw	r30, r16
     528:	e2 0f       	add	r30, r18
     52a:	f3 1f       	adc	r31, r19
{
	UBYTE AppendLength = 0;

	if( (Data == COMIF_STX)
	 || (Data == COMIF_DLE)
	 || (Data == COMIF_ETX)
     52c:	85 e8       	ldi	r24, 0x85	; 133
     52e:	84 0f       	add	r24, r20

static inline UBYTE ComIf_AppendByte(UBYTE * DataPtr, UBYTE Data)
{
	UBYTE AppendLength = 0;

	if( (Data == COMIF_STX)
     530:	83 30       	cpi	r24, 0x03	; 3
     532:	20 f4       	brcc	.+8      	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
	 || (Data == COMIF_DLE)
	 || (Data == COMIF_ETX)
	)
	{
		// If there are any control characters available in the Data, then add a Delimiter
		DataPtr[AppendLength] = COMIF_DLE;
     534:	8c e7       	ldi	r24, 0x7C	; 124
     536:	80 83       	st	Z, r24
		AppendLength++;
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	01 c0       	rjmp	.+2      	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
	return FALSE;
}

static inline UBYTE ComIf_AppendByte(UBYTE * DataPtr, UBYTE Data)
{
	UBYTE AppendLength = 0;
     53c:	80 e0       	ldi	r24, 0x00	; 0
		// If there are any control characters available in the Data, then add a Delimiter
		DataPtr[AppendLength] = COMIF_DLE;
		AppendLength++;
	}

	DataPtr[AppendLength] = Data;
     53e:	e8 0f       	add	r30, r24
     540:	f1 1d       	adc	r31, r1
     542:	40 83       	st	Z, r20

	return AppendLength + 1; // Add 1 more byte as the return value should hold the length instead of index
     544:	8f 5f       	subi	r24, 0xFF	; 255

			ComIf_Lock_TxShadowBuffer();
			{
				for(UBYTE i = 0; i < Length; i++)
				{
					CurrentIndex += ComIf_AppendByte(&(OutBuffer[CurrentIndex]), TxMsgCfg->ShadowBuffer[i]);
     546:	28 0f       	add	r18, r24
     548:	31 1d       	adc	r19, r1
			OutBuffer[CurrentIndex++] = TxMsgCfg->ID;
			OutBuffer[CurrentIndex++] = DLC;

			ComIf_Lock_TxShadowBuffer();
			{
				for(UBYTE i = 0; i < Length; i++)
     54a:	9f 5f       	subi	r25, 0xFF	; 255
     54c:	9d 15       	cp	r25, r13
     54e:	18 f3       	brcs	.-58     	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
				}
			}
			ComIf_UnLock_TxShadowBuffer();


			for(int i = TxMsgCfg->ChecksumLength - 1; i >= 0; i--)
     550:	f5 01       	movw	r30, r10
     552:	43 81       	ldd	r20, Z+3	; 0x03
     554:	50 e0       	ldi	r21, 0x00	; 0
     556:	41 50       	subi	r20, 0x01	; 1
     558:	51 09       	sbc	r21, r1
     55a:	32 c0       	rjmp	.+100    	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
			{
				UBYTE ChkData = (UB)((Checksum & (((UL)0xFF) << (i * 8))) >> (i * 8));
     55c:	ba 01       	movw	r22, r20
     55e:	66 0f       	add	r22, r22
     560:	77 1f       	adc	r23, r23
     562:	66 0f       	add	r22, r22
     564:	77 1f       	adc	r23, r23
     566:	66 0f       	add	r22, r22
     568:	77 1f       	adc	r23, r23
     56a:	8f ef       	ldi	r24, 0xFF	; 255
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	a0 e0       	ldi	r26, 0x00	; 0
     570:	b0 e0       	ldi	r27, 0x00	; 0
     572:	06 2e       	mov	r0, r22
     574:	04 c0       	rjmp	.+8      	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
     576:	88 0f       	add	r24, r24
     578:	99 1f       	adc	r25, r25
     57a:	aa 1f       	adc	r26, r26
     57c:	bb 1f       	adc	r27, r27
     57e:	0a 94       	dec	r0
     580:	d2 f7       	brpl	.-12     	; 0x576 <__EEPROM_REGION_LENGTH__+0x176>
     582:	84 21       	and	r24, r4
     584:	95 21       	and	r25, r5
     586:	a6 21       	and	r26, r6
     588:	b7 21       	and	r27, r7
     58a:	04 c0       	rjmp	.+8      	; 0x594 <__EEPROM_REGION_LENGTH__+0x194>
     58c:	b6 95       	lsr	r27
     58e:	a7 95       	ror	r26
     590:	97 95       	ror	r25
     592:	87 95       	ror	r24
     594:	6a 95       	dec	r22
     596:	d2 f7       	brpl	.-12     	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>

				CurrentIndex += ComIf_AppendByte(&(OutBuffer[CurrentIndex]), ChkData);
     598:	f8 01       	movw	r30, r16
     59a:	e2 0f       	add	r30, r18
     59c:	f3 1f       	adc	r31, r19
{
	UBYTE AppendLength = 0;

	if( (Data == COMIF_STX)
	 || (Data == COMIF_DLE)
	 || (Data == COMIF_ETX)
     59e:	65 e8       	ldi	r22, 0x85	; 133
     5a0:	68 0f       	add	r22, r24

static inline UBYTE ComIf_AppendByte(UBYTE * DataPtr, UBYTE Data)
{
	UBYTE AppendLength = 0;

	if( (Data == COMIF_STX)
     5a2:	63 30       	cpi	r22, 0x03	; 3
     5a4:	20 f4       	brcc	.+8      	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
	 || (Data == COMIF_DLE)
	 || (Data == COMIF_ETX)
	)
	{
		// If there are any control characters available in the Data, then add a Delimiter
		DataPtr[AppendLength] = COMIF_DLE;
     5a6:	6c e7       	ldi	r22, 0x7C	; 124
     5a8:	60 83       	st	Z, r22
		AppendLength++;
     5aa:	61 e0       	ldi	r22, 0x01	; 1
     5ac:	01 c0       	rjmp	.+2      	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
	return FALSE;
}

static inline UBYTE ComIf_AppendByte(UBYTE * DataPtr, UBYTE Data)
{
	UBYTE AppendLength = 0;
     5ae:	60 e0       	ldi	r22, 0x00	; 0
		// If there are any control characters available in the Data, then add a Delimiter
		DataPtr[AppendLength] = COMIF_DLE;
		AppendLength++;
	}

	DataPtr[AppendLength] = Data;
     5b0:	e6 0f       	add	r30, r22
     5b2:	f1 1d       	adc	r31, r1
     5b4:	80 83       	st	Z, r24

	return AppendLength + 1; // Add 1 more byte as the return value should hold the length instead of index
     5b6:	6f 5f       	subi	r22, 0xFF	; 255

			for(int i = TxMsgCfg->ChecksumLength - 1; i >= 0; i--)
			{
				UBYTE ChkData = (UB)((Checksum & (((UL)0xFF) << (i * 8))) >> (i * 8));

				CurrentIndex += ComIf_AppendByte(&(OutBuffer[CurrentIndex]), ChkData);
     5b8:	26 0f       	add	r18, r22
     5ba:	31 1d       	adc	r19, r1
				}
			}
			ComIf_UnLock_TxShadowBuffer();


			for(int i = TxMsgCfg->ChecksumLength - 1; i >= 0; i--)
     5bc:	41 50       	subi	r20, 0x01	; 1
     5be:	51 09       	sbc	r21, r1
     5c0:	55 23       	and	r21, r21
     5c2:	64 f6       	brge	.-104    	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
				UBYTE ChkData = (UB)((Checksum & (((UL)0xFF) << (i * 8))) >> (i * 8));

				CurrentIndex += ComIf_AppendByte(&(OutBuffer[CurrentIndex]), ChkData);
			}

			OutBuffer[CurrentIndex++] = COMIF_ETX;
     5c4:	c9 01       	movw	r24, r18
     5c6:	01 96       	adiw	r24, 0x01	; 1
     5c8:	f8 01       	movw	r30, r16
     5ca:	e2 0f       	add	r30, r18
     5cc:	f3 1f       	adc	r31, r19
     5ce:	2d e7       	ldi	r18, 0x7D	; 125
     5d0:	20 83       	st	Z, r18

			*OutLength = CurrentIndex;
     5d2:	aa 81       	ldd	r26, Y+2	; 0x02
     5d4:	bb 81       	ldd	r27, Y+3	; 0x03
     5d6:	8d 93       	st	X+, r24
     5d8:	9c 93       	st	X, r25



UBYTE ComIf_EncodeFromShadowToChannelBuffer(UBYTE ChannelIndex, UBYTE MsgIndex, UBYTE Length, UWORD * OutLength, UBYTE * OutBuffer, UWORD BoundLimit)
{
	UBYTE retval = COMIF_EC_NO_ERROR;
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	1e c0       	rjmp	.+60     	; 0x61a <__EEPROM_REGION_LENGTH__+0x21a>
		else
		{
			retval = COMIF_EC_BUFFER_OVERFLOW;

			/* Report Error */
			ComIf_ErrorNotify(Channel, COMIF_DEBUG_DATA_BYTES(0, retval, ChannelIndex, MsgIndex), COMIF_DEBUG_DATA_WORDS(TentativeDataLength, BoundLimit));
     5de:	ec 81       	ldd	r30, Y+4	; 0x04
     5e0:	fd 81       	ldd	r31, Y+5	; 0x05
     5e2:	8f 01       	movw	r16, r30
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	98 01       	movw	r18, r16
     5ea:	11 27       	eor	r17, r17
     5ec:	00 27       	eor	r16, r16
     5ee:	4c 2d       	mov	r20, r12
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	76 2f       	mov	r23, r22
     5f8:	65 2f       	mov	r22, r21
     5fa:	54 2f       	mov	r21, r20
     5fc:	44 27       	eor	r20, r20
     5fe:	62 61       	ori	r22, 0x12	; 18
     600:	c7 01       	movw	r24, r14
     602:	a0 e0       	ldi	r26, 0x00	; 0
     604:	b0 e0       	ldi	r27, 0x00	; 0
     606:	08 2b       	or	r16, r24
     608:	19 2b       	or	r17, r25
     60a:	2a 2b       	or	r18, r26
     60c:	3b 2b       	or	r19, r27
     60e:	f9 81       	ldd	r31, Y+1	; 0x01
     610:	4f 2b       	or	r20, r31
     612:	c1 01       	movw	r24, r2
     614:	0e 94 cc 00 	call	0x198	; 0x198 <ComIf_ErrorNotify>

			*OutLength = CurrentIndex;
		}
		else
		{
			retval = COMIF_EC_BUFFER_OVERFLOW;
     618:	82 e1       	ldi	r24, 0x12	; 18
			ComIf_ErrorNotify(Channel, COMIF_DEBUG_DATA_BYTES(0, retval, ChannelIndex, MsgIndex), COMIF_DEBUG_DATA_WORDS(TentativeDataLength, BoundLimit));
		}
	}

	return retval;
}
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
     620:	0f 90       	pop	r0
     622:	0f 90       	pop	r0
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	df 90       	pop	r13
     632:	cf 90       	pop	r12
     634:	bf 90       	pop	r11
     636:	af 90       	pop	r10
     638:	9f 90       	pop	r9
     63a:	8f 90       	pop	r8
     63c:	7f 90       	pop	r7
     63e:	6f 90       	pop	r6
     640:	5f 90       	pop	r5
     642:	4f 90       	pop	r4
     644:	3f 90       	pop	r3
     646:	2f 90       	pop	r2
     648:	08 95       	ret

0000064a <ComIf_Transmit>:
 * TODO: In Future, This function shall be made Non-Reentrant for the same message.
 *
 * Usage Notes: This function shall be called for a channel in a same task to avoid issues.
 **/
UBYTE ComIf_Transmit(UBYTE ChannelIndex, UBYTE MsgIndex, void * DataPtr, UBYTE Length)
{
     64a:	3f 92       	push	r3
     64c:	4f 92       	push	r4
     64e:	5f 92       	push	r5
     650:	6f 92       	push	r6
     652:	7f 92       	push	r7
     654:	8f 92       	push	r8
     656:	9f 92       	push	r9
     658:	af 92       	push	r10
     65a:	bf 92       	push	r11
     65c:	cf 92       	push	r12
     65e:	df 92       	push	r13
     660:	ef 92       	push	r14
     662:	ff 92       	push	r15
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	00 d0       	rcall	.+0      	; 0x66e <ComIf_Transmit+0x24>
     66e:	cd b7       	in	r28, 0x3d	; 61
     670:	de b7       	in	r29, 0x3e	; 62
     672:	48 2e       	mov	r4, r24
     674:	56 2e       	mov	r5, r22
     676:	32 2e       	mov	r3, r18
	/* Copy the Data to the Message specific shadow buffer before processing it any further */
	/* This function will also acts as a validity checks for the passed arguments */
	UBYTE retval = ComIf_UpdateTxShadowBuffer(ChannelIndex, MsgIndex, DataPtr, Length);
     678:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <ComIf_UpdateTxShadowBuffer>
     67c:	f8 2e       	mov	r15, r24

	if(retval == COMIF_EC_NO_ERROR)
     67e:	81 11       	cpse	r24, r1
     680:	6c c0       	rjmp	.+216    	; 0x75a <ComIf_Transmit+0x110>
	{
		ComIf_ChannelConfigType * Channel = &ComIf_ChannelConfig[ChannelIndex];
     682:	84 2c       	mov	r8, r4
     684:	91 2c       	mov	r9, r1
     686:	23 e1       	ldi	r18, 0x13	; 19
     688:	28 9d       	mul	r18, r8
     68a:	c0 01       	movw	r24, r0
     68c:	29 9d       	mul	r18, r9
     68e:	90 0d       	add	r25, r0
     690:	11 24       	eor	r1, r1
     692:	9c 01       	movw	r18, r24
     694:	21 59       	subi	r18, 0x91	; 145
     696:	3f 4f       	sbci	r19, 0xFF	; 255
     698:	69 01       	movw	r12, r18

		ComIfTxMessageConfig * TxMsgCfg = &(Channel->TxMessages[MsgIndex]);
     69a:	f9 01       	movw	r30, r18
     69c:	a2 84       	ldd	r10, Z+10	; 0x0a
     69e:	b3 84       	ldd	r11, Z+11	; 0x0b
     6a0:	fb e0       	ldi	r31, 0x0B	; 11
     6a2:	5f 9e       	mul	r5, r31
     6a4:	a0 0c       	add	r10, r0
     6a6:	b1 1c       	adc	r11, r1
     6a8:	11 24       	eor	r1, r1

		UWORD RemainingBufferLength = Channel->TxBufferLength; // The whole buffer is available for now
     6aa:	f9 01       	movw	r30, r18
     6ac:	e6 80       	ldd	r14, Z+6	; 0x06
     6ae:	f7 80       	ldd	r15, Z+7	; 0x07

		UBYTE * ChannelDataBuffer = &Channel->TxBuffer[0];
     6b0:	64 80       	ldd	r6, Z+4	; 0x04
     6b2:	75 80       	ldd	r7, Z+5	; 0x05

		UWORD EncodedLength = 0;
     6b4:	1a 82       	std	Y+2, r1	; 0x02
     6b6:	19 82       	std	Y+1, r1	; 0x01
			 * This flag has two uses:
			 * 1. Acts as a Mutex by avoid updating of the Channel Data Buffer when this function is called re-entrantly for the same channel
			 * 2. Acts as a Blocker to avoid updating of the Channel Data Buffer when the channel is communicating, but not completed yet
			 * So, this check should be in the top of any logic that is to be implemented.
			 **/
			if(Channel->ChannelFlags.IsTransmitting == FALSE)
     6b8:	82 89       	ldd	r24, Z+18	; 0x12
     6ba:	84 fd       	sbrc	r24, 4
     6bc:	18 c0       	rjmp	.+48     	; 0x6ee <ComIf_Transmit+0xa4>
			{
				Channel->ChannelFlags.IsTransmitting = TRUE;
     6be:	83 e1       	ldi	r24, 0x13	; 19
     6c0:	88 9d       	mul	r24, r8
     6c2:	f0 01       	movw	r30, r0
     6c4:	89 9d       	mul	r24, r9
     6c6:	f0 0d       	add	r31, r0
     6c8:	11 24       	eor	r1, r1
     6ca:	ef 57       	subi	r30, 0x7F	; 127
     6cc:	ff 4f       	sbci	r31, 0xFF	; 255
     6ce:	80 81       	ld	r24, Z
     6d0:	80 61       	ori	r24, 0x10	; 16
     6d2:	80 83       	st	Z, r24
				}
			}
		}
		#endif

		retval = ComIf_EncodeFromShadowToChannelBuffer(ChannelIndex, MsgIndex, Length, &EncodedLength, ChannelDataBuffer, RemainingBufferLength);
     6d4:	83 01       	movw	r16, r6
     6d6:	9e 01       	movw	r18, r28
     6d8:	2f 5f       	subi	r18, 0xFF	; 255
     6da:	3f 4f       	sbci	r19, 0xFF	; 255
     6dc:	43 2d       	mov	r20, r3
     6de:	65 2d       	mov	r22, r5
     6e0:	84 2d       	mov	r24, r4
     6e2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ComIf_EncodeFromShadowToChannelBuffer>
     6e6:	f8 2e       	mov	r15, r24
		// Reset the value to the initial position so that the transmit function copied the data from the start
		ChannelDataBuffer = &Channel->TxBuffer[0];

		#endif

		if(retval == COMIF_EC_NO_ERROR)
     6e8:	81 11       	cpse	r24, r1
     6ea:	19 c0       	rjmp	.+50     	; 0x71e <ComIf_Transmit+0xd4>
     6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <ComIf_Transmit+0xa8>
				Channel->ChannelFlags.IsTransmitting = TRUE;
			}
			else
			{
				/* Return Channel BUSY if the channel is already transmitting */
				return COMIF_EC_CHANNEL_BUSY;
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	4c c0       	rjmp	.+152    	; 0x78a <ComIf_Transmit+0x140>

		#endif

		if(retval == COMIF_EC_NO_ERROR)
		{
			retval = Channel->Transmit(EncodedLength, ChannelDataBuffer);
     6f2:	83 e1       	ldi	r24, 0x13	; 19
     6f4:	88 9d       	mul	r24, r8
     6f6:	f0 01       	movw	r30, r0
     6f8:	89 9d       	mul	r24, r9
     6fa:	f0 0d       	add	r31, r0
     6fc:	11 24       	eor	r1, r1
     6fe:	e1 59       	subi	r30, 0x91	; 145
     700:	ff 4f       	sbci	r31, 0xFF	; 255
     702:	01 90       	ld	r0, Z+
     704:	f0 81       	ld	r31, Z
     706:	e0 2d       	mov	r30, r0
     708:	b3 01       	movw	r22, r6
     70a:	89 81       	ldd	r24, Y+1	; 0x01
     70c:	9a 81       	ldd	r25, Y+2	; 0x02
     70e:	09 95       	icall
     710:	f8 2e       	mov	r15, r24

			// Channel data buffer has been transmitted properly, then set the PendingConfirmation flag for the sent message
			if(retval == COMIF_EC_NO_ERROR)
     712:	81 11       	cpse	r24, r1
     714:	04 c0       	rjmp	.+8      	; 0x71e <ComIf_Transmit+0xd4>
			{
				TxMsgCfg->TxFlags.PendingForConfirmation = TRUE;
     716:	f5 01       	movw	r30, r10
     718:	84 81       	ldd	r24, Z+4	; 0x04
     71a:	80 61       	ori	r24, 0x10	; 16
     71c:	84 83       	std	Z+4, r24	; 0x04
			// Do Nothing
		}


		/* If there are problems in transmitting the data buffer in the channel */
		if(retval != COMIF_EC_NO_ERROR)
     71e:	ff 20       	and	r15, r15
     720:	d1 f0       	breq	.+52     	; 0x756 <ComIf_Transmit+0x10c>
		{
			/* Clear the Transmitting flag as there is an error */
			Channel->ChannelFlags.IsTransmitting = FALSE;
     722:	83 e1       	ldi	r24, 0x13	; 19
     724:	88 9d       	mul	r24, r8
     726:	f0 01       	movw	r30, r0
     728:	89 9d       	mul	r24, r9
     72a:	f0 0d       	add	r31, r0
     72c:	11 24       	eor	r1, r1
     72e:	ef 57       	subi	r30, 0x7F	; 127
     730:	ff 4f       	sbci	r31, 0xFF	; 255
     732:	80 81       	ld	r24, Z
     734:	8f 7e       	andi	r24, 0xEF	; 239
     736:	80 83       	st	Z, r24
			 * If there are any errors in the transmission of aggregated messages, then do not update the contents AggregatedInBuffer flag
			 * or clear the buffer, keep the aggregated messages in the buffer and attempt retrying in the next task cycle
			 **/

			/* Report Error */
			ComIf_ErrorNotify(Channel, retval, COMIF_DEBUG_DATA_WORDS(ChannelIndex, MsgIndex));
     738:	04 2d       	mov	r16, r4
     73a:	10 e0       	ldi	r17, 0x00	; 0
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	98 01       	movw	r18, r16
     742:	11 27       	eor	r17, r17
     744:	00 27       	eor	r16, r16
     746:	05 29       	or	r16, r5
     748:	4f 2d       	mov	r20, r15
     74a:	50 e0       	ldi	r21, 0x00	; 0
     74c:	60 e0       	ldi	r22, 0x00	; 0
     74e:	70 e0       	ldi	r23, 0x00	; 0
     750:	c6 01       	movw	r24, r12
     752:	0e 94 cc 00 	call	0x198	; 0x198 <ComIf_ErrorNotify>
     756:	8f 2d       	mov	r24, r15
     758:	18 c0       	rjmp	.+48     	; 0x78a <ComIf_Transmit+0x140>
	#endif
	}
    else
    {
    	/* If atleast the channel is valid, then report the channel specific error */
    	if(ChannelIndex < C_ComIfChannel_TOTAL)
     75a:	41 10       	cpse	r4, r1
     75c:	16 c0       	rjmp	.+44     	; 0x78a <ComIf_Transmit+0x140>
    	{
    		ComIf_ChannelConfigType * Channel = &ComIf_ChannelConfig[ChannelIndex];
     75e:	f3 e1       	ldi	r31, 0x13	; 19
     760:	4f 9e       	mul	r4, r31
     762:	c0 01       	movw	r24, r0
     764:	11 24       	eor	r1, r1

    		/* Report Error */
    		ComIf_ErrorNotify(Channel, retval, COMIF_DEBUG_DATA_WORDS(ChannelIndex, MsgIndex));
     766:	04 2d       	mov	r16, r4
     768:	10 e0       	ldi	r17, 0x00	; 0
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	98 01       	movw	r18, r16
     770:	11 27       	eor	r17, r17
     772:	00 27       	eor	r16, r16
     774:	05 29       	or	r16, r5
     776:	4f 2d       	mov	r20, r15
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	81 59       	subi	r24, 0x91	; 145
     780:	9f 4f       	sbci	r25, 0xFF	; 255
     782:	0e 94 cc 00 	call	0x198	; 0x198 <ComIf_ErrorNotify>
 **/
UBYTE ComIf_Transmit(UBYTE ChannelIndex, UBYTE MsgIndex, void * DataPtr, UBYTE Length)
{
	/* Copy the Data to the Message specific shadow buffer before processing it any further */
	/* This function will also acts as a validity checks for the passed arguments */
	UBYTE retval = ComIf_UpdateTxShadowBuffer(ChannelIndex, MsgIndex, DataPtr, Length);
     786:	8f 2d       	mov	r24, r15
     788:	00 c0       	rjmp	.+0      	; 0x78a <ComIf_Transmit+0x140>
    		ComIf_ErrorNotify(Channel, retval, COMIF_DEBUG_DATA_WORDS(ChannelIndex, MsgIndex));
    	}
    }

	return retval;
}
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
     796:	ff 90       	pop	r15
     798:	ef 90       	pop	r14
     79a:	df 90       	pop	r13
     79c:	cf 90       	pop	r12
     79e:	bf 90       	pop	r11
     7a0:	af 90       	pop	r10
     7a2:	9f 90       	pop	r9
     7a4:	8f 90       	pop	r8
     7a6:	7f 90       	pop	r7
     7a8:	6f 90       	pop	r6
     7aa:	5f 90       	pop	r5
     7ac:	4f 90       	pop	r4
     7ae:	3f 90       	pop	r3
     7b0:	08 95       	ret

000007b2 <ComIf_UpdateTxShadowBuffer>:
    return BufPtr;
}

/* Function to Update the Shadow Buffer */
UBYTE ComIf_UpdateTxShadowBuffer(UBYTE ChannelIndex, UBYTE MsgIndex, void * DataPtr, UBYTE Length)
{
     7b2:	ef 92       	push	r14
     7b4:	ff 92       	push	r15
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	1f 92       	push	r1
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62
     7c4:	29 83       	std	Y+1, r18	; 0x01
	UBYTE retval = COMIF_EC_GENERIC_ERROR;

	if(ChannelIndex < C_ComIfChannel_TOTAL)
     7c6:	81 11       	cpse	r24, r1
     7c8:	5a c0       	rjmp	.+180    	; 0x87e <__stack+0x1f>
	{
		ComIf_ChannelConfigType * Channel = &ComIf_ChannelConfig[ChannelIndex];
     7ca:	90 e0       	ldi	r25, 0x00	; 0

		if(MsgIndex < Channel->TotalTxMessages)
     7cc:	23 e1       	ldi	r18, 0x13	; 19
     7ce:	28 9f       	mul	r18, r24
     7d0:	f0 01       	movw	r30, r0
     7d2:	29 9f       	mul	r18, r25
     7d4:	f0 0d       	add	r31, r0
     7d6:	11 24       	eor	r1, r1
     7d8:	e1 59       	subi	r30, 0x91	; 145
     7da:	ff 4f       	sbci	r31, 0xFF	; 255
     7dc:	24 85       	ldd	r18, Z+12	; 0x0c
     7de:	62 17       	cp	r22, r18
     7e0:	08 f0       	brcs	.+2      	; 0x7e4 <ComIf_UpdateTxShadowBuffer+0x32>
     7e2:	4f c0       	rjmp	.+158    	; 0x882 <__stack+0x23>
		{
			ComIfTxMessageConfig * TxMsgCfg = &(Channel->TxMessages[MsgIndex]);
     7e4:	23 e1       	ldi	r18, 0x13	; 19
     7e6:	28 9f       	mul	r18, r24
     7e8:	f0 01       	movw	r30, r0
     7ea:	29 9f       	mul	r18, r25
     7ec:	f0 0d       	add	r31, r0
     7ee:	11 24       	eor	r1, r1
     7f0:	e1 59       	subi	r30, 0x91	; 145
     7f2:	ff 4f       	sbci	r31, 0xFF	; 255
     7f4:	e2 84       	ldd	r14, Z+10	; 0x0a
     7f6:	f3 84       	ldd	r15, Z+11	; 0x0b
     7f8:	2b e0       	ldi	r18, 0x0B	; 11
     7fa:	62 9f       	mul	r22, r18
     7fc:	e0 0c       	add	r14, r0
     7fe:	f1 1c       	adc	r15, r1
     800:	11 24       	eor	r1, r1

			if(
		#if (COMIF_MAX_SUPPORTED_DLC < 255)
				((TxMsgCfg->Length <= COMIF_MAX_SUPPORTED_DLC) && (Length == TxMsgCfg->Length))
		#else
				(Length == TxMsgCfg->Length)
     802:	d7 01       	movw	r26, r14
     804:	11 96       	adiw	r26, 0x01	; 1
     806:	2c 91       	ld	r18, X
     808:	39 81       	ldd	r19, Y+1	; 0x01

		if(MsgIndex < Channel->TotalTxMessages)
		{
			ComIfTxMessageConfig * TxMsgCfg = &(Channel->TxMessages[MsgIndex]);

			if(
     80a:	23 17       	cp	r18, r19
     80c:	79 f0       	breq	.+30     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
				((TxMsgCfg->Length <= COMIF_MAX_SUPPORTED_DLC) && (Length == TxMsgCfg->Length))
		#else
				(Length == TxMsgCfg->Length)
		#endif
		#ifdef COMIF_DYNAMIC_DATA_LENGTH_ENABLED
			 || ((TxMsgCfg->Length == 0) && (Length != 0) && (Length <= Channel->DynamicMaxDataLength))
     80e:	21 11       	cpse	r18, r1
     810:	3a c0       	rjmp	.+116    	; 0x886 <__stack+0x27>
     812:	33 23       	and	r19, r19
     814:	d1 f1       	breq	.+116    	; 0x88a <__stack+0x2b>
     816:	23 e1       	ldi	r18, 0x13	; 19
     818:	28 9f       	mul	r18, r24
     81a:	f0 01       	movw	r30, r0
     81c:	29 9f       	mul	r18, r25
     81e:	f0 0d       	add	r31, r0
     820:	11 24       	eor	r1, r1
     822:	e1 59       	subi	r30, 0x91	; 145
     824:	ff 4f       	sbci	r31, 0xFF	; 255
     826:	80 85       	ldd	r24, Z+8	; 0x08
     828:	83 17       	cp	r24, r19
     82a:	88 f1       	brcs	.+98     	; 0x88e <__stack+0x2f>
     82c:	8a 01       	movw	r16, r20
			)
			{
				int i = 0;

				/* Check if the data needs to be updated from the TxCbk */
				if(TxMsgCfg->TxCallback != NULL)
     82e:	d7 01       	movw	r26, r14
     830:	19 96       	adiw	r26, 0x09	; 9
     832:	ed 91       	ld	r30, X+
     834:	fc 91       	ld	r31, X
     836:	1a 97       	sbiw	r26, 0x0a	; 10
     838:	30 97       	sbiw	r30, 0x00	; 0
     83a:	31 f0       	breq	.+12     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
				{
					retval = TxMsgCfg->TxCallback((UBYTE*)DataPtr, &Length);
     83c:	be 01       	movw	r22, r28
     83e:	6f 5f       	subi	r22, 0xFF	; 255
     840:	7f 4f       	sbci	r23, 0xFF	; 255
     842:	ca 01       	movw	r24, r20
     844:	09 95       	icall
     846:	01 c0       	rjmp	.+2      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
				}
				else
				{
					retval = COMIF_EC_NO_ERROR;
     848:	80 e0       	ldi	r24, 0x00	; 0
				}

				if(retval == COMIF_EC_NO_ERROR)
     84a:	88 23       	and	r24, r24
     84c:	81 f0       	breq	.+32     	; 0x86e <__stack+0xf>
     84e:	20 c0       	rjmp	.+64     	; 0x890 <__stack+0x31>
				{
					ComIf_Lock_TxShadowBuffer();
					/* Copy Data */
					for(i = 0; i < Length; i++)
					{
						TxMsgCfg->ShadowBuffer[i] = ((UBYTE*)DataPtr)[i];
     850:	d7 01       	movw	r26, r14
     852:	15 96       	adiw	r26, 0x05	; 5
     854:	ed 91       	ld	r30, X+
     856:	fc 91       	ld	r31, X
     858:	16 97       	sbiw	r26, 0x06	; 6
     85a:	e2 0f       	add	r30, r18
     85c:	f3 1f       	adc	r31, r19
     85e:	d8 01       	movw	r26, r16
     860:	a2 0f       	add	r26, r18
     862:	b3 1f       	adc	r27, r19
     864:	9c 91       	ld	r25, X
     866:	90 83       	st	Z, r25

				if(retval == COMIF_EC_NO_ERROR)
				{
					ComIf_Lock_TxShadowBuffer();
					/* Copy Data */
					for(i = 0; i < Length; i++)
     868:	2f 5f       	subi	r18, 0xFF	; 255
     86a:	3f 4f       	sbci	r19, 0xFF	; 255
     86c:	02 c0       	rjmp	.+4      	; 0x872 <__stack+0x13>
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	49 81       	ldd	r20, Y+1	; 0x01
     874:	50 e0       	ldi	r21, 0x00	; 0
     876:	24 17       	cp	r18, r20
     878:	35 07       	cpc	r19, r21
     87a:	54 f3       	brlt	.-44     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
     87c:	09 c0       	rjmp	.+18     	; 0x890 <__stack+0x31>
			retval = COMIF_EC_INVALID_MSG;
		}
	}
	else
	{
		retval = COMIF_EC_INVALID_CHANNEL;
     87e:	81 e1       	ldi	r24, 0x11	; 17
     880:	07 c0       	rjmp	.+14     	; 0x890 <__stack+0x31>
				retval = COMIF_EC_INVALID_DLC;
			}
		}
		else
		{
			retval = COMIF_EC_INVALID_MSG;
     882:	80 e1       	ldi	r24, 0x10	; 16
     884:	05 c0       	rjmp	.+10     	; 0x890 <__stack+0x31>
					retval = COMIF_EC_NO_ERROR;
				}
			}
			else
			{
				retval = COMIF_EC_INVALID_DLC;
     886:	8e e0       	ldi	r24, 0x0E	; 14
     888:	03 c0       	rjmp	.+6      	; 0x890 <__stack+0x31>
     88a:	8e e0       	ldi	r24, 0x0E	; 14
     88c:	01 c0       	rjmp	.+2      	; 0x890 <__stack+0x31>
     88e:	8e e0       	ldi	r24, 0x0E	; 14
	{
		retval = COMIF_EC_INVALID_CHANNEL;
	}

	return retval;
}
     890:	0f 90       	pop	r0
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	1f 91       	pop	r17
     898:	0f 91       	pop	r16
     89a:	ff 90       	pop	r15
     89c:	ef 90       	pop	r14
     89e:	08 95       	ret

000008a0 <Buffer_GetBuffer>:
/*                     Buffer Get Function                        */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
BufferType_ST * Buffer_GetBuffer(UBYTE BufferID)
{
	/* Check if the BufferID is valid */
	if(BufferID < BUFFER_MAX_COUNT)
     8a0:	81 11       	cpse	r24, r1
     8a2:	0b c0       	rjmp	.+22     	; 0x8ba <Buffer_GetBuffer+0x1a>
	{
		return &(Buffers[BufferID]);
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	9c 01       	movw	r18, r24
     8a8:	22 0f       	add	r18, r18
     8aa:	33 1f       	adc	r19, r19
     8ac:	82 0f       	add	r24, r18
     8ae:	93 1f       	adc	r25, r19
     8b0:	88 0f       	add	r24, r24
     8b2:	99 1f       	adc	r25, r25
     8b4:	85 5e       	subi	r24, 0xE5	; 229
     8b6:	9b 4f       	sbci	r25, 0xFB	; 251
     8b8:	08 95       	ret
	}
	else
	{
		/* Maximum Buffer Count Reached / Invalid Buffer ID */
		return NULL_PTR;
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     8be:	08 95       	ret

000008c0 <Buffer_Create>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                  Buffer Create Function                        */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
BOOL Buffer_Create(UBYTE BufferID, UBYTE * BufferPtr, BufferLengthType Size)
{
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	cf 93       	push	r28
     8c6:	8b 01       	movw	r16, r22
     8c8:	c4 2f       	mov	r28, r20
	BOOL retval = FALSE;

	BufferType_ST * Buffer = Buffer_GetBuffer(BufferID);
     8ca:	0e 94 50 04 	call	0x8a0	; 0x8a0 <Buffer_GetBuffer>

	/* Check if the Buffer is valid */
	if(Buffer != NULL_PTR)
     8ce:	00 97       	sbiw	r24, 0x00	; 0
     8d0:	69 f0       	breq	.+26     	; 0x8ec <Buffer_Create+0x2c>
	{
		if(Buffer->BufferPtr == NULL_PTR)
     8d2:	fc 01       	movw	r30, r24
     8d4:	20 81       	ld	r18, Z
     8d6:	31 81       	ldd	r19, Z+1	; 0x01
     8d8:	23 2b       	or	r18, r19
     8da:	51 f4       	brne	.+20     	; 0x8f0 <Buffer_Create+0x30>
		{
			Buffer->BufferPtr = BufferPtr;
     8dc:	11 83       	std	Z+1, r17	; 0x01
     8de:	00 83       	st	Z, r16
			Buffer->Size = Size;
     8e0:	c2 83       	std	Z+2, r28	; 0x02
			Buffer->HeadIndex = 0;
     8e2:	14 82       	std	Z+4, r1	; 0x04
			Buffer->Length = 0;
     8e4:	13 82       	std	Z+3, r1	; 0x03
			Buffer->TailIndex = 0;
     8e6:	15 82       	std	Z+5, r1	; 0x05

			retval = TRUE;
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	03 c0       	rjmp	.+6      	; 0x8f2 <Buffer_Create+0x32>
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                  Buffer Create Function                        */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
BOOL Buffer_Create(UBYTE BufferID, UBYTE * BufferPtr, BufferLengthType Size)
{
	BOOL retval = FALSE;
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <Buffer_Create+0x32>
     8f0:	80 e0       	ldi	r24, 0x00	; 0
			retval = TRUE;
		}
	}

	return retval;
}
     8f2:	cf 91       	pop	r28
     8f4:	1f 91       	pop	r17
     8f6:	0f 91       	pop	r16
     8f8:	08 95       	ret

000008fa <Buffer_EnQueue>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                  Buffer EnQueue Function                       */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
BOOL Buffer_EnQueue(UBYTE BufferID, UBYTE Data)
{
     8fa:	cf 93       	push	r28
     8fc:	c6 2f       	mov	r28, r22
	BOOL retval = FALSE;

	BufferType_ST * Buffer = Buffer_GetBuffer(BufferID);
     8fe:	0e 94 50 04 	call	0x8a0	; 0x8a0 <Buffer_GetBuffer>
     902:	fc 01       	movw	r30, r24

	/* Check if the Buffer is valid */
	if(Buffer != NULL_PTR)
     904:	89 2b       	or	r24, r25
     906:	d9 f0       	breq	.+54     	; 0x93e <Buffer_EnQueue+0x44>
	{
		if(Buffer->BufferPtr != NULL_PTR)
     908:	80 81       	ld	r24, Z
     90a:	91 81       	ldd	r25, Z+1	; 0x01
     90c:	00 97       	sbiw	r24, 0x00	; 0
     90e:	c9 f0       	breq	.+50     	; 0x942 <Buffer_EnQueue+0x48>
		{
			/* If the Buffer is Free */
			if(Buffer->Length < Buffer->Size)
     910:	33 81       	ldd	r19, Z+3	; 0x03
     912:	22 81       	ldd	r18, Z+2	; 0x02
     914:	32 17       	cp	r19, r18
     916:	b8 f4       	brcc	.+46     	; 0x946 <Buffer_EnQueue+0x4c>
			{
				Buffer->BufferPtr[Buffer->TailIndex] = Data;
     918:	25 81       	ldd	r18, Z+5	; 0x05
     91a:	dc 01       	movw	r26, r24
     91c:	a2 0f       	add	r26, r18
     91e:	b1 1d       	adc	r27, r1
     920:	cc 93       	st	X, r28

				Buffer->TailIndex++; // Increment the Tail position for next Insertion
     922:	85 81       	ldd	r24, Z+5	; 0x05
     924:	8f 5f       	subi	r24, 0xFF	; 255
     926:	85 83       	std	Z+5, r24	; 0x05

				Buffer->Length++; // Increment the Length of the Buffer
     928:	93 81       	ldd	r25, Z+3	; 0x03
     92a:	9f 5f       	subi	r25, 0xFF	; 255
     92c:	93 83       	std	Z+3, r25	; 0x03

				/* Logic to implement a Circular Buffer */
				if((Buffer->TailIndex == Buffer->Size) && (Buffer->Length < Buffer->Size))
     92e:	22 81       	ldd	r18, Z+2	; 0x02
     930:	82 13       	cpse	r24, r18
     932:	0b c0       	rjmp	.+22     	; 0x94a <Buffer_EnQueue+0x50>
     934:	92 17       	cp	r25, r18
     936:	58 f4       	brcc	.+22     	; 0x94e <Buffer_EnQueue+0x54>
				{
					Buffer->TailIndex = 0; // Circle back to 0
     938:	15 82       	std	Z+5, r1	; 0x05
				}

				retval = TRUE;
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	09 c0       	rjmp	.+18     	; 0x950 <Buffer_EnQueue+0x56>
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                  Buffer EnQueue Function                       */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
BOOL Buffer_EnQueue(UBYTE BufferID, UBYTE Data)
{
	BOOL retval = FALSE;
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	07 c0       	rjmp	.+14     	; 0x950 <Buffer_EnQueue+0x56>
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	05 c0       	rjmp	.+10     	; 0x950 <Buffer_EnQueue+0x56>
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	03 c0       	rjmp	.+6      	; 0x950 <Buffer_EnQueue+0x56>
				if((Buffer->TailIndex == Buffer->Size) && (Buffer->Length < Buffer->Size))
				{
					Buffer->TailIndex = 0; // Circle back to 0
				}

				retval = TRUE;
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	01 c0       	rjmp	.+2      	; 0x950 <Buffer_EnQueue+0x56>
     94e:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}

	return retval;
}
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <Buffer_DeQueue>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                  Buffer DeQueue Function                       */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
BOOL Buffer_DeQueue(UBYTE BufferID, UBYTE * Data)
{
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	eb 01       	movw	r28, r22
	BOOL retval = FALSE;

	BufferType_ST * Buffer = Buffer_GetBuffer(BufferID);
     95a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <Buffer_GetBuffer>
     95e:	fc 01       	movw	r30, r24

	/* Check if the Buffer is valid */
	if(Buffer != NULL_PTR)
     960:	89 2b       	or	r24, r25
     962:	21 f1       	breq	.+72     	; 0x9ac <Buffer_DeQueue+0x58>
	{
		if(Buffer->BufferPtr != NULL_PTR)
     964:	80 81       	ld	r24, Z
     966:	91 81       	ldd	r25, Z+1	; 0x01
     968:	00 97       	sbiw	r24, 0x00	; 0
     96a:	11 f1       	breq	.+68     	; 0x9b0 <Buffer_DeQueue+0x5c>
		{
			/* If the Buffer is not Empty */
			if(Buffer->Length != 0)
     96c:	23 81       	ldd	r18, Z+3	; 0x03
     96e:	22 23       	and	r18, r18
     970:	09 f1       	breq	.+66     	; 0x9b4 <Buffer_DeQueue+0x60>
			{
				*Data = Buffer->BufferPtr[Buffer->HeadIndex];
     972:	24 81       	ldd	r18, Z+4	; 0x04
     974:	dc 01       	movw	r26, r24
     976:	a2 0f       	add	r26, r18
     978:	b1 1d       	adc	r27, r1
     97a:	8c 91       	ld	r24, X
     97c:	88 83       	st	Y, r24

				Buffer->BufferPtr[Buffer->HeadIndex] = 0; // While Dequeuing clear the value
     97e:	a0 81       	ld	r26, Z
     980:	b1 81       	ldd	r27, Z+1	; 0x01
     982:	84 81       	ldd	r24, Z+4	; 0x04
     984:	a8 0f       	add	r26, r24
     986:	b1 1d       	adc	r27, r1
     988:	1c 92       	st	X, r1

				Buffer->HeadIndex++; // Increment the Head position for next Dequeuing
     98a:	94 81       	ldd	r25, Z+4	; 0x04
     98c:	9f 5f       	subi	r25, 0xFF	; 255
     98e:	94 83       	std	Z+4, r25	; 0x04

				Buffer->Length--; // Decrement the Length of the Buffer
     990:	83 81       	ldd	r24, Z+3	; 0x03
     992:	81 50       	subi	r24, 0x01	; 1
     994:	83 83       	std	Z+3, r24	; 0x03

				/* Logic to implement a Circular Buffer */
				if((Buffer->HeadIndex == Buffer->Size) && (Buffer->Length != 0))
     996:	22 81       	ldd	r18, Z+2	; 0x02
     998:	92 13       	cpse	r25, r18
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <Buffer_DeQueue+0x4c>
     99c:	81 11       	cpse	r24, r1
				{
					Buffer->HeadIndex = 0; // Circle back to 0
     99e:	14 82       	std	Z+4, r1	; 0x04
				}

				/* If the Buffer is empty, then reset the Head and Tail Indices */
				if(Buffer->Length == 0)
     9a0:	81 11       	cpse	r24, r1
     9a2:	0a c0       	rjmp	.+20     	; 0x9b8 <Buffer_DeQueue+0x64>
				{
					Buffer->HeadIndex = 0;
     9a4:	14 82       	std	Z+4, r1	; 0x04
					Buffer->TailIndex = 0;
     9a6:	15 82       	std	Z+5, r1	; 0x05
				}

				retval = TRUE;
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	07 c0       	rjmp	.+14     	; 0x9ba <Buffer_DeQueue+0x66>
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                  Buffer DeQueue Function                       */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
BOOL Buffer_DeQueue(UBYTE BufferID, UBYTE * Data)
{
	BOOL retval = FALSE;
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	05 c0       	rjmp	.+10     	; 0x9ba <Buffer_DeQueue+0x66>
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	03 c0       	rjmp	.+6      	; 0x9ba <Buffer_DeQueue+0x66>
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	01 c0       	rjmp	.+2      	; 0x9ba <Buffer_DeQueue+0x66>
				{
					Buffer->HeadIndex = 0;
					Buffer->TailIndex = 0;
				}

				retval = TRUE;
     9b8:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}

	return retval;
}
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	08 95       	ret

000009c0 <Buffer_Length>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
BufferLengthType Buffer_Length(UBYTE BufferID)
{
	BufferLengthType Length = 0;

	BufferType_ST * Buffer = Buffer_GetBuffer(BufferID);
     9c0:	0e 94 50 04 	call	0x8a0	; 0x8a0 <Buffer_GetBuffer>

	/* Check if the Buffer is valid */
	if(Buffer != NULL_PTR)
     9c4:	00 97       	sbiw	r24, 0x00	; 0
     9c6:	39 f0       	breq	.+14     	; 0x9d6 <Buffer_Length+0x16>
	{
		if(Buffer->BufferPtr != NULL_PTR)
     9c8:	fc 01       	movw	r30, r24
     9ca:	20 81       	ld	r18, Z
     9cc:	31 81       	ldd	r19, Z+1	; 0x01
     9ce:	23 2b       	or	r18, r19
     9d0:	21 f0       	breq	.+8      	; 0x9da <Buffer_Length+0x1a>
		{
			Length = Buffer->Length;
     9d2:	83 81       	ldd	r24, Z+3	; 0x03
     9d4:	08 95       	ret
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                  Buffer Length Function                        */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
BufferLengthType Buffer_Length(UBYTE BufferID)
{
	BufferLengthType Length = 0;
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	08 95       	ret
     9da:	80 e0       	ldi	r24, 0x00	; 0
			Length = Buffer->Length;
		}
	}

	return Length;
}
     9dc:	08 95       	ret

000009de <StringHelper_GetPointerAfter>:

		StringHelper_ClearBuffer();
	}

	return retval;
}
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	fc 01       	movw	r30, r24
     9e8:	01 90       	ld	r0, Z+
     9ea:	00 20       	and	r0, r0
     9ec:	e9 f7       	brne	.-6      	; 0x9e8 <StringHelper_GetPointerAfter+0xa>
     9ee:	31 97       	sbiw	r30, 0x01	; 1
     9f0:	e8 1b       	sub	r30, r24
     9f2:	f9 0b       	sbc	r31, r25
     9f4:	db 01       	movw	r26, r22
     9f6:	0d 90       	ld	r0, X+
     9f8:	00 20       	and	r0, r0
     9fa:	e9 f7       	brne	.-6      	; 0x9f6 <StringHelper_GetPointerAfter+0x18>
     9fc:	11 97       	sbiw	r26, 0x01	; 1
     9fe:	ed 01       	movw	r28, r26
     a00:	c6 1b       	sub	r28, r22
     a02:	d7 0b       	sbc	r29, r23
     a04:	ce 17       	cp	r28, r30
     a06:	df 07       	cpc	r29, r31
     a08:	84 f4       	brge	.+32     	; 0xa2a <StringHelper_GetPointerAfter+0x4c>
     a0a:	20 97       	sbiw	r28, 0x00	; 0
     a0c:	71 f0       	breq	.+28     	; 0xa2a <StringHelper_GetPointerAfter+0x4c>
     a0e:	0e 94 21 14 	call	0x2842	; 0x2842 <strstr>
     a12:	fc 01       	movw	r30, r24
     a14:	01 90       	ld	r0, Z+
     a16:	00 20       	and	r0, r0
     a18:	e9 f7       	brne	.-6      	; 0xa14 <StringHelper_GetPointerAfter+0x36>
     a1a:	31 97       	sbiw	r30, 0x01	; 1
     a1c:	e8 1b       	sub	r30, r24
     a1e:	f9 0b       	sbc	r31, r25
     a20:	ce 17       	cp	r28, r30
     a22:	df 07       	cpc	r29, r31
     a24:	11 f0       	breq	.+4      	; 0xa2a <StringHelper_GetPointerAfter+0x4c>
     a26:	8c 0f       	add	r24, r28
     a28:	9d 1f       	adc	r25, r29
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	1f 91       	pop	r17
     a30:	0f 91       	pop	r16
     a32:	08 95       	ret

00000a34 <StringHelper_SplitAndGet>:
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	dc 01       	movw	r26, r24
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	c0 e0       	ldi	r28, 0x00	; 0
     a44:	d0 e0       	ldi	r29, 0x00	; 0
     a46:	00 e0       	ldi	r16, 0x00	; 0
     a48:	10 e0       	ldi	r17, 0x00	; 0
     a4a:	0f c0       	rjmp	.+30     	; 0xa6a <StringHelper_SplitAndGet+0x36>
     a4c:	86 13       	cpse	r24, r22
     a4e:	0b c0       	rjmp	.+22     	; 0xa66 <StringHelper_SplitAndGet+0x32>
     a50:	0f 5f       	subi	r16, 0xFF	; 255
     a52:	1f 4f       	sbci	r17, 0xFF	; 255
     a54:	04 17       	cp	r16, r20
     a56:	15 07       	cpc	r17, r21
     a58:	21 f4       	brne	.+8      	; 0xa62 <StringHelper_SplitAndGet+0x2e>
     a5a:	b9 01       	movw	r22, r18
     a5c:	6c 1b       	sub	r22, r28
     a5e:	7d 0b       	sbc	r23, r29
     a60:	0c c0       	rjmp	.+24     	; 0xa7a <StringHelper_SplitAndGet+0x46>
     a62:	e9 01       	movw	r28, r18
     a64:	21 96       	adiw	r28, 0x01	; 1
     a66:	2f 5f       	subi	r18, 0xFF	; 255
     a68:	3f 4f       	sbci	r19, 0xFF	; 255
     a6a:	fd 01       	movw	r30, r26
     a6c:	e2 0f       	add	r30, r18
     a6e:	f3 1f       	adc	r31, r19
     a70:	80 81       	ld	r24, Z
     a72:	81 11       	cpse	r24, r1
     a74:	eb cf       	rjmp	.-42     	; 0xa4c <StringHelper_SplitAndGet+0x18>
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	61 15       	cp	r22, r1
     a7c:	71 05       	cpc	r23, r1
     a7e:	41 f4       	brne	.+16     	; 0xa90 <StringHelper_SplitAndGet+0x5c>
     a80:	0f 5f       	subi	r16, 0xFF	; 255
     a82:	1f 4f       	sbci	r17, 0xFF	; 255
     a84:	04 17       	cp	r16, r20
     a86:	15 07       	cpc	r17, r21
     a88:	19 f4       	brne	.+6      	; 0xa90 <StringHelper_SplitAndGet+0x5c>
     a8a:	b9 01       	movw	r22, r18
     a8c:	6c 1b       	sub	r22, r28
     a8e:	7d 0b       	sbc	r23, r29
     a90:	61 15       	cp	r22, r1
     a92:	71 05       	cpc	r23, r1
     a94:	09 f1       	breq	.+66     	; 0xad8 <StringHelper_SplitAndGet+0xa4>
     a96:	ab 01       	movw	r20, r22
     a98:	4f 5f       	subi	r20, 0xFF	; 255
     a9a:	5f 4f       	sbci	r21, 0xFF	; 255
     a9c:	4f 3f       	cpi	r20, 0xFF	; 255
     a9e:	51 05       	cpc	r21, r1
     aa0:	89 f0       	breq	.+34     	; 0xac4 <StringHelper_SplitAndGet+0x90>
     aa2:	80 f0       	brcs	.+32     	; 0xac4 <StringHelper_SplitAndGet+0x90>
     aa4:	40 e0       	ldi	r20, 0x00	; 0
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	19 c0       	rjmp	.+50     	; 0xadc <StringHelper_SplitAndGet+0xa8>
     aaa:	fd 01       	movw	r30, r26
     aac:	ec 0f       	add	r30, r28
     aae:	fd 1f       	adc	r31, r29
     ab0:	e2 0f       	add	r30, r18
     ab2:	f3 1f       	adc	r31, r19
     ab4:	90 81       	ld	r25, Z
     ab6:	f9 01       	movw	r30, r18
     ab8:	ef 5d       	subi	r30, 0xDF	; 223
     aba:	fb 4f       	sbci	r31, 0xFB	; 251
     abc:	90 83       	st	Z, r25
     abe:	2f 5f       	subi	r18, 0xFF	; 255
     ac0:	3f 4f       	sbci	r19, 0xFF	; 255
     ac2:	02 c0       	rjmp	.+4      	; 0xac8 <StringHelper_SplitAndGet+0x94>
     ac4:	20 e0       	ldi	r18, 0x00	; 0
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	26 17       	cp	r18, r22
     aca:	37 07       	cpc	r19, r23
     acc:	70 f3       	brcs	.-36     	; 0xaaa <StringHelper_SplitAndGet+0x76>
     ace:	f9 01       	movw	r30, r18
     ad0:	ef 5d       	subi	r30, 0xDF	; 223
     ad2:	fb 4f       	sbci	r31, 0xFB	; 251
     ad4:	10 82       	st	Z, r1
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <StringHelper_SplitAndGet+0xa8>
     ad8:	40 e0       	ldi	r20, 0x00	; 0
     ada:	50 e0       	ldi	r21, 0x00	; 0
     adc:	ca 01       	movw	r24, r20
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	08 95       	ret

00000ae8 <StringHelper_startsWith>:


BOOL StringHelper_startsWith(const char *pre, const char *str)
{
     ae8:	cf 92       	push	r12
     aea:	df 92       	push	r13
     aec:	ef 92       	push	r14
     aee:	ff 92       	push	r15
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
    ULONG lenpre = strlen(pre),
     af4:	fc 01       	movw	r30, r24
     af6:	01 90       	ld	r0, Z+
     af8:	00 20       	and	r0, r0
     afa:	e9 f7       	brne	.-6      	; 0xaf6 <StringHelper_startsWith+0xe>
     afc:	31 97       	sbiw	r30, 0x01	; 1
     afe:	af 01       	movw	r20, r30
     b00:	48 1b       	sub	r20, r24
     b02:	59 0b       	sbc	r21, r25
     b04:	6a 01       	movw	r12, r20
     b06:	e1 2c       	mov	r14, r1
     b08:	f1 2c       	mov	r15, r1
    	  lenstr = strlen(str);
     b0a:	fb 01       	movw	r30, r22
     b0c:	01 90       	ld	r0, Z+
     b0e:	00 20       	and	r0, r0
     b10:	e9 f7       	brne	.-6      	; 0xb0c <StringHelper_startsWith+0x24>
     b12:	31 97       	sbiw	r30, 0x01	; 1
     b14:	8f 01       	movw	r16, r30
     b16:	06 1b       	sub	r16, r22
     b18:	17 0b       	sbc	r17, r23
     b1a:	20 e0       	ldi	r18, 0x00	; 0
     b1c:	30 e0       	ldi	r19, 0x00	; 0

    return lenstr < lenpre ? FALSE : (memcmp(pre, str, lenpre) == 0);
     b1e:	0c 15       	cp	r16, r12
     b20:	1d 05       	cpc	r17, r13
     b22:	2e 05       	cpc	r18, r14
     b24:	3f 05       	cpc	r19, r15
     b26:	30 f0       	brcs	.+12     	; 0xb34 <StringHelper_startsWith+0x4c>
     b28:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <memcmp>
     b2c:	89 2b       	or	r24, r25
     b2e:	21 f0       	breq	.+8      	; 0xb38 <StringHelper_startsWith+0x50>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	03 c0       	rjmp	.+6      	; 0xb3a <StringHelper_startsWith+0x52>
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	01 c0       	rjmp	.+2      	; 0xb3a <StringHelper_startsWith+0x52>
     b38:	81 e0       	ldi	r24, 0x01	; 1
}
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	df 90       	pop	r13
     b44:	cf 90       	pop	r12
     b46:	08 95       	ret

00000b48 <lcd_data>:
	aa=aa/10;
	lcd_dat(aa+48);
	lcd_dat(a2+48);
	lcd_string(".");
	lcd_dat(a1+48);
}
     b48:	84 ff       	sbrs	r24, 4
     b4a:	04 c0       	rjmp	.+8      	; 0xb54 <lcd_data+0xc>
     b4c:	92 b3       	in	r25, 0x12	; 18
     b4e:	90 61       	ori	r25, 0x10	; 16
     b50:	92 bb       	out	0x12, r25	; 18
     b52:	03 c0       	rjmp	.+6      	; 0xb5a <lcd_data+0x12>
     b54:	92 b3       	in	r25, 0x12	; 18
     b56:	9f 7e       	andi	r25, 0xEF	; 239
     b58:	92 bb       	out	0x12, r25	; 18
     b5a:	85 ff       	sbrs	r24, 5
     b5c:	04 c0       	rjmp	.+8      	; 0xb66 <lcd_data+0x1e>
     b5e:	92 b3       	in	r25, 0x12	; 18
     b60:	90 62       	ori	r25, 0x20	; 32
     b62:	92 bb       	out	0x12, r25	; 18
     b64:	03 c0       	rjmp	.+6      	; 0xb6c <lcd_data+0x24>
     b66:	92 b3       	in	r25, 0x12	; 18
     b68:	9f 7d       	andi	r25, 0xDF	; 223
     b6a:	92 bb       	out	0x12, r25	; 18
     b6c:	86 ff       	sbrs	r24, 6
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <lcd_data+0x30>
     b70:	92 b3       	in	r25, 0x12	; 18
     b72:	90 64       	ori	r25, 0x40	; 64
     b74:	92 bb       	out	0x12, r25	; 18
     b76:	03 c0       	rjmp	.+6      	; 0xb7e <lcd_data+0x36>
     b78:	92 b3       	in	r25, 0x12	; 18
     b7a:	9f 7b       	andi	r25, 0xBF	; 191
     b7c:	92 bb       	out	0x12, r25	; 18
     b7e:	88 23       	and	r24, r24
     b80:	24 f4       	brge	.+8      	; 0xb8a <lcd_data+0x42>
     b82:	82 b3       	in	r24, 0x12	; 18
     b84:	80 68       	ori	r24, 0x80	; 128
     b86:	82 bb       	out	0x12, r24	; 18
     b88:	08 95       	ret
     b8a:	82 b3       	in	r24, 0x12	; 18
     b8c:	8f 77       	andi	r24, 0x7F	; 127
     b8e:	82 bb       	out	0x12, r24	; 18
     b90:	08 95       	ret

00000b92 <lcd_cursor>:
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	0e 94 a4 05 	call	0xb48	; 0xb48 <lcd_data>
     b98:	88 b3       	in	r24, 0x18	; 24
     b9a:	87 7f       	andi	r24, 0xF7	; 247
     b9c:	88 bb       	out	0x18, r24	; 24
     b9e:	88 b3       	in	r24, 0x18	; 24
     ba0:	80 61       	ori	r24, 0x10	; 16
     ba2:	88 bb       	out	0x18, r24	; 24
     ba4:	8f ec       	ldi	r24, 0xCF	; 207
     ba6:	97 e0       	ldi	r25, 0x07	; 7
     ba8:	01 97       	sbiw	r24, 0x01	; 1
     baa:	f1 f7       	brne	.-4      	; 0xba8 <lcd_cursor+0x16>
     bac:	00 c0       	rjmp	.+0      	; 0xbae <lcd_cursor+0x1c>
     bae:	00 00       	nop
     bb0:	88 b3       	in	r24, 0x18	; 24
     bb2:	8f 7e       	andi	r24, 0xEF	; 239
     bb4:	88 bb       	out	0x18, r24	; 24
     bb6:	80 e2       	ldi	r24, 0x20	; 32
     bb8:	0e 94 a4 05 	call	0xb48	; 0xb48 <lcd_data>
     bbc:	88 b3       	in	r24, 0x18	; 24
     bbe:	87 7f       	andi	r24, 0xF7	; 247
     bc0:	88 bb       	out	0x18, r24	; 24
     bc2:	88 b3       	in	r24, 0x18	; 24
     bc4:	80 61       	ori	r24, 0x10	; 16
     bc6:	88 bb       	out	0x18, r24	; 24
     bc8:	8f ec       	ldi	r24, 0xCF	; 207
     bca:	97 e0       	ldi	r25, 0x07	; 7
     bcc:	01 97       	sbiw	r24, 0x01	; 1
     bce:	f1 f7       	brne	.-4      	; 0xbcc <lcd_cursor+0x3a>
     bd0:	00 c0       	rjmp	.+0      	; 0xbd2 <lcd_cursor+0x40>
     bd2:	00 00       	nop
     bd4:	88 b3       	in	r24, 0x18	; 24
     bd6:	8f 7e       	andi	r24, 0xEF	; 239
     bd8:	88 bb       	out	0x18, r24	; 24
     bda:	08 95       	ret

00000bdc <lcd_clrscr>:
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	0e 94 a4 05 	call	0xb48	; 0xb48 <lcd_data>
     be2:	88 b3       	in	r24, 0x18	; 24
     be4:	87 7f       	andi	r24, 0xF7	; 247
     be6:	88 bb       	out	0x18, r24	; 24
     be8:	88 b3       	in	r24, 0x18	; 24
     bea:	80 61       	ori	r24, 0x10	; 16
     bec:	88 bb       	out	0x18, r24	; 24
     bee:	8f ec       	ldi	r24, 0xCF	; 207
     bf0:	97 e0       	ldi	r25, 0x07	; 7
     bf2:	01 97       	sbiw	r24, 0x01	; 1
     bf4:	f1 f7       	brne	.-4      	; 0xbf2 <lcd_clrscr+0x16>
     bf6:	00 c0       	rjmp	.+0      	; 0xbf8 <lcd_clrscr+0x1c>
     bf8:	00 00       	nop
     bfa:	88 b3       	in	r24, 0x18	; 24
     bfc:	8f 7e       	andi	r24, 0xEF	; 239
     bfe:	88 bb       	out	0x18, r24	; 24
     c00:	80 e1       	ldi	r24, 0x10	; 16
     c02:	0e 94 a4 05 	call	0xb48	; 0xb48 <lcd_data>
     c06:	88 b3       	in	r24, 0x18	; 24
     c08:	87 7f       	andi	r24, 0xF7	; 247
     c0a:	88 bb       	out	0x18, r24	; 24
     c0c:	88 b3       	in	r24, 0x18	; 24
     c0e:	80 61       	ori	r24, 0x10	; 16
     c10:	88 bb       	out	0x18, r24	; 24
     c12:	8f ec       	ldi	r24, 0xCF	; 207
     c14:	97 e0       	ldi	r25, 0x07	; 7
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	f1 f7       	brne	.-4      	; 0xc16 <lcd_clrscr+0x3a>
     c1a:	00 c0       	rjmp	.+0      	; 0xc1c <lcd_clrscr+0x40>
     c1c:	00 00       	nop
     c1e:	88 b3       	in	r24, 0x18	; 24
     c20:	8f 7e       	andi	r24, 0xEF	; 239
     c22:	88 bb       	out	0x18, r24	; 24
     c24:	08 95       	ret

00000c26 <lcd_cmd>:
     c26:	cf 93       	push	r28
     c28:	c8 2f       	mov	r28, r24
     c2a:	80 7f       	andi	r24, 0xF0	; 240
     c2c:	0e 94 a4 05 	call	0xb48	; 0xb48 <lcd_data>
     c30:	88 b3       	in	r24, 0x18	; 24
     c32:	87 7f       	andi	r24, 0xF7	; 247
     c34:	88 bb       	out	0x18, r24	; 24
     c36:	88 b3       	in	r24, 0x18	; 24
     c38:	80 61       	ori	r24, 0x10	; 16
     c3a:	88 bb       	out	0x18, r24	; 24
     c3c:	82 e4       	ldi	r24, 0x42	; 66
     c3e:	8a 95       	dec	r24
     c40:	f1 f7       	brne	.-4      	; 0xc3e <lcd_cmd+0x18>
     c42:	00 c0       	rjmp	.+0      	; 0xc44 <lcd_cmd+0x1e>
     c44:	88 b3       	in	r24, 0x18	; 24
     c46:	8f 7e       	andi	r24, 0xEF	; 239
     c48:	88 bb       	out	0x18, r24	; 24
     c4a:	8c 2f       	mov	r24, r28
     c4c:	82 95       	swap	r24
     c4e:	80 7f       	andi	r24, 0xF0	; 240
     c50:	0e 94 a4 05 	call	0xb48	; 0xb48 <lcd_data>
     c54:	88 b3       	in	r24, 0x18	; 24
     c56:	87 7f       	andi	r24, 0xF7	; 247
     c58:	88 bb       	out	0x18, r24	; 24
     c5a:	88 b3       	in	r24, 0x18	; 24
     c5c:	80 61       	ori	r24, 0x10	; 16
     c5e:	88 bb       	out	0x18, r24	; 24
     c60:	82 e4       	ldi	r24, 0x42	; 66
     c62:	8a 95       	dec	r24
     c64:	f1 f7       	brne	.-4      	; 0xc62 <lcd_cmd+0x3c>
     c66:	00 c0       	rjmp	.+0      	; 0xc68 <lcd_cmd+0x42>
     c68:	88 b3       	in	r24, 0x18	; 24
     c6a:	8f 7e       	andi	r24, 0xEF	; 239
     c6c:	88 bb       	out	0x18, r24	; 24
     c6e:	cf 91       	pop	r28
     c70:	08 95       	ret

00000c72 <lcd_dat>:
     c72:	cf 93       	push	r28
     c74:	c8 2f       	mov	r28, r24
     c76:	80 7f       	andi	r24, 0xF0	; 240
     c78:	0e 94 a4 05 	call	0xb48	; 0xb48 <lcd_data>
     c7c:	88 b3       	in	r24, 0x18	; 24
     c7e:	88 60       	ori	r24, 0x08	; 8
     c80:	88 bb       	out	0x18, r24	; 24
     c82:	88 b3       	in	r24, 0x18	; 24
     c84:	80 61       	ori	r24, 0x10	; 16
     c86:	88 bb       	out	0x18, r24	; 24
     c88:	82 e4       	ldi	r24, 0x42	; 66
     c8a:	8a 95       	dec	r24
     c8c:	f1 f7       	brne	.-4      	; 0xc8a <lcd_dat+0x18>
     c8e:	00 c0       	rjmp	.+0      	; 0xc90 <lcd_dat+0x1e>
     c90:	88 b3       	in	r24, 0x18	; 24
     c92:	8f 7e       	andi	r24, 0xEF	; 239
     c94:	88 bb       	out	0x18, r24	; 24
     c96:	8c 2f       	mov	r24, r28
     c98:	82 95       	swap	r24
     c9a:	80 7f       	andi	r24, 0xF0	; 240
     c9c:	0e 94 a4 05 	call	0xb48	; 0xb48 <lcd_data>
     ca0:	88 b3       	in	r24, 0x18	; 24
     ca2:	88 60       	ori	r24, 0x08	; 8
     ca4:	88 bb       	out	0x18, r24	; 24
     ca6:	88 b3       	in	r24, 0x18	; 24
     ca8:	80 61       	ori	r24, 0x10	; 16
     caa:	88 bb       	out	0x18, r24	; 24
     cac:	82 e4       	ldi	r24, 0x42	; 66
     cae:	8a 95       	dec	r24
     cb0:	f1 f7       	brne	.-4      	; 0xcae <lcd_dat+0x3c>
     cb2:	00 c0       	rjmp	.+0      	; 0xcb4 <lcd_dat+0x42>
     cb4:	88 b3       	in	r24, 0x18	; 24
     cb6:	8f 7e       	andi	r24, 0xEF	; 239
     cb8:	88 bb       	out	0x18, r24	; 24
     cba:	cf 91       	pop	r28
     cbc:	08 95       	ret

00000cbe <lcd_cur_pos>:
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
     cc2:	c8 2f       	mov	r28, r24
     cc4:	d6 2f       	mov	r29, r22
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	21 f4       	brne	.+8      	; 0xcd2 <lcd_cur_pos+0x14>
     cca:	8f e7       	ldi	r24, 0x7F	; 127
     ccc:	86 0f       	add	r24, r22
     cce:	0e 94 13 06 	call	0xc26	; 0xc26 <lcd_cmd>
     cd2:	c2 30       	cpi	r28, 0x02	; 2
     cd4:	21 f4       	brne	.+8      	; 0xcde <lcd_cur_pos+0x20>
     cd6:	8f eb       	ldi	r24, 0xBF	; 191
     cd8:	8d 0f       	add	r24, r29
     cda:	0e 94 13 06 	call	0xc26	; 0xc26 <lcd_cmd>
     cde:	c3 30       	cpi	r28, 0x03	; 3
     ce0:	21 f4       	brne	.+8      	; 0xcea <lcd_cur_pos+0x2c>
     ce2:	83 e9       	ldi	r24, 0x93	; 147
     ce4:	8d 0f       	add	r24, r29
     ce6:	0e 94 13 06 	call	0xc26	; 0xc26 <lcd_cmd>
     cea:	c4 30       	cpi	r28, 0x04	; 4
     cec:	21 f4       	brne	.+8      	; 0xcf6 <lcd_cur_pos+0x38>
     cee:	83 ed       	ldi	r24, 0xD3	; 211
     cf0:	8d 0f       	add	r24, r29
     cf2:	0e 94 13 06 	call	0xc26	; 0xc26 <lcd_cmd>
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	08 95       	ret

00000cfc <lcd_string>:
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	ec 01       	movw	r28, r24
     d02:	03 c0       	rjmp	.+6      	; 0xd0a <lcd_string+0xe>
     d04:	21 96       	adiw	r28, 0x01	; 1
     d06:	0e 94 39 06 	call	0xc72	; 0xc72 <lcd_dat>
     d0a:	88 81       	ld	r24, Y
     d0c:	81 11       	cpse	r24, r1
     d0e:	fa cf       	rjmp	.-12     	; 0xd04 <lcd_string+0x8>
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	08 95       	ret

00000d16 <LCD_Init>:
     d16:	8f ef       	ldi	r24, 0xFF	; 255
     d18:	87 bb       	out	0x17, r24	; 23
     d1a:	18 ba       	out	0x18, r1	; 24
     d1c:	81 bb       	out	0x11, r24	; 17
     d1e:	12 ba       	out	0x12, r1	; 18
     d20:	0e 94 c9 05 	call	0xb92	; 0xb92 <lcd_cursor>
     d24:	88 e2       	ldi	r24, 0x28	; 40
     d26:	0e 94 13 06 	call	0xc26	; 0xc26 <lcd_cmd>
     d2a:	8e e0       	ldi	r24, 0x0E	; 14
     d2c:	0e 94 13 06 	call	0xc26	; 0xc26 <lcd_cmd>
     d30:	8c e0       	ldi	r24, 0x0C	; 12
     d32:	0e 94 13 06 	call	0xc26	; 0xc26 <lcd_cmd>
     d36:	86 e0       	ldi	r24, 0x06	; 6
     d38:	0e 94 13 06 	call	0xc26	; 0xc26 <lcd_cmd>
     d3c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <lcd_clrscr>
     d40:	80 e8       	ldi	r24, 0x80	; 128
     d42:	0e 94 13 06 	call	0xc26	; 0xc26 <lcd_cmd>
     d46:	61 e0       	ldi	r22, 0x01	; 1
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <lcd_cur_pos>
     d4e:	86 e9       	ldi	r24, 0x96	; 150
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	0e 94 7e 06 	call	0xcfc	; 0xcfc <lcd_string>
     d56:	08 95       	ret

00000d58 <DebugStringRow1>:
	str[4]='\0';
}*/


void DebugStringRow1(char *data)
{
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	ec 01       	movw	r28, r24
	lcd_cmd(0x80);
     d5e:	80 e8       	ldi	r24, 0x80	; 128
     d60:	0e 94 13 06 	call	0xc26	; 0xc26 <lcd_cmd>
	lcd_string(data);
     d64:	ce 01       	movw	r24, r28
     d66:	0e 94 7e 06 	call	0xcfc	; 0xcfc <lcd_string>
}
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	08 95       	ret

00000d70 <DebugStringRow2>:

void DebugStringRow2(char *data)
{
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	ec 01       	movw	r28, r24
	lcd_cmd(0xc0);
     d76:	80 ec       	ldi	r24, 0xC0	; 192
     d78:	0e 94 13 06 	call	0xc26	; 0xc26 <lcd_cmd>
	lcd_string(data);
     d7c:	ce 01       	movw	r24, r28
     d7e:	0e 94 7e 06 	call	0xcfc	; 0xcfc <lcd_string>
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	08 95       	ret

00000d88 <SIMCOM_ResetJob>:
	if(SIMCOM_ComState == SIMCOM_WaitingForResponse)
	{
		SIMCOM_ReceptionIgnoreCommandCount = Count;

		// If there are multiple items to be received, then set the Incomplete timeout as the Job Timeout
		SIMCOM_IncompleteCounter = SIMCOM_CurrentJob.Timeout;
     d88:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <SIMCOM_ComState>
     d8c:	e4 ef       	ldi	r30, 0xF4	; 244
     d8e:	f5 e0       	ldi	r31, 0x05	; 5
     d90:	81 ea       	ldi	r24, 0xA1	; 161
     d92:	91 e0       	ldi	r25, 0x01	; 1
     d94:	91 83       	std	Z+1, r25	; 0x01
     d96:	80 83       	st	Z, r24
     d98:	12 82       	std	Z+2, r1	; 0x02
     d9a:	13 82       	std	Z+3, r1	; 0x03
     d9c:	14 82       	std	Z+4, r1	; 0x04
     d9e:	15 82       	std	Z+5, r1	; 0x05
     da0:	17 82       	std	Z+7, r1	; 0x07
     da2:	16 82       	std	Z+6, r1	; 0x06
     da4:	10 86       	std	Z+8, r1	; 0x08
     da6:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <SIMCOM_ReceptionIgnoreCommandCount>
     daa:	08 95       	ret

00000dac <SIMCOM_UpdateCurrentJobResponse>:
     dac:	ef 92       	push	r14
     dae:	ff 92       	push	r15
     db0:	1f 93       	push	r17
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	1f 92       	push	r1
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	88 ec       	ldi	r24, 0xC8	; 200
     dbe:	ec e2       	ldi	r30, 0x2C	; 44
     dc0:	f5 e0       	ldi	r31, 0x05	; 5
     dc2:	df 01       	movw	r26, r30
     dc4:	1d 92       	st	X+, r1
     dc6:	8a 95       	dec	r24
     dc8:	e9 f7       	brne	.-6      	; 0xdc4 <SIMCOM_UpdateCurrentJobResponse+0x18>
     dca:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <SIMCOM_ResponseLength>
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	0e 94 50 04 	call	0x8a0	; 0x8a0 <Buffer_GetBuffer>
     dd4:	60 ea       	ldi	r22, 0xA0	; 160
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	fc 01       	movw	r30, r24
     dda:	80 81       	ld	r24, Z
     ddc:	91 81       	ldd	r25, Z+1	; 0x01
     dde:	0e 94 21 14 	call	0x2842	; 0x2842 <strstr>
     de2:	0e 94 b8 06 	call	0xd70	; 0xd70 <DebugStringRow2>
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <Buffer_Length>
     dec:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <SIMCOM_ResponseLength>
     df0:	10 e0       	ldi	r17, 0x00	; 0
     df2:	13 c0       	rjmp	.+38     	; 0xe1a <SIMCOM_UpdateCurrentJobResponse+0x6e>
     df4:	e1 2e       	mov	r14, r17
     df6:	f1 2c       	mov	r15, r1
     df8:	19 82       	std	Y+1, r1	; 0x01
     dfa:	be 01       	movw	r22, r28
     dfc:	6f 5f       	subi	r22, 0xFF	; 255
     dfe:	7f 4f       	sbci	r23, 0xFF	; 255
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	0e 94 aa 04 	call	0x954	; 0x954 <Buffer_DeQueue>
     e06:	81 11       	cpse	r24, r1
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <SIMCOM_UpdateCurrentJobResponse+0x62>
     e0a:	0e 94 c0 0c 	call	0x1980	; 0x1980 <COSMIC_SIMCOM_Error_Callback>
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	f7 01       	movw	r30, r14
     e12:	e4 5d       	subi	r30, 0xD4	; 212
     e14:	fa 4f       	sbci	r31, 0xFA	; 250
     e16:	80 83       	st	Z, r24
     e18:	1f 5f       	subi	r17, 0xFF	; 255
     e1a:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <SIMCOM_ResponseLength>
     e1e:	18 17       	cp	r17, r24
     e20:	48 f3       	brcs	.-46     	; 0xdf4 <SIMCOM_UpdateCurrentJobResponse+0x48>
     e22:	6c e2       	ldi	r22, 0x2C	; 44
     e24:	75 e0       	ldi	r23, 0x05	; 5
     e26:	85 ea       	ldi	r24, 0xA5	; 165
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 74 05 	call	0xae8	; 0xae8 <StringHelper_startsWith>
     e2e:	88 23       	and	r24, r24
     e30:	39 f0       	breq	.+14     	; 0xe40 <SIMCOM_UpdateCurrentJobResponse+0x94>
     e32:	88 b3       	in	r24, 0x18	; 24
     e34:	80 95       	com	r24
     e36:	88 bb       	out	0x18, r24	; 24
     e38:	86 e3       	ldi	r24, 0x36	; 54
     e3a:	95 e0       	ldi	r25, 0x05	; 5
     e3c:	0e 94 ac 06 	call	0xd58	; 0xd58 <DebugStringRow1>
     e40:	0f 90       	pop	r0
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	1f 91       	pop	r17
     e48:	ff 90       	pop	r15
     e4a:	ef 90       	pop	r14
     e4c:	08 95       	ret

00000e4e <SIMCOM_Send_Command>:
     e4e:	09 c0       	rjmp	.+18     	; 0xe62 <SIMCOM_Send_Command+0x14>
     e50:	0e 94 a3 00 	call	0x146	; 0x146 <SIM_Send_Data>
     e54:	e4 ef       	ldi	r30, 0xF4	; 244
     e56:	f5 e0       	ldi	r31, 0x05	; 5
     e58:	80 81       	ld	r24, Z
     e5a:	91 81       	ldd	r25, Z+1	; 0x01
     e5c:	01 96       	adiw	r24, 0x01	; 1
     e5e:	91 83       	std	Z+1, r25	; 0x01
     e60:	80 83       	st	Z, r24
     e62:	e0 91 f4 05 	lds	r30, 0x05F4	; 0x8005f4 <SIMCOM_CurrentJob>
     e66:	f0 91 f5 05 	lds	r31, 0x05F5	; 0x8005f5 <SIMCOM_CurrentJob+0x1>
     e6a:	80 81       	ld	r24, Z
     e6c:	81 11       	cpse	r24, r1
     e6e:	f0 cf       	rjmp	.-32     	; 0xe50 <SIMCOM_Send_Command+0x2>
     e70:	8d e0       	ldi	r24, 0x0D	; 13
     e72:	0e 94 a3 00 	call	0x146	; 0x146 <SIM_Send_Data>
     e76:	08 95       	ret

00000e78 <SIMCOM_GetResponseWithoutHead_fromBuffer>:
     e78:	bc 01       	movw	r22, r24
     e7a:	8c e2       	ldi	r24, 0x2C	; 44
     e7c:	95 e0       	ldi	r25, 0x05	; 5
     e7e:	0e 94 ef 04 	call	0x9de	; 0x9de <StringHelper_GetPointerAfter>
     e82:	08 95       	ret

00000e84 <SIMCOM_GetSeparated_String_fromBuffer>:
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	d6 2f       	mov	r29, r22
     e8a:	c4 2f       	mov	r28, r20
     e8c:	0e 94 3c 07 	call	0xe78	; 0xe78 <SIMCOM_GetResponseWithoutHead_fromBuffer>
     e90:	4c 2f       	mov	r20, r28
     e92:	50 e0       	ldi	r21, 0x00	; 0
     e94:	6d 2f       	mov	r22, r29
     e96:	0e 94 1a 05 	call	0xa34	; 0xa34 <StringHelper_SplitAndGet>
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	08 95       	ret

00000ea0 <SIMCOM_Init>:
     ea0:	0e 94 c4 06 	call	0xd88	; 0xd88 <SIMCOM_ResetJob>
     ea4:	88 ec       	ldi	r24, 0xC8	; 200
     ea6:	ec e2       	ldi	r30, 0x2C	; 44
     ea8:	f5 e0       	ldi	r31, 0x05	; 5
     eaa:	df 01       	movw	r26, r30
     eac:	1d 92       	st	X+, r1
     eae:	8a 95       	dec	r24
     eb0:	e9 f7       	brne	.-6      	; 0xeac <SIMCOM_Init+0xc>
     eb2:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <SIMCOM_ResponseLength>
     eb6:	48 ec       	ldi	r20, 0xC8	; 200
     eb8:	6b e8       	ldi	r22, 0x8B	; 139
     eba:	76 e0       	ldi	r23, 0x06	; 6
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	0e 94 60 04 	call	0x8c0	; 0x8c0 <Buffer_Create>
     ec2:	08 95       	ret

00000ec4 <SIMCOM_Schedule_Job>:
     ec4:	e0 91 0c 04 	lds	r30, 0x040C	; 0x80040c <SIMCOM_ComState>
     ec8:	e1 11       	cpse	r30, r1
     eca:	38 c0       	rjmp	.+112    	; 0xf3c <SIMCOM_Schedule_Job+0x78>
     ecc:	e1 e0       	ldi	r30, 0x01	; 1
     ece:	e0 93 0c 04 	sts	0x040C, r30	; 0x80040c <SIMCOM_ComState>
     ed2:	e4 ef       	ldi	r30, 0xF4	; 244
     ed4:	f5 e0       	ldi	r31, 0x05	; 5
     ed6:	91 83       	std	Z+1, r25	; 0x01
     ed8:	80 83       	st	Z, r24
     eda:	42 83       	std	Z+2, r20	; 0x02
     edc:	53 83       	std	Z+3, r21	; 0x03
     ede:	64 83       	std	Z+4, r22	; 0x04
     ee0:	75 83       	std	Z+5, r23	; 0x05
     ee2:	37 83       	std	Z+7, r19	; 0x07
     ee4:	26 83       	std	Z+6, r18	; 0x06
     ee6:	10 86       	std	Z+8, r1	; 0x08
     ee8:	8a e0       	ldi	r24, 0x0A	; 10
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	a0 e0       	ldi	r26, 0x00	; 0
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <SIMCOM_IncompleteCounter>
     ef4:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <SIMCOM_IncompleteCounter+0x1>
     ef8:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <SIMCOM_IncompleteCounter+0x2>
     efc:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <SIMCOM_IncompleteCounter+0x3>
     f00:	80 e6       	ldi	r24, 0x60	; 96
     f02:	9a ee       	ldi	r25, 0xEA	; 234
     f04:	a0 e0       	ldi	r26, 0x00	; 0
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     f0c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     f10:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     f14:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     f18:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <SIMCOM_ReceptionIgnoreCommandCount>
     f1c:	88 ec       	ldi	r24, 0xC8	; 200
     f1e:	ec e2       	ldi	r30, 0x2C	; 44
     f20:	f5 e0       	ldi	r31, 0x05	; 5
     f22:	df 01       	movw	r26, r30
     f24:	1d 92       	st	X+, r1
     f26:	8a 95       	dec	r24
     f28:	e9 f7       	brne	.-6      	; 0xf24 <SIMCOM_Schedule_Job+0x60>
     f2a:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <SIMCOM_ResponseLength>
     f2e:	0e 94 27 07 	call	0xe4e	; 0xe4e <SIMCOM_Send_Command>
     f32:	83 e0       	ldi	r24, 0x03	; 3
     f34:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <SIMCOM_ComState>
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	08 95       	ret
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	08 95       	ret

00000f40 <SIMCOM_Data_Read>:
     f40:	cf 93       	push	r28
     f42:	c8 2f       	mov	r28, r24
     f44:	8d 30       	cpi	r24, 0x0D	; 13
     f46:	11 f0       	breq	.+4      	; 0xf4c <SIMCOM_Data_Read+0xc>
     f48:	8a 30       	cpi	r24, 0x0A	; 10
     f4a:	71 f5       	brne	.+92     	; 0xfa8 <SIMCOM_Data_Read+0x68>
     f4c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__data_end>
     f50:	8d 30       	cpi	r24, 0x0D	; 13
     f52:	89 f5       	brne	.+98     	; 0xfb6 <SIMCOM_Data_Read+0x76>
     f54:	ca 30       	cpi	r28, 0x0A	; 10
     f56:	91 f5       	brne	.+100    	; 0xfbc <SIMCOM_Data_Read+0x7c>
     f58:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <SIMCOM_ComState>
     f5c:	83 30       	cpi	r24, 0x03	; 3
     f5e:	31 f4       	brne	.+12     	; 0xf6c <SIMCOM_Data_Read+0x2c>
     f60:	82 e0       	ldi	r24, 0x02	; 2
     f62:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <SIMCOM_ComState>
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	30 c0       	rjmp	.+96     	; 0xfcc <SIMCOM_Data_Read+0x8c>
     f6c:	82 30       	cpi	r24, 0x02	; 2
     f6e:	a1 f4       	brne	.+40     	; 0xf98 <SIMCOM_Data_Read+0x58>
     f70:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <SIMCOM_ReceptionIgnoreCommandCount>
     f74:	81 11       	cpse	r24, r1
     f76:	06 c0       	rjmp	.+12     	; 0xf84 <SIMCOM_Data_Read+0x44>
     f78:	84 e0       	ldi	r24, 0x04	; 4
     f7a:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <SIMCOM_ComState>
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	24 c0       	rjmp	.+72     	; 0xfcc <SIMCOM_Data_Read+0x8c>
     f84:	81 50       	subi	r24, 0x01	; 1
     f86:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <SIMCOM_ReceptionIgnoreCommandCount>
     f8a:	6e e7       	ldi	r22, 0x7E	; 126
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <Buffer_EnQueue>
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	1a c0       	rjmp	.+52     	; 0xfcc <SIMCOM_Data_Read+0x8c>
     f98:	81 11       	cpse	r24, r1
     f9a:	13 c0       	rjmp	.+38     	; 0xfc2 <SIMCOM_Data_Read+0x82>
     f9c:	82 e0       	ldi	r24, 0x02	; 2
     f9e:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <SIMCOM_ComState>
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	12 c0       	rjmp	.+36     	; 0xfcc <SIMCOM_Data_Read+0x8c>
     fa8:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <SIMCOM_ComState>
     fac:	82 30       	cpi	r24, 0x02	; 2
     fae:	61 f0       	breq	.+24     	; 0xfc8 <SIMCOM_Data_Read+0x88>
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	0b c0       	rjmp	.+22     	; 0xfcc <SIMCOM_Data_Read+0x8c>
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	08 c0       	rjmp	.+16     	; 0xfcc <SIMCOM_Data_Read+0x8c>
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	05 c0       	rjmp	.+10     	; 0xfcc <SIMCOM_Data_Read+0x8c>
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <SIMCOM_Data_Read+0x8c>
     fc8:	91 e0       	ldi	r25, 0x01	; 1
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	91 30       	cpi	r25, 0x01	; 1
     fce:	21 f4       	brne	.+8      	; 0xfd8 <SIMCOM_Data_Read+0x98>
     fd0:	6c 2f       	mov	r22, r28
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	0e 94 7d 04 	call	0x8fa	; 0x8fa <Buffer_EnQueue>
     fd8:	c0 93 08 04 	sts	0x0408, r28	; 0x800408 <__data_end>
     fdc:	cf 91       	pop	r28
     fde:	08 95       	ret

00000fe0 <SIMCOM_GetCSV_Number_fromBuffer>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                     SIMCOM Helper Functions                    */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
ULONG SIMCOM_GetCSV_Number_fromBuffer(const char * ResponseHead, UBYTE Position)
{
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	2c 97       	sbiw	r28, 0x0c	; 12
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61
     ff4:	46 2f       	mov	r20, r22
	ULONG retval = 0;

	if(SIMCOM_GetSeparated_String_fromBuffer(ResponseHead, ',', Position) > 0)
     ff6:	6c e2       	ldi	r22, 0x2C	; 44
     ff8:	0e 94 42 07 	call	0xe84	; 0xe84 <SIMCOM_GetSeparated_String_fromBuffer>
     ffc:	89 2b       	or	r24, r25
     ffe:	b1 f0       	breq	.+44     	; 0x102c <SIMCOM_GetCSV_Number_fromBuffer+0x4c>
	memset(StringHelper_Buffer, '\0', StringHelper_Buffer_LENGTH);
}

static inline void StringHelper_GetString(char * Str)
{
	strcpy(Str, StringHelper_Buffer);
    1000:	61 e2       	ldi	r22, 0x21	; 33
    1002:	74 e0       	ldi	r23, 0x04	; 4
    1004:	ce 01       	movw	r24, r28
    1006:	01 96       	adiw	r24, 0x01	; 1
    1008:	0e 94 1a 14 	call	0x2834	; 0x2834 <strcpy>
/* Function Declarations */
/*************************/

static inline void StringHelper_ClearBuffer(void)
{
	memset(StringHelper_Buffer, '\0', StringHelper_Buffer_LENGTH);
    100c:	8f ef       	ldi	r24, 0xFF	; 255
    100e:	e1 e2       	ldi	r30, 0x21	; 33
    1010:	f4 e0       	ldi	r31, 0x04	; 4
    1012:	df 01       	movw	r26, r30
    1014:	1d 92       	st	X+, r1
    1016:	8a 95       	dec	r24
    1018:	e9 f7       	brne	.-6      	; 0x1014 <SIMCOM_GetCSV_Number_fromBuffer+0x34>
	{
		char NumberString[12];

		StringHelper_GetString(NumberString);

		retval = atoi(NumberString);
    101a:	ce 01       	movw	r24, r28
    101c:	01 96       	adiw	r24, 0x01	; 1
    101e:	0e 94 dd 13 	call	0x27ba	; 0x27ba <atoi>
    1022:	bc 01       	movw	r22, r24
    1024:	99 0f       	add	r25, r25
    1026:	88 0b       	sbc	r24, r24
    1028:	99 0b       	sbc	r25, r25
    102a:	03 c0       	rjmp	.+6      	; 0x1032 <SIMCOM_GetCSV_Number_fromBuffer+0x52>
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                     SIMCOM Helper Functions                    */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
ULONG SIMCOM_GetCSV_Number_fromBuffer(const char * ResponseHead, UBYTE Position)
{
	ULONG retval = 0;
    102c:	60 e0       	ldi	r22, 0x00	; 0
    102e:	70 e0       	ldi	r23, 0x00	; 0
    1030:	cb 01       	movw	r24, r22

		retval = atoi(NumberString);
	}

	return retval;
}
    1032:	2c 96       	adiw	r28, 0x0c	; 12
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	de bf       	out	0x3e, r29	; 62
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	cd bf       	out	0x3d, r28	; 61
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	08 95       	ret

00001044 <SIMCOM_Callback>:

	SIMCOM_SEND_BYTE(CARRIAGE_RETURN);
}

static void SIMCOM_Callback(SIMCOM_Job_Result_EN JobState)
{
    1044:	8f 92       	push	r8
    1046:	9f 92       	push	r9
    1048:	af 92       	push	r10
    104a:	bf 92       	push	r11
    104c:	cf 92       	push	r12
    104e:	df 92       	push	r13
    1050:	ef 92       	push	r14
    1052:	ff 92       	push	r15
    1054:	cf 93       	push	r28
    1056:	c8 2f       	mov	r28, r24
	
	if(SIMCOM_CurrentJob.Callback != NULL_PTR)
    1058:	e0 91 fa 05 	lds	r30, 0x05FA	; 0x8005fa <SIMCOM_CurrentJob+0x6>
    105c:	f0 91 fb 05 	lds	r31, 0x05FB	; 0x8005fb <SIMCOM_CurrentJob+0x7>
    1060:	30 97       	sbiw	r30, 0x00	; 0
    1062:	21 f0       	breq	.+8      	; 0x106c <SIMCOM_Callback+0x28>
	{
		SIMCOM_CurrentJob.State = JobState;
    1064:	80 93 fc 05 	sts	0x05FC, r24	; 0x8005fc <SIMCOM_CurrentJob+0x8>
		SIMCOM_CurrentJob.Callback(JobState);
    1068:	09 95       	icall
    106a:	93 c0       	rjmp	.+294    	; 0x1192 <SIMCOM_Callback+0x14e>
	}
	else
	{
		if(IsSIMCOM_ResponseStartsWith("+CTZV:"))
    106c:	6c e2       	ldi	r22, 0x2C	; 44
    106e:	75 e0       	ldi	r23, 0x05	; 5
    1070:	84 eb       	ldi	r24, 0xB4	; 180
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 94 74 05 	call	0xae8	; 0xae8 <StringHelper_startsWith>
    1078:	88 23       	and	r24, r24
    107a:	41 f0       	breq	.+16     	; 0x108c <SIMCOM_Callback+0x48>
		{
			/* If there are any problem with the SIMCOM or it's sub modules, and received a feedback from GSM, then possibly the Network might have disconnected */
			if(IsSIMCOM_Module_Error() || IsSIMCOM_SubModule_Error())
    107c:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <SIMCOM_State>
    1080:	8d 30       	cpi	r24, 0x0D	; 13
    1082:	09 f0       	breq	.+2      	; 0x1086 <SIMCOM_Callback+0x42>
    1084:	86 c0       	rjmp	.+268    	; 0x1192 <SIMCOM_Callback+0x14e>
			{
				// So retry evaluating
				SIMCOM_ReEvaluate_State();
    1086:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <SIMCOM_State>
    108a:	83 c0       	rjmp	.+262    	; 0x1192 <SIMCOM_Callback+0x14e>
			}
		}
		else if(IsSIMCOM_ResponseStartsWith("+CMQTTRXSTART:"))
    108c:	6c e2       	ldi	r22, 0x2C	; 44
    108e:	75 e0       	ldi	r23, 0x05	; 5
    1090:	85 ea       	ldi	r24, 0xA5	; 165
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 74 05 	call	0xae8	; 0xae8 <StringHelper_startsWith>
    1098:	81 11       	cpse	r24, r1
    109a:	7b c0       	rjmp	.+246    	; 0x1192 <SIMCOM_Callback+0x14e>
		{
			//PORTA ^= 0xFF;

		}
		else if(IsSIMCOM_ResponseStartsWith("+CMQTTCONNECT:"))
    109c:	6c e2       	ldi	r22, 0x2C	; 44
    109e:	75 e0       	ldi	r23, 0x05	; 5
    10a0:	8b eb       	ldi	r24, 0xBB	; 187
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	0e 94 74 05 	call	0xae8	; 0xae8 <StringHelper_startsWith>
    10a8:	88 23       	and	r24, r24
    10aa:	d1 f0       	breq	.+52     	; 0x10e0 <SIMCOM_Callback+0x9c>
		{
			ULONG ConnectResponse1 = SIMCOM_GetCSV_Number_fromBuffer("+CMQTTCONNECT:", 1);
    10ac:	61 e0       	ldi	r22, 0x01	; 1
    10ae:	8b eb       	ldi	r24, 0xBB	; 187
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <SIMCOM_GetCSV_Number_fromBuffer>
    10b6:	6b 01       	movw	r12, r22
    10b8:	7c 01       	movw	r14, r24
			ULONG ConnectResponse2 = SIMCOM_GetCSV_Number_fromBuffer("+CMQTTCONNECT:", 2);
    10ba:	62 e0       	ldi	r22, 0x02	; 2
    10bc:	8b eb       	ldi	r24, 0xBB	; 187
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <SIMCOM_GetCSV_Number_fromBuffer>
			// Check if the response is OK or not.
			if((ConnectResponse1==0)&&(ConnectResponse2==0))
    10c4:	cd 28       	or	r12, r13
    10c6:	ce 28       	or	r12, r14
    10c8:	cf 28       	or	r12, r15
    10ca:	09 f0       	breq	.+2      	; 0x10ce <SIMCOM_Callback+0x8a>
    10cc:	62 c0       	rjmp	.+196    	; 0x1192 <SIMCOM_Callback+0x14e>
    10ce:	67 2b       	or	r22, r23
    10d0:	68 2b       	or	r22, r24
    10d2:	69 2b       	or	r22, r25
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <SIMCOM_Callback+0x94>
    10d6:	5d c0       	rjmp	.+186    	; 0x1192 <SIMCOM_Callback+0x14e>
			{
				MQTT_State = MQTT_SubscribeTopic_Config;// Move to next state
    10d8:	88 e0       	ldi	r24, 0x08	; 8
    10da:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <MQTT_State>
    10de:	59 c0       	rjmp	.+178    	; 0x1192 <SIMCOM_Callback+0x14e>
			}
		}
		else if(IsSIMCOM_ResponseStartsWith("+CMQTTDISCONNLOST:"))
    10e0:	6c e2       	ldi	r22, 0x2C	; 44
    10e2:	75 e0       	ldi	r23, 0x05	; 5
    10e4:	8a ec       	ldi	r24, 0xCA	; 202
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	0e 94 74 05 	call	0xae8	; 0xae8 <StringHelper_startsWith>
    10ec:	88 23       	and	r24, r24
    10ee:	19 f0       	breq	.+6      	; 0x10f6 <SIMCOM_Callback+0xb2>
		{
			SIMCOM_ERROR_CALLBACK();
    10f0:	0e 94 c0 0c 	call	0x1980	; 0x1980 <COSMIC_SIMCOM_Error_Callback>
    10f4:	4e c0       	rjmp	.+156    	; 0x1192 <SIMCOM_Callback+0x14e>
		}
		
		else if(IsSIMCOM_ResponseStartsWith("+CMQTTPUB:"))
    10f6:	6c e2       	ldi	r22, 0x2C	; 44
    10f8:	75 e0       	ldi	r23, 0x05	; 5
    10fa:	8d ed       	ldi	r24, 0xDD	; 221
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	0e 94 74 05 	call	0xae8	; 0xae8 <StringHelper_startsWith>
    1102:	88 23       	and	r24, r24
    1104:	e9 f0       	breq	.+58     	; 0x1140 <SIMCOM_Callback+0xfc>
		{
			
			ULONG PublishResponse1 = SIMCOM_GetCSV_Number_fromBuffer("+CMQTTPUB:", 1);
    1106:	61 e0       	ldi	r22, 0x01	; 1
    1108:	8d ed       	ldi	r24, 0xDD	; 221
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <SIMCOM_GetCSV_Number_fromBuffer>
    1110:	6b 01       	movw	r12, r22
    1112:	7c 01       	movw	r14, r24
			ULONG PublishResponse2 = SIMCOM_GetCSV_Number_fromBuffer("+CMQTTPUB:", 2);
    1114:	62 e0       	ldi	r22, 0x02	; 2
    1116:	8d ed       	ldi	r24, 0xDD	; 221
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <SIMCOM_GetCSV_Number_fromBuffer>
			// Check if the response is OK or not.
			if((PublishResponse1==0)&&(PublishResponse2==0))
    111e:	cd 28       	or	r12, r13
    1120:	ce 28       	or	r12, r14
    1122:	cf 28       	or	r12, r15
    1124:	51 f4       	brne	.+20     	; 0x113a <SIMCOM_Callback+0xf6>
    1126:	67 2b       	or	r22, r23
    1128:	68 2b       	or	r22, r24
    112a:	69 2b       	or	r22, r25
    112c:	31 f4       	brne	.+12     	; 0x113a <SIMCOM_Callback+0xf6>
			{
				PublishStatus = 1;
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <PublishStatus>
				Publish_State = MQTT_Publish_Idle;
    1134:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <Publish_State>
    1138:	2c c0       	rjmp	.+88     	; 0x1192 <SIMCOM_Callback+0x14e>
			}
			else
			{
				PublishStatus = 0;
    113a:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <PublishStatus>
    113e:	29 c0       	rjmp	.+82     	; 0x1192 <SIMCOM_Callback+0x14e>
			}
		}
		
		else if(IsSIMCOM_ResponseStartsWith("+CMQTTSUB:"))
    1140:	6c e2       	ldi	r22, 0x2C	; 44
    1142:	75 e0       	ldi	r23, 0x05	; 5
    1144:	88 ee       	ldi	r24, 0xE8	; 232
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	0e 94 74 05 	call	0xae8	; 0xae8 <StringHelper_startsWith>
    114c:	88 23       	and	r24, r24
    114e:	f1 f0       	breq	.+60     	; 0x118c <SIMCOM_Callback+0x148>
		{
			ULONG SubscribeResponse1 = SIMCOM_GetCSV_Number_fromBuffer("+CMQTTSUB:", 1);
    1150:	61 e0       	ldi	r22, 0x01	; 1
    1152:	88 ee       	ldi	r24, 0xE8	; 232
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <SIMCOM_GetCSV_Number_fromBuffer>
    115a:	4b 01       	movw	r8, r22
    115c:	5c 01       	movw	r10, r24
			ULONG SubscribeResponse2 = SIMCOM_GetCSV_Number_fromBuffer("+CMQTTSUB:", 2);
    115e:	62 e0       	ldi	r22, 0x02	; 2
    1160:	88 ee       	ldi	r24, 0xE8	; 232
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <SIMCOM_GetCSV_Number_fromBuffer>
    1168:	6b 01       	movw	r12, r22
    116a:	7c 01       	movw	r14, r24
			DebugStringRow2("SUB");
    116c:	83 ef       	ldi	r24, 0xF3	; 243
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 b8 06 	call	0xd70	; 0xd70 <DebugStringRow2>
			// Check if the response is OK or not.
			if((SubscribeResponse1 ==0)&&(SubscribeResponse2 ==0))
    1174:	89 28       	or	r8, r9
    1176:	8a 28       	or	r8, r10
    1178:	8b 28       	or	r8, r11
    117a:	59 f4       	brne	.+22     	; 0x1192 <SIMCOM_Callback+0x14e>
    117c:	cd 28       	or	r12, r13
    117e:	ce 28       	or	r12, r14
    1180:	cf 28       	or	r12, r15
    1182:	39 f4       	brne	.+14     	; 0x1192 <SIMCOM_Callback+0x14e>
			{
				MQTT_State = MQTT_Ready;
    1184:	8d e0       	ldi	r24, 0x0D	; 13
    1186:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <MQTT_State>
    118a:	03 c0       	rjmp	.+6      	; 0x1192 <SIMCOM_Callback+0x14e>
		}
		
		else
		{
			// If something else is received, then give a call to the Application layer to handle
			SIMCOM_GENERIC_CALLBACK(JobState);
    118c:	8c 2f       	mov	r24, r28
    118e:	0e 94 9b 12 	call	0x2536	; 0x2536 <COSMIC_Generic_SIMCOM_Callback>
		}
	}
}
    1192:	cf 91       	pop	r28
    1194:	ff 90       	pop	r15
    1196:	ef 90       	pop	r14
    1198:	df 90       	pop	r13
    119a:	cf 90       	pop	r12
    119c:	bf 90       	pop	r11
    119e:	af 90       	pop	r10
    11a0:	9f 90       	pop	r9
    11a2:	8f 90       	pop	r8
    11a4:	08 95       	ret

000011a6 <SIMCOM_MainFunction>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*                      SIMCOM Main Function                      */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
void SIMCOM_MainFunction(void)
{ 
	switch(SIMCOM_ComState)
    11a6:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <SIMCOM_ComState>
    11aa:	82 30       	cpi	r24, 0x02	; 2
    11ac:	b9 f1       	breq	.+110    	; 0x121c <SIMCOM_MainFunction+0x76>
    11ae:	18 f4       	brcc	.+6      	; 0x11b6 <SIMCOM_MainFunction+0x10>
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	81 f1       	breq	.+96     	; 0x1214 <SIMCOM_MainFunction+0x6e>
    11b4:	06 c0       	rjmp	.+12     	; 0x11c2 <SIMCOM_MainFunction+0x1c>
    11b6:	83 30       	cpi	r24, 0x03	; 3
    11b8:	09 f4       	brne	.+2      	; 0x11bc <SIMCOM_MainFunction+0x16>
    11ba:	53 c0       	rjmp	.+166    	; 0x1262 <SIMCOM_MainFunction+0xbc>
    11bc:	84 30       	cpi	r24, 0x04	; 4
    11be:	09 f4       	brne	.+2      	; 0x11c2 <SIMCOM_MainFunction+0x1c>
    11c0:	71 c0       	rjmp	.+226    	; 0x12a4 <SIMCOM_MainFunction+0xfe>
	{
		default:
		case SIMCOM_Idle:
		{
			SIMCOM_ResetJob();
    11c2:	0e 94 c4 06 	call	0xd88	; 0xd88 <SIMCOM_ResetJob>

			// Check for aliveness
			if(SIMCOM_Aliveness_Counter > 0)
    11c6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    11ca:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    11ce:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    11d2:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    11d6:	00 97       	sbiw	r24, 0x00	; 0
    11d8:	a1 05       	cpc	r26, r1
    11da:	b1 05       	cpc	r27, r1
    11dc:	61 f0       	breq	.+24     	; 0x11f6 <SIMCOM_MainFunction+0x50>
			{
				SIMCOM_Aliveness_Counter -= P_SIMCOM_TASK_CYCLE_FACTOR;
    11de:	01 97       	sbiw	r24, 0x01	; 1
    11e0:	a1 09       	sbc	r26, r1
    11e2:	b1 09       	sbc	r27, r1
    11e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    11e8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    11ec:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    11f0:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    11f4:	5e c0       	rjmp	.+188    	; 0x12b2 <SIMCOM_MainFunction+0x10c>
			}
			else
			{
				SIMCOM_ERROR_CALLBACK(); // Report Error
    11f6:	0e 94 c0 0c 	call	0x1980	; 0x1980 <COSMIC_SIMCOM_Error_Callback>
				SIMCOM_Aliveness_Counter = P_SIMCOM_ALIVENESS_ERROR_TIME; // Reload Timer
    11fa:	80 e6       	ldi	r24, 0x60	; 96
    11fc:	9a ee       	ldi	r25, 0xEA	; 234
    11fe:	a0 e0       	ldi	r26, 0x00	; 0
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    1206:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    120a:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    120e:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    1212:	4f c0       	rjmp	.+158    	; 0x12b2 <SIMCOM_MainFunction+0x10c>
		break;

		case SIMCOM_WriteInProgress:
		{
			// Do Nothing
			SIMCOM_Callback(SIMCOM_Job_InProgress);
    1214:	82 e0       	ldi	r24, 0x02	; 2
    1216:	0e 94 22 08 	call	0x1044	; 0x1044 <SIMCOM_Callback>
		}
		break;
    121a:	4b c0       	rjmp	.+150    	; 0x12b2 <SIMCOM_MainFunction+0x10c>

		case SIMCOM_ReadInProgress:
		{
			// If the Read is in progress for one Task Cycle, then give a callback that the SIMCOM is in Progress
			SIMCOM_Callback(SIMCOM_Job_InProgress);
    121c:	82 e0       	ldi	r24, 0x02	; 2
    121e:	0e 94 22 08 	call	0x1044	; 0x1044 <SIMCOM_Callback>

			if(SIMCOM_IncompleteCounter != 0)
    1222:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <SIMCOM_IncompleteCounter>
    1226:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <SIMCOM_IncompleteCounter+0x1>
    122a:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <SIMCOM_IncompleteCounter+0x2>
    122e:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <SIMCOM_IncompleteCounter+0x3>
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	a1 05       	cpc	r26, r1
    1236:	b1 05       	cpc	r27, r1
    1238:	61 f0       	breq	.+24     	; 0x1252 <SIMCOM_MainFunction+0xac>
			{
				SIMCOM_IncompleteCounter--;
    123a:	01 97       	sbiw	r24, 0x01	; 1
    123c:	a1 09       	sbc	r26, r1
    123e:	b1 09       	sbc	r27, r1
    1240:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <SIMCOM_IncompleteCounter>
    1244:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <SIMCOM_IncompleteCounter+0x1>
    1248:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <SIMCOM_IncompleteCounter+0x2>
    124c:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <SIMCOM_IncompleteCounter+0x3>
    1250:	30 c0       	rjmp	.+96     	; 0x12b2 <SIMCOM_MainFunction+0x10c>
			else
			{
//				Debug_SendString("Incomplete Response");

				// Update the Response to the SIMCOM Response Buffer even if it is incomplete, the caller will take care of the received response
				SIMCOM_UpdateCurrentJobResponse();
    1252:	0e 94 d6 06 	call	0xdac	; 0xdac <SIMCOM_UpdateCurrentJobResponse>

				// If the Read is in progress for long time, then there might be a problem with the reception.
				SIMCOM_Callback(SIMCOM_Job_Incomplete);
    1256:	84 e0       	ldi	r24, 0x04	; 4
    1258:	0e 94 22 08 	call	0x1044	; 0x1044 <SIMCOM_Callback>

				SIMCOM_ResetJob();
    125c:	0e 94 c4 06 	call	0xd88	; 0xd88 <SIMCOM_ResetJob>
    1260:	28 c0       	rjmp	.+80     	; 0x12b2 <SIMCOM_MainFunction+0x10c>
		break;

		case SIMCOM_WaitingForResponse:
		{
			// If waiting for response, then decrement the counter
			if(SIMCOM_CurrentJob.Timeout != 0)
    1262:	80 91 f6 05 	lds	r24, 0x05F6	; 0x8005f6 <SIMCOM_CurrentJob+0x2>
    1266:	90 91 f7 05 	lds	r25, 0x05F7	; 0x8005f7 <SIMCOM_CurrentJob+0x3>
    126a:	a0 91 f8 05 	lds	r26, 0x05F8	; 0x8005f8 <SIMCOM_CurrentJob+0x4>
    126e:	b0 91 f9 05 	lds	r27, 0x05F9	; 0x8005f9 <SIMCOM_CurrentJob+0x5>
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	a1 05       	cpc	r26, r1
    1276:	b1 05       	cpc	r27, r1
    1278:	79 f0       	breq	.+30     	; 0x1298 <SIMCOM_MainFunction+0xf2>
			{
				SIMCOM_CurrentJob.Timeout--;
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	a1 09       	sbc	r26, r1
    127e:	b1 09       	sbc	r27, r1
    1280:	80 93 f6 05 	sts	0x05F6, r24	; 0x8005f6 <SIMCOM_CurrentJob+0x2>
    1284:	90 93 f7 05 	sts	0x05F7, r25	; 0x8005f7 <SIMCOM_CurrentJob+0x3>
    1288:	a0 93 f8 05 	sts	0x05F8, r26	; 0x8005f8 <SIMCOM_CurrentJob+0x4>
    128c:	b0 93 f9 05 	sts	0x05F9, r27	; 0x8005f9 <SIMCOM_CurrentJob+0x5>

				SIMCOM_Callback(SIMCOM_Job_InProgress);
    1290:	82 e0       	ldi	r24, 0x02	; 2
    1292:	0e 94 22 08 	call	0x1044	; 0x1044 <SIMCOM_Callback>
    1296:	0d c0       	rjmp	.+26     	; 0x12b2 <SIMCOM_MainFunction+0x10c>
			else
			{
//				Debug_SendString("Response Timeout");

				// If the response has timed out, then give a callback stating error
				SIMCOM_Callback(SIMCOM_Job_Timeout);
    1298:	83 e0       	ldi	r24, 0x03	; 3
    129a:	0e 94 22 08 	call	0x1044	; 0x1044 <SIMCOM_Callback>

				SIMCOM_ResetJob();
    129e:	0e 94 c4 06 	call	0xd88	; 0xd88 <SIMCOM_ResetJob>
    12a2:	07 c0       	rjmp	.+14     	; 0x12b2 <SIMCOM_MainFunction+0x10c>
		break;

		case SIMCOM_ReceptionCompleted:
		{
			// Update the Response to the SIMCOM Response Buffer
			SIMCOM_UpdateCurrentJobResponse();
    12a4:	0e 94 d6 06 	call	0xdac	; 0xdac <SIMCOM_UpdateCurrentJobResponse>

			// Once the reception is completed, then give a callback to read the data
			SIMCOM_Callback(SIMCOM_Job_Completed);
    12a8:	85 e0       	ldi	r24, 0x05	; 5
    12aa:	0e 94 22 08 	call	0x1044	; 0x1044 <SIMCOM_Callback>

			SIMCOM_ResetJob();
    12ae:	0e 94 c4 06 	call	0xd88	; 0xd88 <SIMCOM_ResetJob>
		}
	}

	if(SIMCOM_ComState != SIMCOM_Idle)
    12b2:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <SIMCOM_ComState>
    12b6:	88 23       	and	r24, r24
    12b8:	61 f0       	breq	.+24     	; 0x12d2 <SIMCOM_MainFunction+0x12c>
	{
		SIMCOM_Aliveness_Counter = P_SIMCOM_ALIVENESS_ERROR_TIME; // Reload Timer
    12ba:	80 e6       	ldi	r24, 0x60	; 96
    12bc:	9a ee       	ldi	r25, 0xEA	; 234
    12be:	a0 e0       	ldi	r26, 0x00	; 0
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    12c6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    12ca:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    12ce:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	}

	/* Call the Main Functions of the SIMCOM Sub Modules */

	SIMCOM_StateMachine();
    12d2:	0e 94 da 09 	call	0x13b4	; 0x13b4 <SIMCOM_StateMachine>
	SIMCOM_SSL_CONFIG_MainFunction();
    12d6:	0e 94 36 11 	call	0x226c	; 0x226c <SIMCOM_SSL_CONFIG_MainFunction>
	MQTT_StateMachine();
    12da:	0e 94 cd 0c 	call	0x199a	; 0x199a <MQTT_StateMachine>
	MQTT_Publish_StateMachine();
    12de:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <MQTT_Publish_StateMachine>
	MQTT_AppMain();
    12e2:	0e 94 31 13 	call	0x2662	; 0x2662 <MQTT_AppMain>
    12e6:	08 95       	ret

000012e8 <SIMCOM_StateMachine_Callback>:
static void SIMCOM_StateMachine_Callback(SIMCOM_Job_Result_EN result)
{
	// This function will be called by the SIMCOM handler upon successful reception of the response

	// This will be read in the Main function, so simply set the value
	SIMCOM_Job_Result = result;
    12e8:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <SIMCOM_Job_Result>
    12ec:	08 95       	ret

000012ee <APN_Selection>:
}

void APN_Selection(char *checkstring)
{
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	6e 97       	sbiw	r28, 0x1e	; 30
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
	checkstring = checkstring+5;
    1306:	dc 01       	movw	r26, r24
    1308:	15 96       	adiw	r26, 0x05	; 5
	UBYTE i;
	char *APN,temp[30];
	ULONG val;
	for(i=0;i<=3;i++)
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	09 c0       	rjmp	.+18     	; 0x1320 <APN_Selection+0x32>
	{
		temp[i] = *checkstring;
    130e:	8d 91       	ld	r24, X+
    1310:	e1 e0       	ldi	r30, 0x01	; 1
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	ec 0f       	add	r30, r28
    1316:	fd 1f       	adc	r31, r29
    1318:	e9 0f       	add	r30, r25
    131a:	f1 1d       	adc	r31, r1
    131c:	80 83       	st	Z, r24
{
	checkstring = checkstring+5;
	UBYTE i;
	char *APN,temp[30];
	ULONG val;
	for(i=0;i<=3;i++)
    131e:	9f 5f       	subi	r25, 0xFF	; 255
    1320:	94 30       	cpi	r25, 0x04	; 4
    1322:	a8 f3       	brcs	.-22     	; 0x130e <APN_Selection+0x20>
	{
		temp[i] = *checkstring;
		checkstring++;
	}
	val = atoi(temp);
    1324:	ce 01       	movw	r24, r28
    1326:	01 96       	adiw	r24, 0x01	; 1
    1328:	0e 94 dd 13 	call	0x27ba	; 0x27ba <atoi>
    132c:	09 2e       	mov	r0, r25
    132e:	00 0c       	add	r0, r0
    1330:	aa 0b       	sbc	r26, r26
    1332:	bb 0b       	sbc	r27, r27
	if(val == 4044)
    1334:	8c 3c       	cpi	r24, 0xCC	; 204
    1336:	2f e0       	ldi	r18, 0x0F	; 15
    1338:	92 07       	cpc	r25, r18
    133a:	a1 05       	cpc	r26, r1
    133c:	b1 05       	cpc	r27, r1
    133e:	91 f0       	breq	.+36     	; 0x1364 <APN_Selection+0x76>
	{
		APN = VI;
	}
	else if(val == 4058)
    1340:	8a 3d       	cpi	r24, 0xDA	; 218
    1342:	2f e0       	ldi	r18, 0x0F	; 15
    1344:	92 07       	cpc	r25, r18
    1346:	a1 05       	cpc	r26, r1
    1348:	b1 05       	cpc	r27, r1
    134a:	79 f0       	breq	.+30     	; 0x136a <APN_Selection+0x7c>
	{
		APN = JIO;
	}
	else if(val == 4049)
    134c:	81 3d       	cpi	r24, 0xD1	; 209
    134e:	2f e0       	ldi	r18, 0x0F	; 15
    1350:	92 07       	cpc	r25, r18
    1352:	a1 05       	cpc	r26, r1
    1354:	b1 05       	cpc	r27, r1
    1356:	61 f0       	breq	.+24     	; 0x1370 <APN_Selection+0x82>
	{
		APN = AIRTEL;
	}
	else if(val == 4048)
    1358:	80 3d       	cpi	r24, 0xD0	; 208
    135a:	9f 40       	sbci	r25, 0x0F	; 15
    135c:	a1 05       	cpc	r26, r1
    135e:	b1 05       	cpc	r27, r1
    1360:	61 f4       	brne	.+24     	; 0x137a <APN_Selection+0x8c>
    1362:	09 c0       	rjmp	.+18     	; 0x1376 <APN_Selection+0x88>
		checkstring++;
	}
	val = atoi(temp);
	if(val == 4044)
	{
		APN = VI;
    1364:	07 ef       	ldi	r16, 0xF7	; 247
    1366:	10 e0       	ldi	r17, 0x00	; 0
    1368:	08 c0       	rjmp	.+16     	; 0x137a <APN_Selection+0x8c>
	}
	else if(val == 4058)
	{
		APN = JIO;
    136a:	02 e0       	ldi	r16, 0x02	; 2
    136c:	11 e0       	ldi	r17, 0x01	; 1
    136e:	05 c0       	rjmp	.+10     	; 0x137a <APN_Selection+0x8c>
	}
	else if(val == 4049)
	{
		APN = AIRTEL;
    1370:	0b e0       	ldi	r16, 0x0B	; 11
    1372:	11 e0       	ldi	r17, 0x01	; 1
    1374:	02 c0       	rjmp	.+4      	; 0x137a <APN_Selection+0x8c>
	}
	else if(val == 4048)
	{
		APN = BSNL;
    1376:	0c e1       	ldi	r16, 0x1C	; 28
    1378:	11 e0       	ldi	r17, 0x01	; 1
	}
	sprintf(APN_name,"AT+CGDCONT=1,\"IP\",%s",APN);
    137a:	1f 93       	push	r17
    137c:	0f 93       	push	r16
    137e:	86 e2       	ldi	r24, 0x26	; 38
    1380:	91 e0       	ldi	r25, 0x01	; 1
    1382:	9f 93       	push	r25
    1384:	8f 93       	push	r24
    1386:	8d ef       	ldi	r24, 0xFD	; 253
    1388:	95 e0       	ldi	r25, 0x05	; 5
    138a:	9f 93       	push	r25
    138c:	8f 93       	push	r24
    138e:	0e 94 43 14 	call	0x2886	; 0x2886 <sprintf>
}
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	6e 96       	adiw	r28, 0x1e	; 30
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	cd bf       	out	0x3d, r28	; 61
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	1f 91       	pop	r17
    13b0:	0f 91       	pop	r16
    13b2:	08 95       	ret

000013b4 <SIMCOM_StateMachine>:
/*****************************************/
/* Function Definitions                  */
/*****************************************/

void SIMCOM_StateMachine(void)
{
    13b4:	cf 93       	push	r28
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
    13b6:	c0 91 0e 04 	lds	r28, 0x040E	; 0x80040e <SIMCOM_State>
	
	BOOL RetryInNextCycle = FALSE;

	switch(SIMCOM_State)
    13ba:	8c 2f       	mov	r24, r28
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	8c 30       	cpi	r24, 0x0C	; 12
    13c0:	91 05       	cpc	r25, r1
    13c2:	08 f0       	brcs	.+2      	; 0x13c6 <SIMCOM_StateMachine+0x12>
    13c4:	45 c2       	rjmp	.+1162   	; 0x1850 <SIMCOM_StateMachine+0x49c>
    13c6:	fc 01       	movw	r30, r24
    13c8:	e6 5d       	subi	r30, 0xD6	; 214
    13ca:	ff 4f       	sbci	r31, 0xFF	; 255
    13cc:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__tablejump2__>
	{
		case SIMCOM_SM_Init:
		{
			// First Ensure the SIMCOM Module is Connected
			if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    13d0:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_Job_Result>
    13d4:	81 11       	cpse	r24, r1
    13d6:	11 c0       	rjmp	.+34     	; 0x13fa <SIMCOM_StateMachine+0x46>
			{
				// Send AT Command and wait for response
				if(SIMCOM_Schedule_Job("AT", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
    13d8:	24 e7       	ldi	r18, 0x74	; 116
    13da:	39 e0       	ldi	r19, 0x09	; 9
    13dc:	40 ed       	ldi	r20, 0xD0	; 208
    13de:	57 e0       	ldi	r21, 0x07	; 7
    13e0:	60 e0       	ldi	r22, 0x00	; 0
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	8b e3       	ldi	r24, 0x3B	; 59
    13e6:	91 e0       	ldi	r25, 0x01	; 1
    13e8:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    13ec:	81 30       	cpi	r24, 0x01	; 1
    13ee:	09 f0       	breq	.+2      	; 0x13f2 <SIMCOM_StateMachine+0x3e>
    13f0:	31 c2       	rjmp	.+1122   	; 0x1854 <SIMCOM_StateMachine+0x4a0>
				{	
					// Set it to Scheduled only when the SIMCOM Module Accepted it
					SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    13f2:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <SIMCOM_Job_Result>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	72 c2       	rjmp	.+1252   	; 0x18de <SIMCOM_StateMachine+0x52a>
			}
			else
			{
				
				// Cyclic part for the response
				if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    13fa:	85 30       	cpi	r24, 0x05	; 5
    13fc:	c9 f4       	brne	.+50     	; 0x1430 <SIMCOM_StateMachine+0x7c>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    13fe:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <SIMCOM_ResponseLength>
    1402:	82 30       	cpi	r24, 0x02	; 2
    1404:	51 f4       	brne	.+20     	; 0x141a <SIMCOM_StateMachine+0x66>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    1406:	6e e3       	ldi	r22, 0x3E	; 62
    1408:	71 e0       	ldi	r23, 0x01	; 1
    140a:	8c e2       	ldi	r24, 0x2C	; 44
    140c:	95 e0       	ldi	r25, 0x05	; 5
    140e:	0e 94 11 14 	call	0x2822	; 0x2822 <strcmp>
    1412:	89 2b       	or	r24, r25
    1414:	21 f0       	breq	.+8      	; 0x141e <SIMCOM_StateMachine+0x6a>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	03 c0       	rjmp	.+6      	; 0x1420 <SIMCOM_StateMachine+0x6c>
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	01 c0       	rjmp	.+2      	; 0x1420 <SIMCOM_StateMachine+0x6c>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    141e:	81 e0       	ldi	r24, 0x01	; 1
				{
					// Job has been completed
					
					// Check if the response is OK or not.
					if(SIMCOM_IsResponseOK())
    1420:	88 23       	and	r24, r24
    1422:	09 f4       	brne	.+2      	; 0x1426 <SIMCOM_StateMachine+0x72>
    1424:	19 c2       	rjmp	.+1074   	; 0x1858 <SIMCOM_StateMachine+0x4a4>
					{
						SIMCOM_State = SIMCOM_SM_SIM_Check;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <SIMCOM_State>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	57 c2       	rjmp	.+1198   	; 0x18de <SIMCOM_StateMachine+0x52a>
						// If the returned value is ERROR or something else, then act accordingly
						// TODO: Later
						RetryInNextCycle = TRUE;
					}
				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1430:	83 50       	subi	r24, 0x03	; 3
    1432:	82 30       	cpi	r24, 0x02	; 2
    1434:	08 f4       	brcc	.+2      	; 0x1438 <SIMCOM_StateMachine+0x84>
    1436:	12 c2       	rjmp	.+1060   	; 0x185c <SIMCOM_StateMachine+0x4a8>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	51 c2       	rjmp	.+1186   	; 0x18de <SIMCOM_StateMachine+0x52a>
		}
		break;
		case SIMCOM_SM_SIM_Check:
		{
			// First Ensure the SIMCOM Module is Connected
			if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    143c:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_Job_Result>
    1440:	81 11       	cpse	r24, r1
    1442:	11 c0       	rjmp	.+34     	; 0x1466 <SIMCOM_StateMachine+0xb2>
			{

				// Send AT Command and wait for response
				if(SIMCOM_Schedule_Job("AT+CPIN?", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
    1444:	24 e7       	ldi	r18, 0x74	; 116
    1446:	39 e0       	ldi	r19, 0x09	; 9
    1448:	40 ed       	ldi	r20, 0xD0	; 208
    144a:	57 e0       	ldi	r21, 0x07	; 7
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	70 e0       	ldi	r23, 0x00	; 0
    1450:	81 e4       	ldi	r24, 0x41	; 65
    1452:	91 e0       	ldi	r25, 0x01	; 1
    1454:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1458:	81 30       	cpi	r24, 0x01	; 1
    145a:	09 f0       	breq	.+2      	; 0x145e <SIMCOM_StateMachine+0xaa>
    145c:	01 c2       	rjmp	.+1026   	; 0x1860 <SIMCOM_StateMachine+0x4ac>
				{
					// Set it to Scheduled only when the SIMCOM Module Accepted it
					SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    145e:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <SIMCOM_Job_Result>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	3c c2       	rjmp	.+1144   	; 0x18de <SIMCOM_StateMachine+0x52a>
			}
			else
			{
						
				// Cyclic part for the response
				if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1466:	85 30       	cpi	r24, 0x05	; 5
    1468:	f9 f4       	brne	.+62     	; 0x14a8 <SIMCOM_StateMachine+0xf4>
				{
					// Job has been completed
					char * RxString = StringHelper_GetPointerAfter(SIMCOM_GetResponseBuffer(), "+CPIN: ");
    146a:	6a e4       	ldi	r22, 0x4A	; 74
    146c:	71 e0       	ldi	r23, 0x01	; 1
    146e:	8c e2       	ldi	r24, 0x2C	; 44
    1470:	95 e0       	ldi	r25, 0x05	; 5
    1472:	0e 94 ef 04 	call	0x9de	; 0x9de <StringHelper_GetPointerAfter>
							

					if(strcmp(RxString, "READY") == 0)
    1476:	68 e5       	ldi	r22, 0x58	; 88
    1478:	71 e0       	ldi	r23, 0x01	; 1
    147a:	0e 94 11 14 	call	0x2822	; 0x2822 <strcmp>
    147e:	89 2b       	or	r24, r25
    1480:	09 f0       	breq	.+2      	; 0x1484 <SIMCOM_StateMachine+0xd0>
    1482:	f0 c1       	rjmp	.+992    	; 0x1864 <SIMCOM_StateMachine+0x4b0>
					{
						char * RxString = StringHelper_GetPointerAfter(SIMCOM_GetResponseBuffer(), "+CPIN:READY");
    1484:	62 e5       	ldi	r22, 0x52	; 82
    1486:	71 e0       	ldi	r23, 0x01	; 1
    1488:	8c e2       	ldi	r24, 0x2C	; 44
    148a:	95 e0       	ldi	r25, 0x05	; 5
    148c:	0e 94 ef 04 	call	0x9de	; 0x9de <StringHelper_GetPointerAfter>
								
						// Check if the response is OK or not.
						if(strcmp(RxString,"OK"))
    1490:	6e e3       	ldi	r22, 0x3E	; 62
    1492:	71 e0       	ldi	r23, 0x01	; 1
    1494:	0e 94 11 14 	call	0x2822	; 0x2822 <strcmp>
    1498:	89 2b       	or	r24, r25
    149a:	09 f4       	brne	.+2      	; 0x149e <SIMCOM_StateMachine+0xea>
    149c:	e5 c1       	rjmp	.+970    	; 0x1868 <SIMCOM_StateMachine+0x4b4>
						{
							SIMCOM_State = SIMCOM_DisableCall;
    149e:	85 e0       	ldi	r24, 0x05	; 5
    14a0:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <SIMCOM_State>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	1b c2       	rjmp	.+1078   	; 0x18de <SIMCOM_StateMachine+0x52a>
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}			
				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    14a8:	83 50       	subi	r24, 0x03	; 3
    14aa:	82 30       	cpi	r24, 0x02	; 2
    14ac:	08 f4       	brcc	.+2      	; 0x14b0 <SIMCOM_StateMachine+0xfc>
    14ae:	de c1       	rjmp	.+956    	; 0x186c <SIMCOM_StateMachine+0x4b8>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	15 c2       	rjmp	.+1066   	; 0x18de <SIMCOM_StateMachine+0x52a>
		}
		break;
		
		case SIMCOM_DisableCall:
		{
			if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    14b4:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_Job_Result>
    14b8:	81 11       	cpse	r24, r1
    14ba:	11 c0       	rjmp	.+34     	; 0x14de <SIMCOM_StateMachine+0x12a>
			{
				// Send AT Command and wait for response
				if(SIMCOM_Schedule_Job("AT+CRC=0", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
    14bc:	24 e7       	ldi	r18, 0x74	; 116
    14be:	39 e0       	ldi	r19, 0x09	; 9
    14c0:	40 ed       	ldi	r20, 0xD0	; 208
    14c2:	57 e0       	ldi	r21, 0x07	; 7
    14c4:	60 e0       	ldi	r22, 0x00	; 0
    14c6:	70 e0       	ldi	r23, 0x00	; 0
    14c8:	8e e5       	ldi	r24, 0x5E	; 94
    14ca:	91 e0       	ldi	r25, 0x01	; 1
    14cc:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    14d0:	81 30       	cpi	r24, 0x01	; 1
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <SIMCOM_StateMachine+0x122>
    14d4:	cd c1       	rjmp	.+922    	; 0x1870 <SIMCOM_StateMachine+0x4bc>
				{
					// Set it to Scheduled only when the SIMCOM Module Accepted it
					SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    14d6:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <SIMCOM_Job_Result>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	00 c2       	rjmp	.+1024   	; 0x18de <SIMCOM_StateMachine+0x52a>
				}
			}
			else
			{
				// Cyclic part for the response
				if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    14de:	85 30       	cpi	r24, 0x05	; 5
    14e0:	c9 f4       	brne	.+50     	; 0x1514 <SIMCOM_StateMachine+0x160>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    14e2:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <SIMCOM_ResponseLength>
    14e6:	82 30       	cpi	r24, 0x02	; 2
    14e8:	51 f4       	brne	.+20     	; 0x14fe <SIMCOM_StateMachine+0x14a>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    14ea:	6e e3       	ldi	r22, 0x3E	; 62
    14ec:	71 e0       	ldi	r23, 0x01	; 1
    14ee:	8c e2       	ldi	r24, 0x2C	; 44
    14f0:	95 e0       	ldi	r25, 0x05	; 5
    14f2:	0e 94 11 14 	call	0x2822	; 0x2822 <strcmp>
    14f6:	89 2b       	or	r24, r25
    14f8:	21 f0       	breq	.+8      	; 0x1502 <SIMCOM_StateMachine+0x14e>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	03 c0       	rjmp	.+6      	; 0x1504 <SIMCOM_StateMachine+0x150>
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	01 c0       	rjmp	.+2      	; 0x1504 <SIMCOM_StateMachine+0x150>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    1502:	81 e0       	ldi	r24, 0x01	; 1
				{
					/* Accept both Roaming and Local Registration */
					if(SIMCOM_IsResponseOK())
    1504:	88 23       	and	r24, r24
    1506:	09 f4       	brne	.+2      	; 0x150a <SIMCOM_StateMachine+0x156>
    1508:	b5 c1       	rjmp	.+874    	; 0x1874 <SIMCOM_StateMachine+0x4c0>
					{
						SIMCOM_State = SIMCOM_DisableMsg; // Move to next state
    150a:	86 e0       	ldi	r24, 0x06	; 6
    150c:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <SIMCOM_State>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	e5 c1       	rjmp	.+970    	; 0x18de <SIMCOM_StateMachine+0x52a>

						RetryInNextCycle = TRUE;
					}

				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1514:	83 50       	subi	r24, 0x03	; 3
    1516:	82 30       	cpi	r24, 0x02	; 2
    1518:	08 f4       	brcc	.+2      	; 0x151c <SIMCOM_StateMachine+0x168>
    151a:	ae c1       	rjmp	.+860    	; 0x1878 <SIMCOM_StateMachine+0x4c4>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	df c1       	rjmp	.+958    	; 0x18de <SIMCOM_StateMachine+0x52a>
		}
		break;
		
		case SIMCOM_DisableMsg:
		{
			if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1520:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_Job_Result>
    1524:	81 11       	cpse	r24, r1
    1526:	11 c0       	rjmp	.+34     	; 0x154a <SIMCOM_StateMachine+0x196>
			{
				// Send AT Command and wait for response
				if(SIMCOM_Schedule_Job("AT+CNMI=0,0,0,0", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
    1528:	24 e7       	ldi	r18, 0x74	; 116
    152a:	39 e0       	ldi	r19, 0x09	; 9
    152c:	40 ed       	ldi	r20, 0xD0	; 208
    152e:	57 e0       	ldi	r21, 0x07	; 7
    1530:	60 e0       	ldi	r22, 0x00	; 0
    1532:	70 e0       	ldi	r23, 0x00	; 0
    1534:	87 e6       	ldi	r24, 0x67	; 103
    1536:	91 e0       	ldi	r25, 0x01	; 1
    1538:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    153c:	81 30       	cpi	r24, 0x01	; 1
    153e:	09 f0       	breq	.+2      	; 0x1542 <SIMCOM_StateMachine+0x18e>
    1540:	9d c1       	rjmp	.+826    	; 0x187c <SIMCOM_StateMachine+0x4c8>
				{
					// Set it to Scheduled only when the SIMCOM Module Accepted it
					SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1542:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <SIMCOM_Job_Result>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	ca c1       	rjmp	.+916    	; 0x18de <SIMCOM_StateMachine+0x52a>
				}
			}
			else
			{
				// Cyclic part for the response
				if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    154a:	85 30       	cpi	r24, 0x05	; 5
    154c:	c9 f4       	brne	.+50     	; 0x1580 <SIMCOM_StateMachine+0x1cc>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    154e:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <SIMCOM_ResponseLength>
    1552:	82 30       	cpi	r24, 0x02	; 2
    1554:	51 f4       	brne	.+20     	; 0x156a <SIMCOM_StateMachine+0x1b6>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    1556:	6e e3       	ldi	r22, 0x3E	; 62
    1558:	71 e0       	ldi	r23, 0x01	; 1
    155a:	8c e2       	ldi	r24, 0x2C	; 44
    155c:	95 e0       	ldi	r25, 0x05	; 5
    155e:	0e 94 11 14 	call	0x2822	; 0x2822 <strcmp>
    1562:	89 2b       	or	r24, r25
    1564:	21 f0       	breq	.+8      	; 0x156e <SIMCOM_StateMachine+0x1ba>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	03 c0       	rjmp	.+6      	; 0x1570 <SIMCOM_StateMachine+0x1bc>
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	01 c0       	rjmp	.+2      	; 0x1570 <SIMCOM_StateMachine+0x1bc>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    156e:	81 e0       	ldi	r24, 0x01	; 1
				{
					/* Accept both Roaming and Local Registration */
					if(SIMCOM_IsResponseOK())
    1570:	88 23       	and	r24, r24
    1572:	09 f4       	brne	.+2      	; 0x1576 <SIMCOM_StateMachine+0x1c2>
    1574:	85 c1       	rjmp	.+778    	; 0x1880 <SIMCOM_StateMachine+0x4cc>
					{
						SIMCOM_State = SIMCOM_DisableGPRS_URC; // Move to next state
    1576:	87 e0       	ldi	r24, 0x07	; 7
    1578:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <SIMCOM_State>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	af c1       	rjmp	.+862    	; 0x18de <SIMCOM_StateMachine+0x52a>

						RetryInNextCycle = TRUE;
					}

				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1580:	83 50       	subi	r24, 0x03	; 3
    1582:	82 30       	cpi	r24, 0x02	; 2
    1584:	08 f4       	brcc	.+2      	; 0x1588 <SIMCOM_StateMachine+0x1d4>
    1586:	7e c1       	rjmp	.+764    	; 0x1884 <SIMCOM_StateMachine+0x4d0>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	a9 c1       	rjmp	.+850    	; 0x18de <SIMCOM_StateMachine+0x52a>
		}
		break;
		
		case SIMCOM_DisableGPRS_URC:
		{
			if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    158c:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_Job_Result>
    1590:	81 11       	cpse	r24, r1
    1592:	11 c0       	rjmp	.+34     	; 0x15b6 <SIMCOM_StateMachine+0x202>
			{
				// Send AT Command and wait for response
				if(SIMCOM_Schedule_Job("AT+CSSN=0,0", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
    1594:	24 e7       	ldi	r18, 0x74	; 116
    1596:	39 e0       	ldi	r19, 0x09	; 9
    1598:	40 ed       	ldi	r20, 0xD0	; 208
    159a:	57 e0       	ldi	r21, 0x07	; 7
    159c:	60 e0       	ldi	r22, 0x00	; 0
    159e:	70 e0       	ldi	r23, 0x00	; 0
    15a0:	87 e7       	ldi	r24, 0x77	; 119
    15a2:	91 e0       	ldi	r25, 0x01	; 1
    15a4:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    15a8:	81 30       	cpi	r24, 0x01	; 1
    15aa:	09 f0       	breq	.+2      	; 0x15ae <SIMCOM_StateMachine+0x1fa>
    15ac:	6d c1       	rjmp	.+730    	; 0x1888 <SIMCOM_StateMachine+0x4d4>
				{
					// Set it to Scheduled only when the SIMCOM Module Accepted it
					SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    15ae:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <SIMCOM_Job_Result>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	94 c1       	rjmp	.+808    	; 0x18de <SIMCOM_StateMachine+0x52a>
				}
			}
			else
			{
				// Cyclic part for the response
				if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    15b6:	85 30       	cpi	r24, 0x05	; 5
    15b8:	c9 f4       	brne	.+50     	; 0x15ec <SIMCOM_StateMachine+0x238>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    15ba:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <SIMCOM_ResponseLength>
    15be:	82 30       	cpi	r24, 0x02	; 2
    15c0:	51 f4       	brne	.+20     	; 0x15d6 <SIMCOM_StateMachine+0x222>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    15c2:	6e e3       	ldi	r22, 0x3E	; 62
    15c4:	71 e0       	ldi	r23, 0x01	; 1
    15c6:	8c e2       	ldi	r24, 0x2C	; 44
    15c8:	95 e0       	ldi	r25, 0x05	; 5
    15ca:	0e 94 11 14 	call	0x2822	; 0x2822 <strcmp>
    15ce:	89 2b       	or	r24, r25
    15d0:	21 f0       	breq	.+8      	; 0x15da <SIMCOM_StateMachine+0x226>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	03 c0       	rjmp	.+6      	; 0x15dc <SIMCOM_StateMachine+0x228>
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	01 c0       	rjmp	.+2      	; 0x15dc <SIMCOM_StateMachine+0x228>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    15da:	81 e0       	ldi	r24, 0x01	; 1
				{
					/* Accept both Roaming and Local Registration */
					if(SIMCOM_IsResponseOK())
    15dc:	88 23       	and	r24, r24
    15de:	09 f4       	brne	.+2      	; 0x15e2 <SIMCOM_StateMachine+0x22e>
    15e0:	55 c1       	rjmp	.+682    	; 0x188c <SIMCOM_StateMachine+0x4d8>
					{
						SIMCOM_State = SIMCOM_SM_Check_signal_strength; // Move to next state
    15e2:	82 e0       	ldi	r24, 0x02	; 2
    15e4:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <SIMCOM_State>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	79 c1       	rjmp	.+754    	; 0x18de <SIMCOM_StateMachine+0x52a>

						RetryInNextCycle = TRUE;
					}

				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    15ec:	83 50       	subi	r24, 0x03	; 3
    15ee:	82 30       	cpi	r24, 0x02	; 2
    15f0:	08 f4       	brcc	.+2      	; 0x15f4 <SIMCOM_StateMachine+0x240>
    15f2:	4e c1       	rjmp	.+668    	; 0x1890 <SIMCOM_StateMachine+0x4dc>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	73 c1       	rjmp	.+742    	; 0x18de <SIMCOM_StateMachine+0x52a>
		break;
		
		case SIMCOM_SM_Check_signal_strength:
		{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    15f8:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_Job_Result>
    15fc:	81 11       	cpse	r24, r1
    15fe:	11 c0       	rjmp	.+34     	; 0x1622 <SIMCOM_StateMachine+0x26e>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CSQ", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
    1600:	24 e7       	ldi	r18, 0x74	; 116
    1602:	39 e0       	ldi	r19, 0x09	; 9
    1604:	40 ed       	ldi	r20, 0xD0	; 208
    1606:	57 e0       	ldi	r21, 0x07	; 7
    1608:	60 e0       	ldi	r22, 0x00	; 0
    160a:	70 e0       	ldi	r23, 0x00	; 0
    160c:	83 e8       	ldi	r24, 0x83	; 131
    160e:	91 e0       	ldi	r25, 0x01	; 1
    1610:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1614:	81 30       	cpi	r24, 0x01	; 1
    1616:	09 f0       	breq	.+2      	; 0x161a <SIMCOM_StateMachine+0x266>
    1618:	3d c1       	rjmp	.+634    	; 0x1894 <SIMCOM_StateMachine+0x4e0>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    161a:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <SIMCOM_Job_Result>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	5e c1       	rjmp	.+700    	; 0x18de <SIMCOM_StateMachine+0x52a>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1622:	85 30       	cpi	r24, 0x05	; 5
    1624:	81 f4       	brne	.+32     	; 0x1646 <SIMCOM_StateMachine+0x292>
						// Job has been completed

						// Positive Response would be -> +CLTS: <mode>
						// <mode> : 0 Disable   1 Enable

						ULONG NetworkStrength = SIMCOM_GetCSV_Number_fromBuffer("+CSQ: ", 1);
    1626:	61 e0       	ldi	r22, 0x01	; 1
    1628:	8a e8       	ldi	r24, 0x8A	; 138
    162a:	91 e0       	ldi	r25, 0x01	; 1
    162c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <SIMCOM_GetCSV_Number_fromBuffer>

						/* Accept both Roaming and Local Registration */
						if(NetworkStrength <= 31)
    1630:	60 32       	cpi	r22, 0x20	; 32
    1632:	71 05       	cpc	r23, r1
    1634:	81 05       	cpc	r24, r1
    1636:	91 05       	cpc	r25, r1
    1638:	08 f0       	brcs	.+2      	; 0x163c <SIMCOM_StateMachine+0x288>
    163a:	2e c1       	rjmp	.+604    	; 0x1898 <SIMCOM_StateMachine+0x4e4>
						{
						
							SIMCOM_State = SIMCOM_SM_NW_Registration_Check; // Move to next state
    163c:	83 e0       	ldi	r24, 0x03	; 3
    163e:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <SIMCOM_State>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	4c c1       	rjmp	.+664    	; 0x18de <SIMCOM_StateMachine+0x52a>
							}

							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1646:	83 50       	subi	r24, 0x03	; 3
    1648:	82 30       	cpi	r24, 0x02	; 2
    164a:	08 f4       	brcc	.+2      	; 0x164e <SIMCOM_StateMachine+0x29a>
    164c:	27 c1       	rjmp	.+590    	; 0x189c <SIMCOM_StateMachine+0x4e8>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	46 c1       	rjmp	.+652    	; 0x18de <SIMCOM_StateMachine+0x52a>
		}
		break;

		case SIMCOM_SM_NW_Registration_Check:
		{
			if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1652:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_Job_Result>
    1656:	81 11       	cpse	r24, r1
    1658:	11 c0       	rjmp	.+34     	; 0x167c <SIMCOM_StateMachine+0x2c8>
			{
				// Send AT Command and wait for response
				if(SIMCOM_Schedule_Job("AT+CREG?", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
    165a:	24 e7       	ldi	r18, 0x74	; 116
    165c:	39 e0       	ldi	r19, 0x09	; 9
    165e:	40 ed       	ldi	r20, 0xD0	; 208
    1660:	57 e0       	ldi	r21, 0x07	; 7
    1662:	60 e0       	ldi	r22, 0x00	; 0
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	81 e9       	ldi	r24, 0x91	; 145
    1668:	91 e0       	ldi	r25, 0x01	; 1
    166a:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	09 f0       	breq	.+2      	; 0x1674 <SIMCOM_StateMachine+0x2c0>
    1672:	16 c1       	rjmp	.+556    	; 0x18a0 <SIMCOM_StateMachine+0x4ec>
				{
					// Set it to Scheduled only when the SIMCOM Module Accepted it
					SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1674:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <SIMCOM_Job_Result>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	31 c1       	rjmp	.+610    	; 0x18de <SIMCOM_StateMachine+0x52a>
				}
			}
			else
			{
				// Cyclic part for the response
				if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    167c:	85 30       	cpi	r24, 0x05	; 5
    167e:	a9 f4       	brne	.+42     	; 0x16aa <SIMCOM_StateMachine+0x2f6>
								3 Registration denied
								4 Unknown
								5 Registered, roaming
					 */

					ULONG NetworkRegistrationStatus = SIMCOM_GetCSV_Number_fromBuffer("+CREG: ", 2);
    1680:	62 e0       	ldi	r22, 0x02	; 2
    1682:	8a e9       	ldi	r24, 0x9A	; 154
    1684:	91 e0       	ldi	r25, 0x01	; 1
    1686:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <SIMCOM_GetCSV_Number_fromBuffer>

					/* Accept both Roaming and Local Registration */
					if((NetworkRegistrationStatus == 1) || (NetworkRegistrationStatus == 5))
    168a:	61 30       	cpi	r22, 0x01	; 1
    168c:	71 05       	cpc	r23, r1
    168e:	81 05       	cpc	r24, r1
    1690:	91 05       	cpc	r25, r1
    1692:	31 f0       	breq	.+12     	; 0x16a0 <SIMCOM_StateMachine+0x2ec>
    1694:	65 30       	cpi	r22, 0x05	; 5
    1696:	71 05       	cpc	r23, r1
    1698:	81 05       	cpc	r24, r1
    169a:	91 05       	cpc	r25, r1
    169c:	09 f0       	breq	.+2      	; 0x16a0 <SIMCOM_StateMachine+0x2ec>
    169e:	02 c1       	rjmp	.+516    	; 0x18a4 <SIMCOM_StateMachine+0x4f0>
					{
						
						SIMCOM_State = SIMCOM_SM_CheckNetwork; // Move to next state
    16a0:	8a e0       	ldi	r24, 0x0A	; 10
    16a2:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <SIMCOM_State>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    16a6:	80 e0       	ldi	r24, 0x00	; 0

					/* Accept both Roaming and Local Registration */
					if((NetworkRegistrationStatus == 1) || (NetworkRegistrationStatus == 5))
					{
						
						SIMCOM_State = SIMCOM_SM_CheckNetwork; // Move to next state
    16a8:	1a c1       	rjmp	.+564    	; 0x18de <SIMCOM_StateMachine+0x52a>

						RetryInNextCycle = TRUE;
					}

				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    16aa:	83 50       	subi	r24, 0x03	; 3
    16ac:	82 30       	cpi	r24, 0x02	; 2
    16ae:	08 f4       	brcc	.+2      	; 0x16b2 <SIMCOM_StateMachine+0x2fe>
    16b0:	fb c0       	rjmp	.+502    	; 0x18a8 <SIMCOM_StateMachine+0x4f4>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	14 c1       	rjmp	.+552    	; 0x18de <SIMCOM_StateMachine+0x52a>
		break;
		
		case SIMCOM_SM_CheckNetwork:
		{
			// First Ensure the SIMCOM Module is Connected
			if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    16b6:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_Job_Result>
    16ba:	81 11       	cpse	r24, r1
    16bc:	11 c0       	rjmp	.+34     	; 0x16e0 <SIMCOM_StateMachine+0x32c>
			{
				// Send AT Command and wait for response
				if(SIMCOM_Schedule_Job("AT+COPS?", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
    16be:	24 e7       	ldi	r18, 0x74	; 116
    16c0:	39 e0       	ldi	r19, 0x09	; 9
    16c2:	40 ed       	ldi	r20, 0xD0	; 208
    16c4:	57 e0       	ldi	r21, 0x07	; 7
    16c6:	60 e0       	ldi	r22, 0x00	; 0
    16c8:	70 e0       	ldi	r23, 0x00	; 0
    16ca:	82 ea       	ldi	r24, 0xA2	; 162
    16cc:	91 e0       	ldi	r25, 0x01	; 1
    16ce:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    16d2:	81 30       	cpi	r24, 0x01	; 1
    16d4:	09 f0       	breq	.+2      	; 0x16d8 <SIMCOM_StateMachine+0x324>
    16d6:	ea c0       	rjmp	.+468    	; 0x18ac <SIMCOM_StateMachine+0x4f8>
				{
					//Display_String("AT");
					// Set it to Scheduled only when the SIMCOM Module Accepted it
					SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    16d8:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <SIMCOM_Job_Result>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	ff c0       	rjmp	.+510    	; 0x18de <SIMCOM_StateMachine+0x52a>
				}
			}
			else
			{
				// Cyclic part for the response
				if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    16e0:	85 30       	cpi	r24, 0x05	; 5
    16e2:	b1 f4       	brne	.+44     	; 0x1710 <SIMCOM_StateMachine+0x35c>
				{
					// Job has been completed
									
					// Check if the response is OK or not.
					if(IsSIMCOM_ResponseStartsWith("+COPS: "))
    16e4:	6c e2       	ldi	r22, 0x2C	; 44
    16e6:	75 e0       	ldi	r23, 0x05	; 5
    16e8:	8b ea       	ldi	r24, 0xAB	; 171
    16ea:	91 e0       	ldi	r25, 0x01	; 1
    16ec:	0e 94 74 05 	call	0xae8	; 0xae8 <StringHelper_startsWith>
    16f0:	88 23       	and	r24, r24
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <SIMCOM_StateMachine+0x342>
    16f4:	dd c0       	rjmp	.+442    	; 0x18b0 <SIMCOM_StateMachine+0x4fc>
					{
						char *Netstr = StringHelper_GetPointerAfter(SIMCOM_GetResponseBuffer(), "+COPS: ");
    16f6:	6b ea       	ldi	r22, 0xAB	; 171
    16f8:	71 e0       	ldi	r23, 0x01	; 1
    16fa:	8c e2       	ldi	r24, 0x2C	; 44
    16fc:	95 e0       	ldi	r25, 0x05	; 5
    16fe:	0e 94 ef 04 	call	0x9de	; 0x9de <StringHelper_GetPointerAfter>
						APN_Selection(Netstr);
    1702:	0e 94 77 09 	call	0x12ee	; 0x12ee <APN_Selection>
						SIMCOM_State = SIMCOM_SM_SelectNetwork;
    1706:	8b e0       	ldi	r24, 0x0B	; 11
    1708:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <SIMCOM_State>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	e7 c0       	rjmp	.+462    	; 0x18de <SIMCOM_StateMachine+0x52a>
						// If the returned value is ERROR or something else, then act accordingly
						// TODO: Later
						RetryInNextCycle = TRUE;
					}
				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1710:	83 50       	subi	r24, 0x03	; 3
    1712:	82 30       	cpi	r24, 0x02	; 2
    1714:	08 f4       	brcc	.+2      	; 0x1718 <SIMCOM_StateMachine+0x364>
    1716:	ce c0       	rjmp	.+412    	; 0x18b4 <SIMCOM_StateMachine+0x500>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1718:	80 e0       	ldi	r24, 0x00	; 0
    171a:	e1 c0       	rjmp	.+450    	; 0x18de <SIMCOM_StateMachine+0x52a>
		break;

		case SIMCOM_SM_SelectNetwork:
		{
			// First Ensure the SIMCOM Module is Connected
			if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    171c:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_Job_Result>
    1720:	81 11       	cpse	r24, r1
    1722:	11 c0       	rjmp	.+34     	; 0x1746 <SIMCOM_StateMachine+0x392>
			{

				// Send AT Command and wait for response
				if(SIMCOM_Schedule_Job(APN_name, SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
    1724:	24 e7       	ldi	r18, 0x74	; 116
    1726:	39 e0       	ldi	r19, 0x09	; 9
    1728:	40 ed       	ldi	r20, 0xD0	; 208
    172a:	57 e0       	ldi	r21, 0x07	; 7
    172c:	60 e0       	ldi	r22, 0x00	; 0
    172e:	70 e0       	ldi	r23, 0x00	; 0
    1730:	8d ef       	ldi	r24, 0xFD	; 253
    1732:	95 e0       	ldi	r25, 0x05	; 5
    1734:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	09 f0       	breq	.+2      	; 0x173e <SIMCOM_StateMachine+0x38a>
    173c:	bd c0       	rjmp	.+378    	; 0x18b8 <SIMCOM_StateMachine+0x504>
				{
					//Display_String("AT");
					// Set it to Scheduled only when the SIMCOM Module Accepted it
					SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    173e:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <SIMCOM_Job_Result>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	cc c0       	rjmp	.+408    	; 0x18de <SIMCOM_StateMachine+0x52a>
				}
			}
			else
			{
				// Cyclic part for the response
				if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1746:	85 30       	cpi	r24, 0x05	; 5
    1748:	c9 f4       	brne	.+50     	; 0x177c <SIMCOM_StateMachine+0x3c8>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    174a:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <SIMCOM_ResponseLength>
    174e:	82 30       	cpi	r24, 0x02	; 2
    1750:	51 f4       	brne	.+20     	; 0x1766 <SIMCOM_StateMachine+0x3b2>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    1752:	6e e3       	ldi	r22, 0x3E	; 62
    1754:	71 e0       	ldi	r23, 0x01	; 1
    1756:	8c e2       	ldi	r24, 0x2C	; 44
    1758:	95 e0       	ldi	r25, 0x05	; 5
    175a:	0e 94 11 14 	call	0x2822	; 0x2822 <strcmp>
    175e:	89 2b       	or	r24, r25
    1760:	21 f0       	breq	.+8      	; 0x176a <SIMCOM_StateMachine+0x3b6>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	03 c0       	rjmp	.+6      	; 0x176c <SIMCOM_StateMachine+0x3b8>
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	01 c0       	rjmp	.+2      	; 0x176c <SIMCOM_StateMachine+0x3b8>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    176a:	81 e0       	ldi	r24, 0x01	; 1
				{
					// Job has been completed

					// Check if the response is OK or not.
					if(SIMCOM_IsResponseOK())
    176c:	88 23       	and	r24, r24
    176e:	09 f4       	brne	.+2      	; 0x1772 <SIMCOM_StateMachine+0x3be>
    1770:	a5 c0       	rjmp	.+330    	; 0x18bc <SIMCOM_StateMachine+0x508>
					{
						SIMCOM_State = SIMCOM_SM_LTE_Check;
    1772:	88 e0       	ldi	r24, 0x08	; 8
    1774:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <SIMCOM_State>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	b1 c0       	rjmp	.+354    	; 0x18de <SIMCOM_StateMachine+0x52a>
						// If the returned value is ERROR or something else, then act accordingly
						// TODO: Later
						RetryInNextCycle = TRUE;
					}
				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    177c:	83 50       	subi	r24, 0x03	; 3
    177e:	82 30       	cpi	r24, 0x02	; 2
    1780:	08 f4       	brcc	.+2      	; 0x1784 <SIMCOM_StateMachine+0x3d0>
    1782:	9e c0       	rjmp	.+316    	; 0x18c0 <SIMCOM_StateMachine+0x50c>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	ab c0       	rjmp	.+342    	; 0x18de <SIMCOM_StateMachine+0x52a>
		}
		break;
		
		case SIMCOM_SM_LTE_Check:
		{
			if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1788:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_Job_Result>
    178c:	81 11       	cpse	r24, r1
    178e:	11 c0       	rjmp	.+34     	; 0x17b2 <SIMCOM_StateMachine+0x3fe>
			{
				if(SIMCOM_Schedule_Job("AT+CPSI?", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
    1790:	24 e7       	ldi	r18, 0x74	; 116
    1792:	39 e0       	ldi	r19, 0x09	; 9
    1794:	40 ed       	ldi	r20, 0xD0	; 208
    1796:	57 e0       	ldi	r21, 0x07	; 7
    1798:	60 e0       	ldi	r22, 0x00	; 0
    179a:	70 e0       	ldi	r23, 0x00	; 0
    179c:	83 eb       	ldi	r24, 0xB3	; 179
    179e:	91 e0       	ldi	r25, 0x01	; 1
    17a0:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    17a4:	81 30       	cpi	r24, 0x01	; 1
    17a6:	09 f0       	breq	.+2      	; 0x17aa <SIMCOM_StateMachine+0x3f6>
    17a8:	8d c0       	rjmp	.+282    	; 0x18c4 <SIMCOM_StateMachine+0x510>
				{
					// Set it to Scheduled only when the SIMCOM Module Accepted it
					SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    17aa:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <SIMCOM_Job_Result>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	96 c0       	rjmp	.+300    	; 0x18de <SIMCOM_StateMachine+0x52a>
				}
			}
			else
			{
				// Cyclic part for the response
				if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    17b2:	85 30       	cpi	r24, 0x05	; 5
    17b4:	d1 f4       	brne	.+52     	; 0x17ea <SIMCOM_StateMachine+0x436>
				{
					// Job has been completed
					char * RxString = StringHelper_GetPointerAfter(SIMCOM_GetResponseBuffer(), "+CPIN: ");
    17b6:	6a e4       	ldi	r22, 0x4A	; 74
    17b8:	71 e0       	ldi	r23, 0x01	; 1
    17ba:	8c e2       	ldi	r24, 0x2C	; 44
    17bc:	95 e0       	ldi	r25, 0x05	; 5
    17be:	0e 94 ef 04 	call	0x9de	; 0x9de <StringHelper_GetPointerAfter>
				
					if (*RxString)
    17c2:	fc 01       	movw	r30, r24
    17c4:	20 81       	ld	r18, Z
    17c6:	22 23       	and	r18, r18
    17c8:	09 f4       	brne	.+2      	; 0x17cc <SIMCOM_StateMachine+0x418>
    17ca:	7e c0       	rjmp	.+252    	; 0x18c8 <SIMCOM_StateMachine+0x514>
					{
						if (memcmp("LTE,Online",RxString,10))
    17cc:	4a e0       	ldi	r20, 0x0A	; 10
    17ce:	50 e0       	ldi	r21, 0x00	; 0
    17d0:	bc 01       	movw	r22, r24
    17d2:	8c eb       	ldi	r24, 0xBC	; 188
    17d4:	91 e0       	ldi	r25, 0x01	; 1
    17d6:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <memcmp>
    17da:	89 2b       	or	r24, r25
    17dc:	09 f4       	brne	.+2      	; 0x17e0 <SIMCOM_StateMachine+0x42c>
    17de:	76 c0       	rjmp	.+236    	; 0x18cc <SIMCOM_StateMachine+0x518>
						{
											
							//do next job
							RetryInNextCycle = FALSE;
							SIMCOM_State = SIMCOM_PDP_context;
    17e0:	84 e0       	ldi	r24, 0x04	; 4
    17e2:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <SIMCOM_State>
					{
						if (memcmp("LTE,Online",RxString,10))
						{
											
							//do next job
							RetryInNextCycle = FALSE;
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	7a c0       	rjmp	.+244    	; 0x18de <SIMCOM_StateMachine+0x52a>
						//TODO: Later
						RetryInNextCycle = TRUE;
					}

				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    17ea:	83 50       	subi	r24, 0x03	; 3
    17ec:	82 30       	cpi	r24, 0x02	; 2
    17ee:	08 f4       	brcc	.+2      	; 0x17f2 <SIMCOM_StateMachine+0x43e>
    17f0:	6f c0       	rjmp	.+222    	; 0x18d0 <SIMCOM_StateMachine+0x51c>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	74 c0       	rjmp	.+232    	; 0x18de <SIMCOM_StateMachine+0x52a>
		break;
		
		case SIMCOM_PDP_context:
		{
			// First Ensure the SIMCOM Module is Connected
			if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    17f6:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_Job_Result>
    17fa:	81 11       	cpse	r24, r1
    17fc:	11 c0       	rjmp	.+34     	; 0x1820 <SIMCOM_StateMachine+0x46c>
			{
				// Send AT Command and wait for response
				if(SIMCOM_Schedule_Job("AT+CGATT?", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_StateMachine_Callback) == TRUE)
    17fe:	24 e7       	ldi	r18, 0x74	; 116
    1800:	39 e0       	ldi	r19, 0x09	; 9
    1802:	40 ed       	ldi	r20, 0xD0	; 208
    1804:	57 e0       	ldi	r21, 0x07	; 7
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	70 e0       	ldi	r23, 0x00	; 0
    180a:	87 ec       	ldi	r24, 0xC7	; 199
    180c:	91 e0       	ldi	r25, 0x01	; 1
    180e:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1812:	81 30       	cpi	r24, 0x01	; 1
    1814:	09 f0       	breq	.+2      	; 0x1818 <SIMCOM_StateMachine+0x464>
    1816:	5e c0       	rjmp	.+188    	; 0x18d4 <SIMCOM_StateMachine+0x520>
				{
					// Set it to Scheduled only when the SIMCOM Module Accepted it
					SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1818:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <SIMCOM_Job_Result>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    181c:	80 e0       	ldi	r24, 0x00	; 0
    181e:	5f c0       	rjmp	.+190    	; 0x18de <SIMCOM_StateMachine+0x52a>
				}
			}
			else
			{
				// Cyclic part for the response
				if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1820:	85 30       	cpi	r24, 0x05	; 5
    1822:	81 f4       	brne	.+32     	; 0x1844 <SIMCOM_StateMachine+0x490>
					// Job has been completed

					// Positive Response would be -> +CLTS: <mode>
					// <mode> : 0 Disable   1 Enable

					ULONG PDP_Context = SIMCOM_GetCSV_Number_fromBuffer("+CGATT: ", 1);
    1824:	61 e0       	ldi	r22, 0x01	; 1
    1826:	81 ed       	ldi	r24, 0xD1	; 209
    1828:	91 e0       	ldi	r25, 0x01	; 1
    182a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <SIMCOM_GetCSV_Number_fromBuffer>

					/* Accept both Roaming and Local Registration */
					if(PDP_Context == 1)
    182e:	61 30       	cpi	r22, 0x01	; 1
    1830:	71 05       	cpc	r23, r1
    1832:	81 05       	cpc	r24, r1
    1834:	91 05       	cpc	r25, r1
    1836:	09 f0       	breq	.+2      	; 0x183a <SIMCOM_StateMachine+0x486>
    1838:	4f c0       	rjmp	.+158    	; 0x18d8 <SIMCOM_StateMachine+0x524>
					{
						
						SIMCOM_State = SIMCOM_SM_Ready; // Move to next state		
    183a:	8c e0       	ldi	r24, 0x0C	; 12
    183c:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <SIMCOM_State>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	4d c0       	rjmp	.+154    	; 0x18de <SIMCOM_StateMachine+0x52a>
						}

						RetryInNextCycle = TRUE;
					}
				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1844:	83 50       	subi	r24, 0x03	; 3
    1846:	82 30       	cpi	r24, 0x02	; 2
    1848:	08 f4       	brcc	.+2      	; 0x184c <SIMCOM_StateMachine+0x498>
    184a:	48 c0       	rjmp	.+144    	; 0x18dc <SIMCOM_StateMachine+0x528>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	47 c0       	rjmp	.+142    	; 0x18de <SIMCOM_StateMachine+0x52a>
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	45 c0       	rjmp	.+138    	; 0x18de <SIMCOM_StateMachine+0x52a>
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	43 c0       	rjmp	.+134    	; 0x18de <SIMCOM_StateMachine+0x52a>
					}
					else
					{
						// If the returned value is ERROR or something else, then act accordingly
						// TODO: Later
						RetryInNextCycle = TRUE;
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	41 c0       	rjmp	.+130    	; 0x18de <SIMCOM_StateMachine+0x52a>
					}
				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
				{
					// If there is a problem in reception, retry sending the command
					RetryInNextCycle = TRUE;
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	3f c0       	rjmp	.+126    	; 0x18de <SIMCOM_StateMachine+0x52a>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	3d c0       	rjmp	.+122    	; 0x18de <SIMCOM_StateMachine+0x52a>
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	3b c0       	rjmp	.+118    	; 0x18de <SIMCOM_StateMachine+0x52a>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	39 c0       	rjmp	.+114    	; 0x18de <SIMCOM_StateMachine+0x52a>
					}			
				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
				{
					// If there is a problem in reception, retry sending the command
					RetryInNextCycle = TRUE;
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	37 c0       	rjmp	.+110    	; 0x18de <SIMCOM_StateMachine+0x52a>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	35 c0       	rjmp	.+106    	; 0x18de <SIMCOM_StateMachine+0x52a>
						{
							// Network Not Registered.
							// TODO: Throw Error including the Status returned by the SIM800 module
						}

						RetryInNextCycle = TRUE;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	33 c0       	rjmp	.+102    	; 0x18de <SIMCOM_StateMachine+0x52a>

				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
				{
					// If there is a problem in reception, retry sending the command
					RetryInNextCycle = TRUE;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	31 c0       	rjmp	.+98     	; 0x18de <SIMCOM_StateMachine+0x52a>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	2f c0       	rjmp	.+94     	; 0x18de <SIMCOM_StateMachine+0x52a>
						{
							// Network Not Registered.
							// TODO: Throw Error including the Status returned by the SIM800 module
						}

						RetryInNextCycle = TRUE;
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	2d c0       	rjmp	.+90     	; 0x18de <SIMCOM_StateMachine+0x52a>

				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
				{
					// If there is a problem in reception, retry sending the command
					RetryInNextCycle = TRUE;
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	2b c0       	rjmp	.+86     	; 0x18de <SIMCOM_StateMachine+0x52a>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	29 c0       	rjmp	.+82     	; 0x18de <SIMCOM_StateMachine+0x52a>
						{
							// Network Not Registered.
							// TODO: Throw Error including the Status returned by the SIM800 module
						}

						RetryInNextCycle = TRUE;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	27 c0       	rjmp	.+78     	; 0x18de <SIMCOM_StateMachine+0x52a>

				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
				{
					// If there is a problem in reception, retry sending the command
					RetryInNextCycle = TRUE;
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	25 c0       	rjmp	.+74     	; 0x18de <SIMCOM_StateMachine+0x52a>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	23 c0       	rjmp	.+70     	; 0x18de <SIMCOM_StateMachine+0x52a>
							{
								// Network Not Registered.
								// TODO: Throw Error including the Status returned by the SIM800 module
							}

							RetryInNextCycle = TRUE;
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	21 c0       	rjmp	.+66     	; 0x18de <SIMCOM_StateMachine+0x52a>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	1f c0       	rjmp	.+62     	; 0x18de <SIMCOM_StateMachine+0x52a>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	1d c0       	rjmp	.+58     	; 0x18de <SIMCOM_StateMachine+0x52a>
						{
							// Network Not Registered.
							// TODO: Throw Error including the Status returned by the SIM800 module
						}

						RetryInNextCycle = TRUE;
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	1b c0       	rjmp	.+54     	; 0x18de <SIMCOM_StateMachine+0x52a>

				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
				{
					// If there is a problem in reception, retry sending the command
					RetryInNextCycle = TRUE;
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	19 c0       	rjmp	.+50     	; 0x18de <SIMCOM_StateMachine+0x52a>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	17 c0       	rjmp	.+46     	; 0x18de <SIMCOM_StateMachine+0x52a>
					}
					else
					{
						// If the returned value is ERROR or something else, then act accordingly
						// TODO: Later
						RetryInNextCycle = TRUE;
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	15 c0       	rjmp	.+42     	; 0x18de <SIMCOM_StateMachine+0x52a>
					}
				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
				{
					// If there is a problem in reception, retry sending the command
					RetryInNextCycle = TRUE;
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	13 c0       	rjmp	.+38     	; 0x18de <SIMCOM_StateMachine+0x52a>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	11 c0       	rjmp	.+34     	; 0x18de <SIMCOM_StateMachine+0x52a>
					}
					else
					{
						// If the returned value is ERROR or something else, then act accordingly
						// TODO: Later
						RetryInNextCycle = TRUE;
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	0f c0       	rjmp	.+30     	; 0x18de <SIMCOM_StateMachine+0x52a>
					}
				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
				{
					// If there is a problem in reception, retry sending the command
					RetryInNextCycle = TRUE;
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	0d c0       	rjmp	.+26     	; 0x18de <SIMCOM_StateMachine+0x52a>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	0b c0       	rjmp	.+22     	; 0x18de <SIMCOM_StateMachine+0x52a>
					}
					else
					{
						// If the returned value is ERROR or something else, then act accordingly
						//TODO: Later
						RetryInNextCycle = TRUE;
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	09 c0       	rjmp	.+18     	; 0x18de <SIMCOM_StateMachine+0x52a>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							//TODO: Later
							RetryInNextCycle = TRUE;
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	07 c0       	rjmp	.+14     	; 0x18de <SIMCOM_StateMachine+0x52a>

				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
				{
					// If there is a problem in reception, retry sending the command
					RetryInNextCycle = TRUE;
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	05 c0       	rjmp	.+10     	; 0x18de <SIMCOM_StateMachine+0x52a>

void SIMCOM_StateMachine(void)
{
	SIMCOM_State_EN SIMCOM_State_Before_Execution = SIMCOM_State;
	
	BOOL RetryInNextCycle = FALSE;
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	03 c0       	rjmp	.+6      	; 0x18de <SIMCOM_StateMachine+0x52a>
						{
							// Network Not Registered.
							// TODO: Throw Error including the Status returned by the SIM800 module
						}

						RetryInNextCycle = TRUE;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	01 c0       	rjmp	.+2      	; 0x18de <SIMCOM_StateMachine+0x52a>
					}
				}
				else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
				{
					// If there is a problem in reception, retry sending the command
					RetryInNextCycle = TRUE;
    18dc:	81 e0       	ldi	r24, 0x01	; 1
			// Do Nothing, The state machine has been completed
		}
		break;
	}

	if(RetryInNextCycle == TRUE)
    18de:	81 30       	cpi	r24, 0x01	; 1
    18e0:	69 f4       	brne	.+26     	; 0x18fc <SIMCOM_StateMachine+0x548>
	{
		// If Retry is allowed
		if(SIMCOM_SM_Retry_Count != 0)
    18e2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <SIMCOM_SM_Retry_Count>
    18e6:	88 23       	and	r24, r24
    18e8:	31 f0       	breq	.+12     	; 0x18f6 <SIMCOM_StateMachine+0x542>
		{
			SIMCOM_SM_Retry_Count--; // Decrement the Retry Count
    18ea:	81 50       	subi	r24, 0x01	; 1
    18ec:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <SIMCOM_SM_Retry_Count>

			SIMCOM_Job_Result = SIMCOM_Job_Idle; // Setting the Job to Idle will retry the Job again in next cycle.
    18f0:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <SIMCOM_Job_Result>
    18f4:	03 c0       	rjmp	.+6      	; 0x18fc <SIMCOM_StateMachine+0x548>
		}
		else
		{
			// RETRY Mechanism expired, abort the Job and do not move the state
			SIMCOM_Job_Result = SIMCOM_Job_Aborted;
    18f6:	86 e0       	ldi	r24, 0x06	; 6
    18f8:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <SIMCOM_Job_Result>
		}
	}

	if(SIMCOM_Job_Result == SIMCOM_Job_Aborted)
    18fc:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <SIMCOM_Job_Result>
    1900:	86 30       	cpi	r24, 0x06	; 6
    1902:	29 f4       	brne	.+10     	; 0x190e <SIMCOM_StateMachine+0x55a>
	{
		// If in any of the state, the Job is aborted, then move to the Error State
		
		SIMCOM_State = SIMCOM_SM_Error;
    1904:	8d e0       	ldi	r24, 0x0D	; 13
    1906:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <SIMCOM_State>
				case SIMCOM_SM_NW_Registration_Check     : ErrorState = SIMCOM_Error_NetworkNotRegistered; break;
				default:
					// Do Nothing, SIMCOM Module will timeout and report error
					break;
			}
			SIMCOM_ERROR_CALLBACK();
    190a:	0e 94 c0 0c 	call	0x1980	; 0x1980 <COSMIC_SIMCOM_Error_Callback>
		}
	}

	/* Check if the state changed after execution */
	if(SIMCOM_State_Before_Execution != SIMCOM_State)
    190e:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <SIMCOM_State>
    1912:	c8 17       	cp	r28, r24
    1914:	29 f0       	breq	.+10     	; 0x1920 <SIMCOM_StateMachine+0x56c>
	{
		// If changed, the Set the New Job Result as Idle for the next state to proceed further
		SIMCOM_Job_Result = SIMCOM_Job_Idle; // Reset the Job state so that next command will be sent
    1916:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <SIMCOM_Job_Result>

		SIMCOM_SM_Retry_Count = P_SIMCOM_DEFAULT_FAILURE_RETRY_COUNT; // Reset the Retry Count
    191a:	8a e0       	ldi	r24, 0x0A	; 10
    191c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <SIMCOM_SM_Retry_Count>
	}
}
    1920:	cf 91       	pop	r28
    1922:	08 95       	ret

00001924 <PRC_SYS_INIT>:
 ***********************************/

/* Initialization function */
void PRC_SYS_INIT(void)
{	
	FUN_SYS_Internal_Init();
    1924:	0e 94 c6 13 	call	0x278c	; 0x278c <FUN_SYS_Internal_Init>
    1928:	08 95       	ret

0000192a <FUN_SYS_Evaluate_Tasks_x1>:
#if (S_SYS_OS_DUAL_CORE_ENABLED != TRUE)
void FUN_SYS_Evaluate_Tasks_x1(void)
{
#if (S_SYS_OS_METHOD == S_SYS_OS_POLLING_METHOD)
	/* Update the tasks scheduling ONLY when the previous tasks were done. */
	if(SysOS_Ctrl.ExecPending == FALSE)
    192a:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <SysOS_Ctrl>
    192e:	80 fd       	sbrc	r24, 0
    1930:	07 c0       	rjmp	.+14     	; 0x1940 <FUN_SYS_Evaluate_Tasks_x1+0x16>
	{
#endif

		FUN_SYS_Internal_Evaluate_Tasks_x1();
    1932:	0e 94 ce 13 	call	0x279c	; 0x279c <FUN_SYS_Internal_Evaluate_Tasks_x1>

#if (S_SYS_OS_METHOD == S_SYS_OS_POLLING_METHOD)
		/* Set the Execution Pending flag */
		SysOS_Ctrl.ExecPending = TRUE;
    1936:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <SysOS_Ctrl>
    193a:	81 60       	ori	r24, 0x01	; 1
    193c:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <SysOS_Ctrl>
    1940:	08 95       	ret

00001942 <FUN_SYS_Execute_Tasks>:
 ***********************************/
#if (S_SYS_OS_DUAL_CORE_ENABLED != TRUE)
void FUN_SYS_Execute_Tasks(void)
{
#if (S_SYS_OS_METHOD == S_SYS_OS_POLLING_METHOD)
	if(SysOS_Ctrl.ExecPending == TRUE)
    1942:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <SysOS_Ctrl>
    1946:	80 ff       	sbrs	r24, 0
    1948:	07 c0       	rjmp	.+14     	; 0x1958 <FUN_SYS_Execute_Tasks+0x16>
	{
#endif

		FUN_SYS_Internal_Execute_Tasks();
    194a:	0e 94 cf 13 	call	0x279e	; 0x279e <FUN_SYS_Internal_Execute_Tasks>

#if (S_SYS_OS_METHOD == S_SYS_OS_POLLING_METHOD)
		SysOS_Ctrl.ExecPending = FALSE; /* To avoid re-entrancy */
    194e:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <SysOS_Ctrl>
    1952:	8e 7f       	andi	r24, 0xFE	; 254
    1954:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <SysOS_Ctrl>
    1958:	08 95       	ret

0000195a <FUN_SYS_Timer_x1>:
#if (S_SYS_OS_DUAL_CORE_ENABLED != TRUE)
void FUN_SYS_Timer_x1(void)
{
	
	/* Evaluate the tasks */
	FUN_SYS_Evaluate_Tasks_x1();
    195a:	0e 94 95 0c 	call	0x192a	; 0x192a <FUN_SYS_Evaluate_Tasks_x1>
    195e:	08 95       	ret

00001960 <SysOs_Main>:
#if (S_SYS_OS_MAIN_FUNCTION_TYPE == S_SYS_OS_DEFAULT_MAIN_FUNCTION_TYPE)
void SysOs_Main(void)
{

	/* Initialization function should be called first */
	PRC_SYS_INIT();
    1960:	0e 94 92 0c 	call	0x1924	; 0x1924 <PRC_SYS_INIT>
	while(!g_Fatal_Error_B)
    1964:	02 c0       	rjmp	.+4      	; 0x196a <SysOs_Main+0xa>
	{
#if (S_SYS_OS_METHOD == S_SYS_OS_POLLING_METHOD)
		/* If it is a polling method, Execute the task cyclically.
		 * And wait for the Interrupt function to set the flag.
		 */
		FUN_SYS_Execute_Tasks();
    1966:	0e 94 a1 0c 	call	0x1942	; 0x1942 <FUN_SYS_Execute_Tasks>
void SysOs_Main(void)
{

	/* Initialization function should be called first */
	PRC_SYS_INIT();
	while(!g_Fatal_Error_B)
    196a:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <g_Fatal_Error_B>
    196e:	88 23       	and	r24, r24
    1970:	d1 f3       	breq	.-12     	; 0x1966 <SysOs_Main+0x6>
		 */
		FUN_SYS_Execute_Tasks();
#endif
	}
		
}
    1972:	08 95       	ret

00001974 <Avr_Init>:
#include <avr/io.h>
#include "stdio.h"

void Avr_Init()
{
	DDRA  = 0XFF;
    1974:	8f ef       	ldi	r24, 0xFF	; 255
    1976:	8a bb       	out	0x1a, r24	; 26
	DDRB  = 0xFF;
    1978:	87 bb       	out	0x17, r24	; 23
	PORTA = 0X00;
    197a:	1b ba       	out	0x1b, r1	; 27
	PORTB = 0xFF;
    197c:	88 bb       	out	0x18, r24	; 24
    197e:	08 95       	ret

00001980 <COSMIC_SIMCOM_Error_Callback>:
}
void COSMIC_SIMCOM_Error_Callback()
{
	SIMCOM_State = SIMCOM_SM_Init;
    1980:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <SIMCOM_State>
	C_MQTT_SSL_Config_State = C_MQTT_SSL_Init;
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <C_MQTT_SSL_Config_State>
	MQTT_State = MQTTSTART;
    198a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <MQTT_State>
	Publish_State = MQTT_Publish_Idle;
    198e:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <Publish_State>
    1992:	08 95       	ret

00001994 <MQTT_CALLBACK>:
static void MQTT_CALLBACK(SIMCOM_Job_Result_EN result)
{
	// This function will be called by the SIMCOM handler upon successful reception of the response

	// This will be read in the Main function, so simply set the value
	SIMCOM_Job_Result = result;
    1994:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <SIMCOM_Job_Result>
    1998:	08 95       	ret

0000199a <MQTT_StateMachine>:
/*****************************************/
/* Function Definitions                  */
/*****************************************/

void MQTT_StateMachine(void)
{
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
	MQTT_State_EN MQTT_State_Before_Execution = MQTT_State;
    199e:	c0 91 6b 00 	lds	r28, 0x006B	; 0x80006b <MQTT_State>

	if(MQTTReconnectCount == 0)
    19a2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <MQTTReconnectCount>
    19a6:	81 11       	cpse	r24, r1
    19a8:	07 c0       	rjmp	.+14     	; 0x19b8 <MQTT_StateMachine+0x1e>
	{
		MQTT_State = MQTTCONNECTIONCHECK;
    19aa:	86 e0       	ldi	r24, 0x06	; 6
    19ac:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <MQTT_State>
		MQTTReconnectCount = 600;
    19b0:	88 e5       	ldi	r24, 0x58	; 88
    19b2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <MQTTReconnectCount>
    19b6:	03 c0       	rjmp	.+6      	; 0x19be <MQTT_StateMachine+0x24>
	}
	else
	{
		MQTTReconnectCount--;
    19b8:	81 50       	subi	r24, 0x01	; 1
    19ba:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <MQTTReconnectCount>
	}

	BOOL RetryInNextCycle = FALSE;

	if(IsMQTT_SSL_Configuration_Completed())
    19be:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <C_MQTT_SSL_Config_State>
    19c2:	86 30       	cpi	r24, 0x06	; 6
    19c4:	09 f0       	breq	.+2      	; 0x19c8 <MQTT_StateMachine+0x2e>
    19c6:	bb c2       	rjmp	.+1398   	; 0x1f3e <MQTT_StateMachine+0x5a4>
	{
		switch(MQTT_State)
    19c8:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <MQTT_State>
    19cc:	8e 2f       	mov	r24, r30
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	fc 01       	movw	r30, r24
    19d2:	31 97       	sbiw	r30, 0x01	; 1
    19d4:	ec 30       	cpi	r30, 0x0C	; 12
    19d6:	f1 05       	cpc	r31, r1
    19d8:	08 f0       	brcs	.+2      	; 0x19dc <MQTT_StateMachine+0x42>
    19da:	56 c2       	rjmp	.+1196   	; 0x1e88 <MQTT_StateMachine+0x4ee>
    19dc:	ea 5c       	subi	r30, 0xCA	; 202
    19de:	ff 4f       	sbci	r31, 0xFF	; 255
    19e0:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__tablejump2__>
		{
			case MQTTSTART:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    19e4:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <SIMCOM_Job_Result>
    19e8:	81 11       	cpse	r24, r1
    19ea:	11 c0       	rjmp	.+34     	; 0x1a0e <MQTT_StateMachine+0x74>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CMQTTSTART", SIMCOM_DEFAULT_TIMEOUT, MQTT_CALLBACK) == TRUE)
    19ec:	2a ec       	ldi	r18, 0xCA	; 202
    19ee:	3c e0       	ldi	r19, 0x0C	; 12
    19f0:	40 ed       	ldi	r20, 0xD0	; 208
    19f2:	57 e0       	ldi	r21, 0x07	; 7
    19f4:	60 e0       	ldi	r22, 0x00	; 0
    19f6:	70 e0       	ldi	r23, 0x00	; 0
    19f8:	8a ed       	ldi	r24, 0xDA	; 218
    19fa:	91 e0       	ldi	r25, 0x01	; 1
    19fc:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1a00:	81 30       	cpi	r24, 0x01	; 1
    1a02:	09 f0       	breq	.+2      	; 0x1a06 <MQTT_StateMachine+0x6c>
    1a04:	43 c2       	rjmp	.+1158   	; 0x1e8c <MQTT_StateMachine+0x4f2>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1a06:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <SIMCOM_Job_Result>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	7a c2       	rjmp	.+1268   	; 0x1f02 <MQTT_StateMachine+0x568>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1a0e:	85 30       	cpi	r24, 0x05	; 5
    1a10:	39 f5       	brne	.+78     	; 0x1a60 <MQTT_StateMachine+0xc6>
					{
						// Job has been completed
						// Positive Response would be -> +CLTS: <mode>
						// <mode> : 0 Disable   1 Enable
						
						ULONG MQTTStatus = SIMCOM_GetCSV_Number_fromBuffer("+CMQTTSTART: ", 1);
    1a12:	61 e0       	ldi	r22, 0x01	; 1
    1a14:	88 ee       	ldi	r24, 0xE8	; 232
    1a16:	91 e0       	ldi	r25, 0x01	; 1
    1a18:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <SIMCOM_GetCSV_Number_fromBuffer>
						
						if(MQTTStatus == 0)
    1a1c:	67 2b       	or	r22, r23
    1a1e:	68 2b       	or	r22, r24
    1a20:	69 2b       	or	r22, r25
    1a22:	29 f4       	brne	.+10     	; 0x1a2e <MQTT_StateMachine+0x94>
						{
							MQTT_State = MQTT_Accquire;
    1a24:	82 e0       	ldi	r24, 0x02	; 2
    1a26:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <MQTT_State>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	6a c2       	rjmp	.+1236   	; 0x1f02 <MQTT_StateMachine+0x568>

static inline BOOL SIMCOM_IsResponseError()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 5)
    1a2e:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <SIMCOM_ResponseLength>
    1a32:	85 30       	cpi	r24, 0x05	; 5
    1a34:	51 f4       	brne	.+20     	; 0x1a4a <MQTT_StateMachine+0xb0>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "ERROR") == 0)
    1a36:	66 ef       	ldi	r22, 0xF6	; 246
    1a38:	71 e0       	ldi	r23, 0x01	; 1
    1a3a:	8c e2       	ldi	r24, 0x2C	; 44
    1a3c:	95 e0       	ldi	r25, 0x05	; 5
    1a3e:	0e 94 11 14 	call	0x2822	; 0x2822 <strcmp>
    1a42:	89 2b       	or	r24, r25
    1a44:	21 f0       	breq	.+8      	; 0x1a4e <MQTT_StateMachine+0xb4>
	return retval;
}

static inline BOOL SIMCOM_IsResponseError()
{
	BOOL retval = FALSE;
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	03 c0       	rjmp	.+6      	; 0x1a50 <MQTT_StateMachine+0xb6>
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	01 c0       	rjmp	.+2      	; 0x1a50 <MQTT_StateMachine+0xb6>

	if(SIMCOM_GetResponseLength() == 5)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "ERROR") == 0)
		{
			retval = TRUE;
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
						if(MQTTStatus == 0)
						{
							MQTT_State = MQTT_Accquire;
							
						}
						else if(SIMCOM_IsResponseError())
    1a50:	88 23       	and	r24, r24
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <MQTT_StateMachine+0xbc>
    1a54:	1d c2       	rjmp	.+1082   	; 0x1e90 <MQTT_StateMachine+0x4f6>
						{
							MQTT_State = MQTT_Accquire;
    1a56:	82 e0       	ldi	r24, 0x02	; 2
    1a58:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <MQTT_State>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	51 c2       	rjmp	.+1186   	; 0x1f02 <MQTT_StateMachine+0x568>
						else if(SIMCOM_IsResponseError())
						{
							MQTT_State = MQTT_Accquire;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1a60:	83 50       	subi	r24, 0x03	; 3
    1a62:	82 30       	cpi	r24, 0x02	; 2
    1a64:	08 f4       	brcc	.+2      	; 0x1a68 <MQTT_StateMachine+0xce>
    1a66:	16 c2       	rjmp	.+1068   	; 0x1e94 <MQTT_StateMachine+0x4fa>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	4b c2       	rjmp	.+1174   	; 0x1f02 <MQTT_StateMachine+0x568>


			case MQTT_Accquire:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1a6c:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <SIMCOM_Job_Result>
    1a70:	81 11       	cpse	r24, r1
    1a72:	11 c0       	rjmp	.+34     	; 0x1a96 <MQTT_StateMachine+0xfc>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CMQTTACCQ=0,\"COSMIC_Device01\",1", SIMCOM_DEFAULT_TIMEOUT, MQTT_CALLBACK) == TRUE)
    1a74:	2a ec       	ldi	r18, 0xCA	; 202
    1a76:	3c e0       	ldi	r19, 0x0C	; 12
    1a78:	40 ed       	ldi	r20, 0xD0	; 208
    1a7a:	57 e0       	ldi	r21, 0x07	; 7
    1a7c:	60 e0       	ldi	r22, 0x00	; 0
    1a7e:	70 e0       	ldi	r23, 0x00	; 0
    1a80:	8c ef       	ldi	r24, 0xFC	; 252
    1a82:	91 e0       	ldi	r25, 0x01	; 1
    1a84:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1a88:	81 30       	cpi	r24, 0x01	; 1
    1a8a:	09 f0       	breq	.+2      	; 0x1a8e <MQTT_StateMachine+0xf4>
    1a8c:	05 c2       	rjmp	.+1034   	; 0x1e98 <MQTT_StateMachine+0x4fe>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1a8e:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <SIMCOM_Job_Result>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	36 c2       	rjmp	.+1132   	; 0x1f02 <MQTT_StateMachine+0x568>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1a96:	85 30       	cpi	r24, 0x05	; 5
    1a98:	79 f5       	brne	.+94     	; 0x1af8 <MQTT_StateMachine+0x15e>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    1a9a:	d0 91 0b 04 	lds	r29, 0x040B	; 0x80040b <SIMCOM_ResponseLength>
    1a9e:	d2 30       	cpi	r29, 0x02	; 2
    1aa0:	51 f4       	brne	.+20     	; 0x1ab6 <MQTT_StateMachine+0x11c>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    1aa2:	6e e3       	ldi	r22, 0x3E	; 62
    1aa4:	71 e0       	ldi	r23, 0x01	; 1
    1aa6:	8c e2       	ldi	r24, 0x2C	; 44
    1aa8:	95 e0       	ldi	r25, 0x05	; 5
    1aaa:	0e 94 11 14 	call	0x2822	; 0x2822 <strcmp>
    1aae:	89 2b       	or	r24, r25
    1ab0:	21 f0       	breq	.+8      	; 0x1aba <MQTT_StateMachine+0x120>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	03 c0       	rjmp	.+6      	; 0x1abc <MQTT_StateMachine+0x122>
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	01 c0       	rjmp	.+2      	; 0x1abc <MQTT_StateMachine+0x122>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    1aba:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    1abc:	88 23       	and	r24, r24
    1abe:	29 f0       	breq	.+10     	; 0x1aca <MQTT_StateMachine+0x130>
						{
							MQTT_State = MQTT_SSL_Configure;
    1ac0:	84 e0       	ldi	r24, 0x04	; 4
    1ac2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <MQTT_State>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	1c c2       	rjmp	.+1080   	; 0x1f02 <MQTT_StateMachine+0x568>

static inline BOOL SIMCOM_IsResponseError()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 5)
    1aca:	d5 30       	cpi	r29, 0x05	; 5
    1acc:	51 f4       	brne	.+20     	; 0x1ae2 <MQTT_StateMachine+0x148>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "ERROR") == 0)
    1ace:	66 ef       	ldi	r22, 0xF6	; 246
    1ad0:	71 e0       	ldi	r23, 0x01	; 1
    1ad2:	8c e2       	ldi	r24, 0x2C	; 44
    1ad4:	95 e0       	ldi	r25, 0x05	; 5
    1ad6:	0e 94 11 14 	call	0x2822	; 0x2822 <strcmp>
    1ada:	89 2b       	or	r24, r25
    1adc:	21 f0       	breq	.+8      	; 0x1ae6 <MQTT_StateMachine+0x14c>
	return retval;
}

static inline BOOL SIMCOM_IsResponseError()
{
	BOOL retval = FALSE;
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	03 c0       	rjmp	.+6      	; 0x1ae8 <MQTT_StateMachine+0x14e>
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	01 c0       	rjmp	.+2      	; 0x1ae8 <MQTT_StateMachine+0x14e>

	if(SIMCOM_GetResponseLength() == 5)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "ERROR") == 0)
		{
			retval = TRUE;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
						{
							MQTT_State = MQTT_SSL_Configure;

							// Move to next state
						}
						else if(SIMCOM_IsResponseError())
    1ae8:	88 23       	and	r24, r24
    1aea:	09 f4       	brne	.+2      	; 0x1aee <MQTT_StateMachine+0x154>
    1aec:	d7 c1       	rjmp	.+942    	; 0x1e9c <MQTT_StateMachine+0x502>
						{
							MQTT_State = MQTT_ClientRelease;
    1aee:	83 e0       	ldi	r24, 0x03	; 3
    1af0:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <MQTT_State>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	05 c2       	rjmp	.+1034   	; 0x1f02 <MQTT_StateMachine+0x568>
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
						
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1af8:	83 50       	subi	r24, 0x03	; 3
    1afa:	82 30       	cpi	r24, 0x02	; 2
    1afc:	08 f4       	brcc	.+2      	; 0x1b00 <MQTT_StateMachine+0x166>
    1afe:	d0 c1       	rjmp	.+928    	; 0x1ea0 <MQTT_StateMachine+0x506>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	ff c1       	rjmp	.+1022   	; 0x1f02 <MQTT_StateMachine+0x568>
			break;

			case MQTT_ClientRelease:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1b04:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <SIMCOM_Job_Result>
    1b08:	81 11       	cpse	r24, r1
    1b0a:	11 c0       	rjmp	.+34     	; 0x1b2e <MQTT_StateMachine+0x194>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CMQTTREL=0", SIMCOM_DEFAULT_TIMEOUT, MQTT_CALLBACK) == TRUE)
    1b0c:	2a ec       	ldi	r18, 0xCA	; 202
    1b0e:	3c e0       	ldi	r19, 0x0C	; 12
    1b10:	40 ed       	ldi	r20, 0xD0	; 208
    1b12:	57 e0       	ldi	r21, 0x07	; 7
    1b14:	60 e0       	ldi	r22, 0x00	; 0
    1b16:	70 e0       	ldi	r23, 0x00	; 0
    1b18:	8f e1       	ldi	r24, 0x1F	; 31
    1b1a:	92 e0       	ldi	r25, 0x02	; 2
    1b1c:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1b20:	81 30       	cpi	r24, 0x01	; 1
    1b22:	09 f0       	breq	.+2      	; 0x1b26 <MQTT_StateMachine+0x18c>
    1b24:	bf c1       	rjmp	.+894    	; 0x1ea4 <MQTT_StateMachine+0x50a>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1b26:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <SIMCOM_Job_Result>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	ea c1       	rjmp	.+980    	; 0x1f02 <MQTT_StateMachine+0x568>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1b2e:	85 30       	cpi	r24, 0x05	; 5
    1b30:	79 f5       	brne	.+94     	; 0x1b90 <MQTT_StateMachine+0x1f6>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    1b32:	d0 91 0b 04 	lds	r29, 0x040B	; 0x80040b <SIMCOM_ResponseLength>
    1b36:	d2 30       	cpi	r29, 0x02	; 2
    1b38:	51 f4       	brne	.+20     	; 0x1b4e <MQTT_StateMachine+0x1b4>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    1b3a:	6e e3       	ldi	r22, 0x3E	; 62
    1b3c:	71 e0       	ldi	r23, 0x01	; 1
    1b3e:	8c e2       	ldi	r24, 0x2C	; 44
    1b40:	95 e0       	ldi	r25, 0x05	; 5
    1b42:	0e 94 11 14 	call	0x2822	; 0x2822 <strcmp>
    1b46:	89 2b       	or	r24, r25
    1b48:	21 f0       	breq	.+8      	; 0x1b52 <MQTT_StateMachine+0x1b8>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	03 c0       	rjmp	.+6      	; 0x1b54 <MQTT_StateMachine+0x1ba>
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	01 c0       	rjmp	.+2      	; 0x1b54 <MQTT_StateMachine+0x1ba>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    1b52:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    1b54:	88 23       	and	r24, r24
    1b56:	29 f0       	breq	.+10     	; 0x1b62 <MQTT_StateMachine+0x1c8>
						{
							MQTT_State = MQTT_Accquire;
    1b58:	82 e0       	ldi	r24, 0x02	; 2
    1b5a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <MQTT_State>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	d0 c1       	rjmp	.+928    	; 0x1f02 <MQTT_StateMachine+0x568>

static inline BOOL SIMCOM_IsResponseError()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 5)
    1b62:	d5 30       	cpi	r29, 0x05	; 5
    1b64:	51 f4       	brne	.+20     	; 0x1b7a <MQTT_StateMachine+0x1e0>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "ERROR") == 0)
    1b66:	66 ef       	ldi	r22, 0xF6	; 246
    1b68:	71 e0       	ldi	r23, 0x01	; 1
    1b6a:	8c e2       	ldi	r24, 0x2C	; 44
    1b6c:	95 e0       	ldi	r25, 0x05	; 5
    1b6e:	0e 94 11 14 	call	0x2822	; 0x2822 <strcmp>
    1b72:	89 2b       	or	r24, r25
    1b74:	21 f0       	breq	.+8      	; 0x1b7e <MQTT_StateMachine+0x1e4>
	return retval;
}

static inline BOOL SIMCOM_IsResponseError()
{
	BOOL retval = FALSE;
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	03 c0       	rjmp	.+6      	; 0x1b80 <MQTT_StateMachine+0x1e6>
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	01 c0       	rjmp	.+2      	; 0x1b80 <MQTT_StateMachine+0x1e6>

	if(SIMCOM_GetResponseLength() == 5)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "ERROR") == 0)
		{
			retval = TRUE;
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
						{
							MQTT_State = MQTT_Accquire;

							// Move to next state
						}
						else  if(SIMCOM_IsResponseError())
    1b80:	88 23       	and	r24, r24
    1b82:	09 f4       	brne	.+2      	; 0x1b86 <MQTT_StateMachine+0x1ec>
    1b84:	91 c1       	rjmp	.+802    	; 0x1ea8 <MQTT_StateMachine+0x50e>
						{
							MQTT_State = MQTTSTOP;
    1b86:	8c e0       	ldi	r24, 0x0C	; 12
    1b88:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <MQTT_State>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	b9 c1       	rjmp	.+882    	; 0x1f02 <MQTT_StateMachine+0x568>
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
						
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1b90:	83 50       	subi	r24, 0x03	; 3
    1b92:	82 30       	cpi	r24, 0x02	; 2
    1b94:	08 f4       	brcc	.+2      	; 0x1b98 <MQTT_StateMachine+0x1fe>
    1b96:	8a c1       	rjmp	.+788    	; 0x1eac <MQTT_StateMachine+0x512>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	b3 c1       	rjmp	.+870    	; 0x1f02 <MQTT_StateMachine+0x568>
			break;

			case MQTT_SSL_Configure:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1b9c:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <SIMCOM_Job_Result>
    1ba0:	81 11       	cpse	r24, r1
    1ba2:	11 c0       	rjmp	.+34     	; 0x1bc6 <MQTT_StateMachine+0x22c>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CMQTTSSLCFG=0,0", SIMCOM_DEFAULT_TIMEOUT, MQTT_CALLBACK) == TRUE)
    1ba4:	2a ec       	ldi	r18, 0xCA	; 202
    1ba6:	3c e0       	ldi	r19, 0x0C	; 12
    1ba8:	40 ed       	ldi	r20, 0xD0	; 208
    1baa:	57 e0       	ldi	r21, 0x07	; 7
    1bac:	60 e0       	ldi	r22, 0x00	; 0
    1bae:	70 e0       	ldi	r23, 0x00	; 0
    1bb0:	8d e2       	ldi	r24, 0x2D	; 45
    1bb2:	92 e0       	ldi	r25, 0x02	; 2
    1bb4:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1bb8:	81 30       	cpi	r24, 0x01	; 1
    1bba:	09 f0       	breq	.+2      	; 0x1bbe <MQTT_StateMachine+0x224>
    1bbc:	79 c1       	rjmp	.+754    	; 0x1eb0 <MQTT_StateMachine+0x516>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1bbe:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <SIMCOM_Job_Result>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	9e c1       	rjmp	.+828    	; 0x1f02 <MQTT_StateMachine+0x568>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1bc6:	85 30       	cpi	r24, 0x05	; 5
    1bc8:	c9 f4       	brne	.+50     	; 0x1bfc <MQTT_StateMachine+0x262>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    1bca:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <SIMCOM_ResponseLength>
    1bce:	82 30       	cpi	r24, 0x02	; 2
    1bd0:	51 f4       	brne	.+20     	; 0x1be6 <MQTT_StateMachine+0x24c>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    1bd2:	6e e3       	ldi	r22, 0x3E	; 62
    1bd4:	71 e0       	ldi	r23, 0x01	; 1
    1bd6:	8c e2       	ldi	r24, 0x2C	; 44
    1bd8:	95 e0       	ldi	r25, 0x05	; 5
    1bda:	0e 94 11 14 	call	0x2822	; 0x2822 <strcmp>
    1bde:	89 2b       	or	r24, r25
    1be0:	21 f0       	breq	.+8      	; 0x1bea <MQTT_StateMachine+0x250>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	03 c0       	rjmp	.+6      	; 0x1bec <MQTT_StateMachine+0x252>
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	01 c0       	rjmp	.+2      	; 0x1bec <MQTT_StateMachine+0x252>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    1bea:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    1bec:	88 23       	and	r24, r24
    1bee:	09 f4       	brne	.+2      	; 0x1bf2 <MQTT_StateMachine+0x258>
    1bf0:	61 c1       	rjmp	.+706    	; 0x1eb4 <MQTT_StateMachine+0x51a>
						{
							MQTT_State = MQTT_Connect; // Move to next state
    1bf2:	85 e0       	ldi	r24, 0x05	; 5
    1bf4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <MQTT_State>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	83 c1       	rjmp	.+774    	; 0x1f02 <MQTT_StateMachine+0x568>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1bfc:	83 50       	subi	r24, 0x03	; 3
    1bfe:	82 30       	cpi	r24, 0x02	; 2
    1c00:	08 f4       	brcc	.+2      	; 0x1c04 <MQTT_StateMachine+0x26a>
    1c02:	5a c1       	rjmp	.+692    	; 0x1eb8 <MQTT_StateMachine+0x51e>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	7d c1       	rjmp	.+762    	; 0x1f02 <MQTT_StateMachine+0x568>
			}
			break;
			case MQTT_Connect:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1c08:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <SIMCOM_Job_Result>
    1c0c:	81 11       	cpse	r24, r1
    1c0e:	11 c0       	rjmp	.+34     	; 0x1c32 <MQTT_StateMachine+0x298>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CMQTTCONNECT=0,\"tcp://a1nwcqrp1qjjtm-ats.iot.ap-south-1.amazonaws.com:8883\",3,1", SIMCOM_DEFAULT_TIMEOUT, MQTT_CALLBACK) == TRUE)
    1c10:	2a ec       	ldi	r18, 0xCA	; 202
    1c12:	3c e0       	ldi	r19, 0x0C	; 12
    1c14:	40 ed       	ldi	r20, 0xD0	; 208
    1c16:	57 e0       	ldi	r21, 0x07	; 7
    1c18:	60 e0       	ldi	r22, 0x00	; 0
    1c1a:	70 e0       	ldi	r23, 0x00	; 0
    1c1c:	80 e4       	ldi	r24, 0x40	; 64
    1c1e:	92 e0       	ldi	r25, 0x02	; 2
    1c20:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1c24:	81 30       	cpi	r24, 0x01	; 1
    1c26:	09 f0       	breq	.+2      	; 0x1c2a <MQTT_StateMachine+0x290>
    1c28:	49 c1       	rjmp	.+658    	; 0x1ebc <MQTT_StateMachine+0x522>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1c2a:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <SIMCOM_Job_Result>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	68 c1       	rjmp	.+720    	; 0x1f02 <MQTT_StateMachine+0x568>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1c32:	85 30       	cpi	r24, 0x05	; 5
    1c34:	c9 f4       	brne	.+50     	; 0x1c68 <MQTT_StateMachine+0x2ce>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    1c36:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <SIMCOM_ResponseLength>
    1c3a:	82 30       	cpi	r24, 0x02	; 2
    1c3c:	51 f4       	brne	.+20     	; 0x1c52 <MQTT_StateMachine+0x2b8>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    1c3e:	6e e3       	ldi	r22, 0x3E	; 62
    1c40:	71 e0       	ldi	r23, 0x01	; 1
    1c42:	8c e2       	ldi	r24, 0x2C	; 44
    1c44:	95 e0       	ldi	r25, 0x05	; 5
    1c46:	0e 94 11 14 	call	0x2822	; 0x2822 <strcmp>
    1c4a:	89 2b       	or	r24, r25
    1c4c:	21 f0       	breq	.+8      	; 0x1c56 <MQTT_StateMachine+0x2bc>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	03 c0       	rjmp	.+6      	; 0x1c58 <MQTT_StateMachine+0x2be>
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	01 c0       	rjmp	.+2      	; 0x1c58 <MQTT_StateMachine+0x2be>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    1c58:	88 23       	and	r24, r24
    1c5a:	09 f4       	brne	.+2      	; 0x1c5e <MQTT_StateMachine+0x2c4>
    1c5c:	31 c1       	rjmp	.+610    	; 0x1ec0 <MQTT_StateMachine+0x526>
						{
							MQTT_State = MQTT_WaitForConnectResponce; // Move to next state
    1c5e:	87 e0       	ldi	r24, 0x07	; 7
    1c60:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <MQTT_State>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	4d c1       	rjmp	.+666    	; 0x1f02 <MQTT_StateMachine+0x568>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1c68:	83 50       	subi	r24, 0x03	; 3
    1c6a:	82 30       	cpi	r24, 0x02	; 2
    1c6c:	08 f4       	brcc	.+2      	; 0x1c70 <MQTT_StateMachine+0x2d6>
    1c6e:	2a c1       	rjmp	.+596    	; 0x1ec4 <MQTT_StateMachine+0x52a>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	47 c1       	rjmp	.+654    	; 0x1f02 <MQTT_StateMachine+0x568>
			break;
			
			case MQTTCONNECTIONCHECK:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1c74:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <SIMCOM_Job_Result>
    1c78:	81 11       	cpse	r24, r1
    1c7a:	11 c0       	rjmp	.+34     	; 0x1c9e <MQTT_StateMachine+0x304>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CMQTTCONNECT?", SIMCOM_DEFAULT_TIMEOUT, MQTT_CALLBACK) == TRUE)
    1c7c:	2a ec       	ldi	r18, 0xCA	; 202
    1c7e:	3c e0       	ldi	r19, 0x0C	; 12
    1c80:	40 ed       	ldi	r20, 0xD0	; 208
    1c82:	57 e0       	ldi	r21, 0x07	; 7
    1c84:	60 e0       	ldi	r22, 0x00	; 0
    1c86:	70 e0       	ldi	r23, 0x00	; 0
    1c88:	83 e9       	ldi	r24, 0x93	; 147
    1c8a:	92 e0       	ldi	r25, 0x02	; 2
    1c8c:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1c90:	81 30       	cpi	r24, 0x01	; 1
    1c92:	09 f0       	breq	.+2      	; 0x1c96 <MQTT_StateMachine+0x2fc>
    1c94:	19 c1       	rjmp	.+562    	; 0x1ec8 <MQTT_StateMachine+0x52e>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1c96:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <SIMCOM_Job_Result>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	32 c1       	rjmp	.+612    	; 0x1f02 <MQTT_StateMachine+0x568>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1c9e:	85 30       	cpi	r24, 0x05	; 5
    1ca0:	b1 f4       	brne	.+44     	; 0x1cce <MQTT_StateMachine+0x334>
					{
						// Job has been completed
						// Positive Response would be -> +CLTS: <mode>
						// <mode> : 0 Disable   1 Enable
						if(IsSIMCOM_ResponseStartsWith("+CMQTTCONNECT: 0,\"tcp:"))
    1ca2:	6c e2       	ldi	r22, 0x2C	; 44
    1ca4:	75 e0       	ldi	r23, 0x05	; 5
    1ca6:	84 ea       	ldi	r24, 0xA4	; 164
    1ca8:	92 e0       	ldi	r25, 0x02	; 2
    1caa:	0e 94 74 05 	call	0xae8	; 0xae8 <StringHelper_startsWith>
    1cae:	88 23       	and	r24, r24
    1cb0:	29 f0       	breq	.+10     	; 0x1cbc <MQTT_StateMachine+0x322>
						{
							MQTT_State = MQTT_Ready;
    1cb2:	8d e0       	ldi	r24, 0x0D	; 13
    1cb4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <MQTT_State>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1cb8:	80 e0       	ldi	r24, 0x00	; 0
    1cba:	23 c1       	rjmp	.+582    	; 0x1f02 <MQTT_StateMachine+0x568>
						{
							MQTT_State = MQTT_Ready;
						}
						else
						{
							C_MQTT_SSL_Config_State = C_MQTT_SSL_Init;
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <C_MQTT_SSL_Config_State>
							MQTT_State = MQTTSTART;
    1cc2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <MQTT_State>
							Publish_State = MQTT_Publish_Idle;
    1cc6:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <Publish_State>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	1a c1       	rjmp	.+564    	; 0x1f02 <MQTT_StateMachine+0x568>
							MQTT_State = MQTTSTART;
							Publish_State = MQTT_Publish_Idle;
							
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1cce:	83 50       	subi	r24, 0x03	; 3
    1cd0:	82 30       	cpi	r24, 0x02	; 2
    1cd2:	08 f4       	brcc	.+2      	; 0x1cd6 <MQTT_StateMachine+0x33c>
    1cd4:	fb c0       	rjmp	.+502    	; 0x1ecc <MQTT_StateMachine+0x532>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	14 c1       	rjmp	.+552    	; 0x1f02 <MQTT_StateMachine+0x568>
			break;
			
			case MQTT_WaitForConnectResponce:
			{	
				RetryInNextCycle = TRUE;
				if(MQTT_Retry_Count == 10)
    1cda:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <MQTT_Retry_Count>
    1cde:	8a 30       	cpi	r24, 0x0A	; 10
    1ce0:	09 f0       	breq	.+2      	; 0x1ce4 <MQTT_StateMachine+0x34a>
    1ce2:	f6 c0       	rjmp	.+492    	; 0x1ed0 <MQTT_StateMachine+0x536>
				{
					MQTT_Retry_Count = 30;
    1ce4:	8e e1       	ldi	r24, 0x1E	; 30
    1ce6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <MQTT_Retry_Count>
			}
			break;
			
			case MQTT_WaitForConnectResponce:
			{	
				RetryInNextCycle = TRUE;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	0a c1       	rjmp	.+532    	; 0x1f02 <MQTT_StateMachine+0x568>
			
			
			case MQTT_SubscribeTopic_Config:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1cee:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <SIMCOM_Job_Result>
    1cf2:	81 11       	cpse	r24, r1
    1cf4:	11 c0       	rjmp	.+34     	; 0x1d18 <MQTT_StateMachine+0x37e>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CMQTTSUBTOPIC=0,16,1", SIMCOM_DEFAULT_TIMEOUT, MQTT_CALLBACK) == TRUE)
    1cf6:	2a ec       	ldi	r18, 0xCA	; 202
    1cf8:	3c e0       	ldi	r19, 0x0C	; 12
    1cfa:	40 ed       	ldi	r20, 0xD0	; 208
    1cfc:	57 e0       	ldi	r21, 0x07	; 7
    1cfe:	60 e0       	ldi	r22, 0x00	; 0
    1d00:	70 e0       	ldi	r23, 0x00	; 0
    1d02:	8b eb       	ldi	r24, 0xBB	; 187
    1d04:	92 e0       	ldi	r25, 0x02	; 2
    1d06:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1d0a:	81 30       	cpi	r24, 0x01	; 1
    1d0c:	09 f0       	breq	.+2      	; 0x1d10 <MQTT_StateMachine+0x376>
    1d0e:	e2 c0       	rjmp	.+452    	; 0x1ed4 <MQTT_StateMachine+0x53a>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1d10:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <SIMCOM_Job_Result>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	f5 c0       	rjmp	.+490    	; 0x1f02 <MQTT_StateMachine+0x568>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1d18:	85 30       	cpi	r24, 0x05	; 5
    1d1a:	c9 f4       	brne	.+50     	; 0x1d4e <MQTT_StateMachine+0x3b4>

static inline BOOL SIMCOM_IsResponse_Entermessage()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 1)
    1d1c:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <SIMCOM_ResponseLength>
    1d20:	81 30       	cpi	r24, 0x01	; 1
    1d22:	51 f4       	brne	.+20     	; 0x1d38 <MQTT_StateMachine+0x39e>
	{
		if(strcmp(SIMCOM_ResponseBuffer,ENTER_MESSAGE) == 0)
    1d24:	63 ed       	ldi	r22, 0xD3	; 211
    1d26:	72 e0       	ldi	r23, 0x02	; 2
    1d28:	8c e2       	ldi	r24, 0x2C	; 44
    1d2a:	95 e0       	ldi	r25, 0x05	; 5
    1d2c:	0e 94 11 14 	call	0x2822	; 0x2822 <strcmp>
    1d30:	89 2b       	or	r24, r25
    1d32:	21 f0       	breq	.+8      	; 0x1d3c <MQTT_StateMachine+0x3a2>
}


static inline BOOL SIMCOM_IsResponse_Entermessage()
{
	BOOL retval = FALSE;
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	03 c0       	rjmp	.+6      	; 0x1d3e <MQTT_StateMachine+0x3a4>
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	01 c0       	rjmp	.+2      	; 0x1d3e <MQTT_StateMachine+0x3a4>

	if(SIMCOM_GetResponseLength() == 1)
	{
		if(strcmp(SIMCOM_ResponseBuffer,ENTER_MESSAGE) == 0)
		{
			retval = TRUE;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponse_Entermessage())
    1d3e:	88 23       	and	r24, r24
    1d40:	09 f4       	brne	.+2      	; 0x1d44 <MQTT_StateMachine+0x3aa>
    1d42:	ca c0       	rjmp	.+404    	; 0x1ed8 <MQTT_StateMachine+0x53e>
						{
							MQTT_State = MQTT_SubTopic_Name_Config; // Move to next state
    1d44:	89 e0       	ldi	r24, 0x09	; 9
    1d46:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <MQTT_State>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	da c0       	rjmp	.+436    	; 0x1f02 <MQTT_StateMachine+0x568>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1d4e:	83 50       	subi	r24, 0x03	; 3
    1d50:	82 30       	cpi	r24, 0x02	; 2
    1d52:	08 f4       	brcc	.+2      	; 0x1d56 <MQTT_StateMachine+0x3bc>
    1d54:	c3 c0       	rjmp	.+390    	; 0x1edc <MQTT_StateMachine+0x542>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	d4 c0       	rjmp	.+424    	; 0x1f02 <MQTT_StateMachine+0x568>
			break;
			
			case MQTT_SubTopic_Name_Config:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1d5a:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <SIMCOM_Job_Result>
    1d5e:	81 11       	cpse	r24, r1
    1d60:	11 c0       	rjmp	.+34     	; 0x1d84 <MQTT_StateMachine+0x3ea>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job(SUBTOPIC, SIMCOM_DEFAULT_TIMEOUT, MQTT_CALLBACK) == TRUE)
    1d62:	2a ec       	ldi	r18, 0xCA	; 202
    1d64:	3c e0       	ldi	r19, 0x0C	; 12
    1d66:	40 ed       	ldi	r20, 0xD0	; 208
    1d68:	57 e0       	ldi	r21, 0x07	; 7
    1d6a:	60 e0       	ldi	r22, 0x00	; 0
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	85 ed       	ldi	r24, 0xD5	; 213
    1d70:	92 e0       	ldi	r25, 0x02	; 2
    1d72:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1d76:	81 30       	cpi	r24, 0x01	; 1
    1d78:	09 f0       	breq	.+2      	; 0x1d7c <MQTT_StateMachine+0x3e2>
    1d7a:	b2 c0       	rjmp	.+356    	; 0x1ee0 <MQTT_StateMachine+0x546>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1d7c:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <SIMCOM_Job_Result>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	bf c0       	rjmp	.+382    	; 0x1f02 <MQTT_StateMachine+0x568>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1d84:	85 30       	cpi	r24, 0x05	; 5
    1d86:	c9 f4       	brne	.+50     	; 0x1dba <MQTT_StateMachine+0x420>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    1d88:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <SIMCOM_ResponseLength>
    1d8c:	82 30       	cpi	r24, 0x02	; 2
    1d8e:	51 f4       	brne	.+20     	; 0x1da4 <MQTT_StateMachine+0x40a>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    1d90:	6e e3       	ldi	r22, 0x3E	; 62
    1d92:	71 e0       	ldi	r23, 0x01	; 1
    1d94:	8c e2       	ldi	r24, 0x2C	; 44
    1d96:	95 e0       	ldi	r25, 0x05	; 5
    1d98:	0e 94 11 14 	call	0x2822	; 0x2822 <strcmp>
    1d9c:	89 2b       	or	r24, r25
    1d9e:	21 f0       	breq	.+8      	; 0x1da8 <MQTT_StateMachine+0x40e>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	03 c0       	rjmp	.+6      	; 0x1daa <MQTT_StateMachine+0x410>
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	01 c0       	rjmp	.+2      	; 0x1daa <MQTT_StateMachine+0x410>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    1da8:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    1daa:	88 23       	and	r24, r24
    1dac:	09 f4       	brne	.+2      	; 0x1db0 <MQTT_StateMachine+0x416>
    1dae:	9a c0       	rjmp	.+308    	; 0x1ee4 <MQTT_StateMachine+0x54a>
						{
							MQTT_State = MQTT_SubTopicNameUpdate; // Move to next state
    1db0:	8a e0       	ldi	r24, 0x0A	; 10
    1db2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <MQTT_State>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	a4 c0       	rjmp	.+328    	; 0x1f02 <MQTT_StateMachine+0x568>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1dba:	83 50       	subi	r24, 0x03	; 3
    1dbc:	82 30       	cpi	r24, 0x02	; 2
    1dbe:	08 f4       	brcc	.+2      	; 0x1dc2 <MQTT_StateMachine+0x428>
    1dc0:	93 c0       	rjmp	.+294    	; 0x1ee8 <MQTT_StateMachine+0x54e>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	9e c0       	rjmp	.+316    	; 0x1f02 <MQTT_StateMachine+0x568>
			}
			break;
			case MQTT_SubTopicNameUpdate:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1dc6:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <SIMCOM_Job_Result>
    1dca:	81 11       	cpse	r24, r1
    1dcc:	11 c0       	rjmp	.+34     	; 0x1df0 <MQTT_StateMachine+0x456>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CMQTTSUB=0", SIMCOM_DEFAULT_TIMEOUT, MQTT_CALLBACK) == TRUE)
    1dce:	2a ec       	ldi	r18, 0xCA	; 202
    1dd0:	3c e0       	ldi	r19, 0x0C	; 12
    1dd2:	40 ed       	ldi	r20, 0xD0	; 208
    1dd4:	57 e0       	ldi	r21, 0x07	; 7
    1dd6:	60 e0       	ldi	r22, 0x00	; 0
    1dd8:	70 e0       	ldi	r23, 0x00	; 0
    1dda:	86 ee       	ldi	r24, 0xE6	; 230
    1ddc:	92 e0       	ldi	r25, 0x02	; 2
    1dde:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1de2:	81 30       	cpi	r24, 0x01	; 1
    1de4:	09 f0       	breq	.+2      	; 0x1de8 <MQTT_StateMachine+0x44e>
    1de6:	82 c0       	rjmp	.+260    	; 0x1eec <MQTT_StateMachine+0x552>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1de8:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <SIMCOM_Job_Result>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	89 c0       	rjmp	.+274    	; 0x1f02 <MQTT_StateMachine+0x568>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1df0:	85 30       	cpi	r24, 0x05	; 5
    1df2:	29 f4       	brne	.+10     	; 0x1dfe <MQTT_StateMachine+0x464>
					{
						MQTT_State = MQTT_WaitForSubResponce;
    1df4:	8b e0       	ldi	r24, 0x0B	; 11
    1df6:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <MQTT_State>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	82 c0       	rjmp	.+260    	; 0x1f02 <MQTT_StateMachine+0x568>
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
					{
						MQTT_State = MQTT_WaitForSubResponce;
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1dfe:	83 50       	subi	r24, 0x03	; 3
    1e00:	82 30       	cpi	r24, 0x02	; 2
    1e02:	08 f4       	brcc	.+2      	; 0x1e06 <MQTT_StateMachine+0x46c>
    1e04:	75 c0       	rjmp	.+234    	; 0x1ef0 <MQTT_StateMachine+0x556>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	7c c0       	rjmp	.+248    	; 0x1f02 <MQTT_StateMachine+0x568>
			break;
			
			case MQTT_WaitForSubResponce:
			{
				RetryInNextCycle = TRUE;
				if(MQTT_Retry_Count == 10)
    1e0a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <MQTT_Retry_Count>
    1e0e:	8a 30       	cpi	r24, 0x0A	; 10
    1e10:	09 f0       	breq	.+2      	; 0x1e14 <MQTT_StateMachine+0x47a>
    1e12:	70 c0       	rjmp	.+224    	; 0x1ef4 <MQTT_StateMachine+0x55a>
				{
					MQTT_Retry_Count = 50;
    1e14:	82 e3       	ldi	r24, 0x32	; 50
    1e16:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <MQTT_Retry_Count>
			}
			break;
			
			case MQTT_WaitForSubResponce:
			{
				RetryInNextCycle = TRUE;
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	72 c0       	rjmp	.+228    	; 0x1f02 <MQTT_StateMachine+0x568>
			break;
			
			case MQTTSTOP:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1e1e:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <SIMCOM_Job_Result>
    1e22:	81 11       	cpse	r24, r1
    1e24:	11 c0       	rjmp	.+34     	; 0x1e48 <MQTT_StateMachine+0x4ae>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CMQTTSTOP", SIMCOM_DEFAULT_TIMEOUT, MQTT_CALLBACK) == TRUE)
    1e26:	2a ec       	ldi	r18, 0xCA	; 202
    1e28:	3c e0       	ldi	r19, 0x0C	; 12
    1e2a:	40 ed       	ldi	r20, 0xD0	; 208
    1e2c:	57 e0       	ldi	r21, 0x07	; 7
    1e2e:	60 e0       	ldi	r22, 0x00	; 0
    1e30:	70 e0       	ldi	r23, 0x00	; 0
    1e32:	84 ef       	ldi	r24, 0xF4	; 244
    1e34:	92 e0       	ldi	r25, 0x02	; 2
    1e36:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1e3a:	81 30       	cpi	r24, 0x01	; 1
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <MQTT_StateMachine+0x4a6>
    1e3e:	5c c0       	rjmp	.+184    	; 0x1ef8 <MQTT_StateMachine+0x55e>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1e40:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <SIMCOM_Job_Result>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	5d c0       	rjmp	.+186    	; 0x1f02 <MQTT_StateMachine+0x568>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1e48:	85 30       	cpi	r24, 0x05	; 5
    1e4a:	c9 f4       	brne	.+50     	; 0x1e7e <MQTT_StateMachine+0x4e4>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    1e4c:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <SIMCOM_ResponseLength>
    1e50:	82 30       	cpi	r24, 0x02	; 2
    1e52:	51 f4       	brne	.+20     	; 0x1e68 <MQTT_StateMachine+0x4ce>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    1e54:	6e e3       	ldi	r22, 0x3E	; 62
    1e56:	71 e0       	ldi	r23, 0x01	; 1
    1e58:	8c e2       	ldi	r24, 0x2C	; 44
    1e5a:	95 e0       	ldi	r25, 0x05	; 5
    1e5c:	0e 94 11 14 	call	0x2822	; 0x2822 <strcmp>
    1e60:	89 2b       	or	r24, r25
    1e62:	21 f0       	breq	.+8      	; 0x1e6c <MQTT_StateMachine+0x4d2>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	03 c0       	rjmp	.+6      	; 0x1e6e <MQTT_StateMachine+0x4d4>
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	01 c0       	rjmp	.+2      	; 0x1e6e <MQTT_StateMachine+0x4d4>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    1e6e:	88 23       	and	r24, r24
    1e70:	09 f4       	brne	.+2      	; 0x1e74 <MQTT_StateMachine+0x4da>
    1e72:	44 c0       	rjmp	.+136    	; 0x1efc <MQTT_StateMachine+0x562>
						{
							MQTT_State = MQTTSTART;
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <MQTT_State>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	42 c0       	rjmp	.+132    	; 0x1f02 <MQTT_StateMachine+0x568>
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
						
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    1e7e:	83 50       	subi	r24, 0x03	; 3
    1e80:	82 30       	cpi	r24, 0x02	; 2
    1e82:	f0 f1       	brcs	.+124    	; 0x1f00 <MQTT_StateMachine+0x566>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	3d c0       	rjmp	.+122    	; 0x1f02 <MQTT_StateMachine+0x568>
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	3b c0       	rjmp	.+118    	; 0x1f02 <MQTT_StateMachine+0x568>
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	39 c0       	rjmp	.+114    	; 0x1f02 <MQTT_StateMachine+0x568>
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	37 c0       	rjmp	.+110    	; 0x1f02 <MQTT_StateMachine+0x568>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	35 c0       	rjmp	.+106    	; 0x1f02 <MQTT_StateMachine+0x568>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	33 c0       	rjmp	.+102    	; 0x1f02 <MQTT_StateMachine+0x568>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	31 c0       	rjmp	.+98     	; 0x1f02 <MQTT_StateMachine+0x568>
						
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	2f c0       	rjmp	.+94     	; 0x1f02 <MQTT_StateMachine+0x568>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1ea4:	80 e0       	ldi	r24, 0x00	; 0
    1ea6:	2d c0       	rjmp	.+90     	; 0x1f02 <MQTT_StateMachine+0x568>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	2b c0       	rjmp	.+86     	; 0x1f02 <MQTT_StateMachine+0x568>
						
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	29 c0       	rjmp	.+82     	; 0x1f02 <MQTT_StateMachine+0x568>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	27 c0       	rjmp	.+78     	; 0x1f02 <MQTT_StateMachine+0x568>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	25 c0       	rjmp	.+74     	; 0x1f02 <MQTT_StateMachine+0x568>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	23 c0       	rjmp	.+70     	; 0x1f02 <MQTT_StateMachine+0x568>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	21 c0       	rjmp	.+66     	; 0x1f02 <MQTT_StateMachine+0x568>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	1f c0       	rjmp	.+62     	; 0x1f02 <MQTT_StateMachine+0x568>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	1d c0       	rjmp	.+58     	; 0x1f02 <MQTT_StateMachine+0x568>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	1b c0       	rjmp	.+54     	; 0x1f02 <MQTT_StateMachine+0x568>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	19 c0       	rjmp	.+50     	; 0x1f02 <MQTT_StateMachine+0x568>
			}
			break;
			
			case MQTT_WaitForConnectResponce:
			{	
				RetryInNextCycle = TRUE;
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	17 c0       	rjmp	.+46     	; 0x1f02 <MQTT_StateMachine+0x568>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	15 c0       	rjmp	.+42     	; 0x1f02 <MQTT_StateMachine+0x568>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	13 c0       	rjmp	.+38     	; 0x1f02 <MQTT_StateMachine+0x568>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	11 c0       	rjmp	.+34     	; 0x1f02 <MQTT_StateMachine+0x568>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	0f c0       	rjmp	.+30     	; 0x1f02 <MQTT_StateMachine+0x568>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	0d c0       	rjmp	.+26     	; 0x1f02 <MQTT_StateMachine+0x568>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	0b c0       	rjmp	.+22     	; 0x1f02 <MQTT_StateMachine+0x568>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	09 c0       	rjmp	.+18     	; 0x1f02 <MQTT_StateMachine+0x568>
						MQTT_State = MQTT_WaitForSubResponce;
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	07 c0       	rjmp	.+14     	; 0x1f02 <MQTT_StateMachine+0x568>
			}
			break;
			
			case MQTT_WaitForSubResponce:
			{
				RetryInNextCycle = TRUE;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	05 c0       	rjmp	.+10     	; 0x1f02 <MQTT_StateMachine+0x568>
	else
	{
		MQTTReconnectCount--;
	}

	BOOL RetryInNextCycle = FALSE;
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	03 c0       	rjmp	.+6      	; 0x1f02 <MQTT_StateMachine+0x568>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	01 c0       	rjmp	.+2      	; 0x1f02 <MQTT_StateMachine+0x568>
						
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    1f00:	81 e0       	ldi	r24, 0x01	; 1
				// Do Nothing, The state machine has been completed
			}
			break;
		}

		if(RetryInNextCycle == TRUE)
    1f02:	81 30       	cpi	r24, 0x01	; 1
    1f04:	69 f4       	brne	.+26     	; 0x1f20 <MQTT_StateMachine+0x586>
		{
			// If Retry is allowed
			if(MQTT_Retry_Count != 0)
    1f06:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <MQTT_Retry_Count>
    1f0a:	88 23       	and	r24, r24
    1f0c:	31 f0       	breq	.+12     	; 0x1f1a <MQTT_StateMachine+0x580>
			{
				MQTT_Retry_Count--; // Decrement the Retry Count
    1f0e:	81 50       	subi	r24, 0x01	; 1
    1f10:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <MQTT_Retry_Count>

				SIMCOM_Job_Result = SIMCOM_Job_Idle; // Setting the Job to Idle will retry the Job again in next cycle.
    1f14:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <SIMCOM_Job_Result>
    1f18:	03 c0       	rjmp	.+6      	; 0x1f20 <MQTT_StateMachine+0x586>
			}
			else
			{
				// RETRY Mechanism expired, abort the Job and do not move the state
				SIMCOM_Job_Result = SIMCOM_Job_Aborted;
    1f1a:	86 e0       	ldi	r24, 0x06	; 6
    1f1c:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <SIMCOM_Job_Result>
			}
		}
		if(SIMCOM_Job_Result == SIMCOM_Job_Aborted)
    1f20:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <SIMCOM_Job_Result>
    1f24:	86 30       	cpi	r24, 0x06	; 6
    1f26:	11 f4       	brne	.+4      	; 0x1f2c <MQTT_StateMachine+0x592>
		{
			// If in any of the state, the Job is aborted, then move to the error state	
			  SIMCOM_ERROR_CALLBACK();
    1f28:	0e 94 c0 0c 	call	0x1980	; 0x1980 <COSMIC_SIMCOM_Error_Callback>
		}

		/* Check if the state changed after execution */
		if(MQTT_State_Before_Execution != MQTT_State)
    1f2c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <MQTT_State>
    1f30:	c8 17       	cp	r28, r24
    1f32:	29 f0       	breq	.+10     	; 0x1f3e <MQTT_StateMachine+0x5a4>
		{
			// If changed, the Set the New Job Result as Idle for the next state to proceed further
			SIMCOM_Job_Result = SIMCOM_Job_Idle; // Reset the Job state so that next command will be sent
    1f34:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <SIMCOM_Job_Result>

			MQTT_Retry_Count = P_SIMCOM_DEFAULT_FAILURE_RETRY_COUNT; // Reset the Retry Count
    1f38:	8a e0       	ldi	r24, 0x0A	; 10
    1f3a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <MQTT_Retry_Count>
		}
	}
}
    1f3e:	df 91       	pop	r29
    1f40:	cf 91       	pop	r28
    1f42:	08 95       	ret

00001f44 <MQTT_Publish_CallBack>:
static void MQTT_Publish_CallBack(SIMCOM_Job_Result_EN result)
{
	// This function will be called by the SIMCOM handler upon successful reception of the response

	// This will be read in the Main function, so simply set the value
	SIMCOM_Job_Result = result;
    1f44:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <SIMCOM_Job_Result>
    1f48:	08 95       	ret

00001f4a <MQTT_Publish_StateMachine>:
/* Function Definitions                  */
/*****************************************/


void MQTT_Publish_StateMachine(void)
{
    1f4a:	ef 92       	push	r14
    1f4c:	ff 92       	push	r15
    1f4e:	1f 93       	push	r17
    1f50:	cf 93       	push	r28
    1f52:	df 93       	push	r29
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
    1f58:	64 97       	sbiw	r28, 0x14	; 20
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	f8 94       	cli
    1f5e:	de bf       	out	0x3e, r29	; 62
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	cd bf       	out	0x3d, r28	; 61
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;
    1f64:	10 91 12 04 	lds	r17, 0x0412	; 0x800412 <Publish_State>

	BOOL RetryInNextCycle = FALSE;

	if(IsMQTT_Ready())
    1f68:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <MQTT_State>
    1f6c:	8d 30       	cpi	r24, 0x0D	; 13
    1f6e:	09 f0       	breq	.+2      	; 0x1f72 <MQTT_Publish_StateMachine+0x28>
    1f70:	6e c1       	rjmp	.+732    	; 0x224e <MQTT_Publish_StateMachine+0x304>
	{
		switch(Publish_State)
    1f72:	13 30       	cpi	r17, 0x03	; 3
    1f74:	09 f4       	brne	.+2      	; 0x1f78 <MQTT_Publish_StateMachine+0x2e>
    1f76:	8e c0       	rjmp	.+284    	; 0x2094 <MQTT_Publish_StateMachine+0x14a>
    1f78:	30 f4       	brcc	.+12     	; 0x1f86 <MQTT_Publish_StateMachine+0x3c>
    1f7a:	11 30       	cpi	r17, 0x01	; 1
    1f7c:	69 f0       	breq	.+26     	; 0x1f98 <MQTT_Publish_StateMachine+0x4e>
    1f7e:	12 30       	cpi	r17, 0x02	; 2
    1f80:	09 f4       	brne	.+2      	; 0x1f84 <MQTT_Publish_StateMachine+0x3a>
    1f82:	52 c0       	rjmp	.+164    	; 0x2028 <MQTT_Publish_StateMachine+0xde>
    1f84:	2b c1       	rjmp	.+598    	; 0x21dc <MQTT_Publish_StateMachine+0x292>
    1f86:	15 30       	cpi	r17, 0x05	; 5
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <MQTT_Publish_StateMachine+0x42>
    1f8a:	ff c0       	rjmp	.+510    	; 0x218a <MQTT_Publish_StateMachine+0x240>
    1f8c:	08 f4       	brcc	.+2      	; 0x1f90 <MQTT_Publish_StateMachine+0x46>
    1f8e:	cc c0       	rjmp	.+408    	; 0x2128 <MQTT_Publish_StateMachine+0x1de>
    1f90:	16 30       	cpi	r17, 0x06	; 6
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <MQTT_Publish_StateMachine+0x4c>
    1f94:	1a c1       	rjmp	.+564    	; 0x21ca <MQTT_Publish_StateMachine+0x280>
    1f96:	22 c1       	rjmp	.+580    	; 0x21dc <MQTT_Publish_StateMachine+0x292>
			}
			break;
			case MQTT_PublishTopic_Config:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    1f98:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <SIMCOM_Job_Result>
    1f9c:	81 11       	cpse	r24, r1
    1f9e:	23 c0       	rjmp	.+70     	; 0x1fe6 <MQTT_Publish_StateMachine+0x9c>
				{
					//Set topic Length by using Macro The size of the Topic is Configured in PUBTOPICLength Macro
					char SetTopicLength[20];
					
					sprintf(SetTopicLength,"AT+CMQTTTOPIC=0,%d",PUBTOPICLength);
    1fa0:	1f 92       	push	r1
    1fa2:	80 e1       	ldi	r24, 0x10	; 16
    1fa4:	8f 93       	push	r24
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	93 e0       	ldi	r25, 0x03	; 3
    1faa:	9f 93       	push	r25
    1fac:	8f 93       	push	r24
    1fae:	ce 01       	movw	r24, r28
    1fb0:	01 96       	adiw	r24, 0x01	; 1
    1fb2:	7c 01       	movw	r14, r24
    1fb4:	9f 93       	push	r25
    1fb6:	8f 93       	push	r24
    1fb8:	0e 94 43 14 	call	0x2886	; 0x2886 <sprintf>
					
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job(SetTopicLength, SIMCOM_DEFAULT_TIMEOUT, MQTT_Publish_CallBack) == TRUE)
    1fbc:	22 ea       	ldi	r18, 0xA2	; 162
    1fbe:	3f e0       	ldi	r19, 0x0F	; 15
    1fc0:	40 ed       	ldi	r20, 0xD0	; 208
    1fc2:	57 e0       	ldi	r21, 0x07	; 7
    1fc4:	60 e0       	ldi	r22, 0x00	; 0
    1fc6:	70 e0       	ldi	r23, 0x00	; 0
    1fc8:	c7 01       	movw	r24, r14
    1fca:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    1fce:	0f 90       	pop	r0
    1fd0:	0f 90       	pop	r0
    1fd2:	0f 90       	pop	r0
    1fd4:	0f 90       	pop	r0
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	81 30       	cpi	r24, 0x01	; 1
    1fdc:	11 f4       	brne	.+4      	; 0x1fe2 <MQTT_Publish_StateMachine+0x98>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    1fde:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <SIMCOM_Job_Result>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	16 c1       	rjmp	.+556    	; 0x2212 <MQTT_Publish_StateMachine+0x2c8>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    1fe6:	85 30       	cpi	r24, 0x05	; 5
    1fe8:	c9 f4       	brne	.+50     	; 0x201c <MQTT_Publish_StateMachine+0xd2>

static inline BOOL SIMCOM_IsResponse_Entermessage()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 1)
    1fea:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <SIMCOM_ResponseLength>
    1fee:	81 30       	cpi	r24, 0x01	; 1
    1ff0:	51 f4       	brne	.+20     	; 0x2006 <MQTT_Publish_StateMachine+0xbc>
	{
		if(strcmp(SIMCOM_ResponseBuffer,ENTER_MESSAGE) == 0)
    1ff2:	63 ed       	ldi	r22, 0xD3	; 211
    1ff4:	72 e0       	ldi	r23, 0x02	; 2
    1ff6:	8c e2       	ldi	r24, 0x2C	; 44
    1ff8:	95 e0       	ldi	r25, 0x05	; 5
    1ffa:	0e 94 11 14 	call	0x2822	; 0x2822 <strcmp>
    1ffe:	89 2b       	or	r24, r25
    2000:	21 f0       	breq	.+8      	; 0x200a <MQTT_Publish_StateMachine+0xc0>
}


static inline BOOL SIMCOM_IsResponse_Entermessage()
{
	BOOL retval = FALSE;
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	03 c0       	rjmp	.+6      	; 0x200c <MQTT_Publish_StateMachine+0xc2>
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	01 c0       	rjmp	.+2      	; 0x200c <MQTT_Publish_StateMachine+0xc2>

	if(SIMCOM_GetResponseLength() == 1)
	{
		if(strcmp(SIMCOM_ResponseBuffer,ENTER_MESSAGE) == 0)
		{
			retval = TRUE;
    200a:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponse_Entermessage())
    200c:	88 23       	and	r24, r24
    200e:	09 f4       	brne	.+2      	; 0x2012 <MQTT_Publish_StateMachine+0xc8>
    2010:	e7 c0       	rjmp	.+462    	; 0x21e0 <MQTT_Publish_StateMachine+0x296>
						{
							Publish_State = MQTT_PubTopic_Name_Config; // Move to next state
    2012:	82 e0       	ldi	r24, 0x02	; 2
    2014:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <Publish_State>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	fb c0       	rjmp	.+502    	; 0x2212 <MQTT_Publish_StateMachine+0x2c8>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    201c:	83 50       	subi	r24, 0x03	; 3
    201e:	82 30       	cpi	r24, 0x02	; 2
    2020:	08 f4       	brcc	.+2      	; 0x2024 <MQTT_Publish_StateMachine+0xda>
    2022:	e0 c0       	rjmp	.+448    	; 0x21e4 <MQTT_Publish_StateMachine+0x29a>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	f5 c0       	rjmp	.+490    	; 0x2212 <MQTT_Publish_StateMachine+0x2c8>
			break;

			case MQTT_PubTopic_Name_Config:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    2028:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <SIMCOM_Job_Result>
    202c:	81 11       	cpse	r24, r1
    202e:	11 c0       	rjmp	.+34     	; 0x2052 <MQTT_Publish_StateMachine+0x108>
				{
					// Send AT Command and wait for response
						
					if(SIMCOM_Schedule_Job(PUBTOPIC, SIMCOM_DEFAULT_TIMEOUT, MQTT_Publish_CallBack) == TRUE)
    2030:	22 ea       	ldi	r18, 0xA2	; 162
    2032:	3f e0       	ldi	r19, 0x0F	; 15
    2034:	40 ed       	ldi	r20, 0xD0	; 208
    2036:	57 e0       	ldi	r21, 0x07	; 7
    2038:	60 e0       	ldi	r22, 0x00	; 0
    203a:	70 e0       	ldi	r23, 0x00	; 0
    203c:	84 e1       	ldi	r24, 0x14	; 20
    203e:	93 e0       	ldi	r25, 0x03	; 3
    2040:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    2044:	81 30       	cpi	r24, 0x01	; 1
    2046:	09 f0       	breq	.+2      	; 0x204a <MQTT_Publish_StateMachine+0x100>
    2048:	cf c0       	rjmp	.+414    	; 0x21e8 <MQTT_Publish_StateMachine+0x29e>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    204a:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <SIMCOM_Job_Result>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	e0 c0       	rjmp	.+448    	; 0x2212 <MQTT_Publish_StateMachine+0x2c8>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    2052:	85 30       	cpi	r24, 0x05	; 5
    2054:	c9 f4       	brne	.+50     	; 0x2088 <MQTT_Publish_StateMachine+0x13e>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    2056:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <SIMCOM_ResponseLength>
    205a:	82 30       	cpi	r24, 0x02	; 2
    205c:	51 f4       	brne	.+20     	; 0x2072 <MQTT_Publish_StateMachine+0x128>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    205e:	6e e3       	ldi	r22, 0x3E	; 62
    2060:	71 e0       	ldi	r23, 0x01	; 1
    2062:	8c e2       	ldi	r24, 0x2C	; 44
    2064:	95 e0       	ldi	r25, 0x05	; 5
    2066:	0e 94 11 14 	call	0x2822	; 0x2822 <strcmp>
    206a:	89 2b       	or	r24, r25
    206c:	21 f0       	breq	.+8      	; 0x2076 <MQTT_Publish_StateMachine+0x12c>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	03 c0       	rjmp	.+6      	; 0x2078 <MQTT_Publish_StateMachine+0x12e>
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	01 c0       	rjmp	.+2      	; 0x2078 <MQTT_Publish_StateMachine+0x12e>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    2076:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    2078:	88 23       	and	r24, r24
    207a:	09 f4       	brne	.+2      	; 0x207e <MQTT_Publish_StateMachine+0x134>
    207c:	b7 c0       	rjmp	.+366    	; 0x21ec <MQTT_Publish_StateMachine+0x2a2>
						{
							Publish_State = MQTT_UpdatePayloadLength; // Move to next state
    207e:	83 e0       	ldi	r24, 0x03	; 3
    2080:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <Publish_State>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	c5 c0       	rjmp	.+394    	; 0x2212 <MQTT_Publish_StateMachine+0x2c8>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    2088:	83 50       	subi	r24, 0x03	; 3
    208a:	82 30       	cpi	r24, 0x02	; 2
    208c:	08 f4       	brcc	.+2      	; 0x2090 <MQTT_Publish_StateMachine+0x146>
    208e:	b0 c0       	rjmp	.+352    	; 0x21f0 <MQTT_Publish_StateMachine+0x2a6>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	bf c0       	rjmp	.+382    	; 0x2212 <MQTT_Publish_StateMachine+0x2c8>
			}
			break;
			case MQTT_UpdatePayloadLength:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    2094:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <SIMCOM_Job_Result>
    2098:	81 11       	cpse	r24, r1
    209a:	2a c0       	rjmp	.+84     	; 0x20f0 <MQTT_Publish_StateMachine+0x1a6>
				{
					char SetPayloadLength[20];
										
					sprintf(SetPayloadLength,"AT+CMQTTPAYLOAD=0,%d",strlen(PublishPayload));
    209c:	e5 e2       	ldi	r30, 0x25	; 37
    209e:	f6 e0       	ldi	r31, 0x06	; 6
    20a0:	01 90       	ld	r0, Z+
    20a2:	00 20       	and	r0, r0
    20a4:	e9 f7       	brne	.-6      	; 0x20a0 <MQTT_Publish_StateMachine+0x156>
    20a6:	31 97       	sbiw	r30, 0x01	; 1
    20a8:	e5 52       	subi	r30, 0x25	; 37
    20aa:	f6 40       	sbci	r31, 0x06	; 6
    20ac:	ff 93       	push	r31
    20ae:	ef 93       	push	r30
    20b0:	85 e2       	ldi	r24, 0x25	; 37
    20b2:	93 e0       	ldi	r25, 0x03	; 3
    20b4:	9f 93       	push	r25
    20b6:	8f 93       	push	r24
    20b8:	ce 01       	movw	r24, r28
    20ba:	01 96       	adiw	r24, 0x01	; 1
    20bc:	7c 01       	movw	r14, r24
    20be:	9f 93       	push	r25
    20c0:	8f 93       	push	r24
    20c2:	0e 94 43 14 	call	0x2886	; 0x2886 <sprintf>
					
					/*Set Payload length For The Publish Msg, Now its sets statically if we need dynamic change in Payload we have to update the Length*/ 
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job(SetPayloadLength, SIMCOM_DEFAULT_TIMEOUT, MQTT_Publish_CallBack) == TRUE)
    20c6:	22 ea       	ldi	r18, 0xA2	; 162
    20c8:	3f e0       	ldi	r19, 0x0F	; 15
    20ca:	40 ed       	ldi	r20, 0xD0	; 208
    20cc:	57 e0       	ldi	r21, 0x07	; 7
    20ce:	60 e0       	ldi	r22, 0x00	; 0
    20d0:	70 e0       	ldi	r23, 0x00	; 0
    20d2:	c7 01       	movw	r24, r14
    20d4:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	81 30       	cpi	r24, 0x01	; 1
    20e6:	11 f4       	brne	.+4      	; 0x20ec <MQTT_Publish_StateMachine+0x1a2>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    20e8:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <SIMCOM_Job_Result>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	91 c0       	rjmp	.+290    	; 0x2212 <MQTT_Publish_StateMachine+0x2c8>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    20f0:	85 30       	cpi	r24, 0x05	; 5
    20f2:	09 f0       	breq	.+2      	; 0x20f6 <MQTT_Publish_StateMachine+0x1ac>
    20f4:	7f c0       	rjmp	.+254    	; 0x21f4 <MQTT_Publish_StateMachine+0x2aa>

static inline BOOL SIMCOM_IsResponse_Entermessage()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 1)
    20f6:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <SIMCOM_ResponseLength>
    20fa:	81 30       	cpi	r24, 0x01	; 1
    20fc:	51 f4       	brne	.+20     	; 0x2112 <MQTT_Publish_StateMachine+0x1c8>
	{
		if(strcmp(SIMCOM_ResponseBuffer,ENTER_MESSAGE) == 0)
    20fe:	63 ed       	ldi	r22, 0xD3	; 211
    2100:	72 e0       	ldi	r23, 0x02	; 2
    2102:	8c e2       	ldi	r24, 0x2C	; 44
    2104:	95 e0       	ldi	r25, 0x05	; 5
    2106:	0e 94 11 14 	call	0x2822	; 0x2822 <strcmp>
    210a:	89 2b       	or	r24, r25
    210c:	21 f0       	breq	.+8      	; 0x2116 <MQTT_Publish_StateMachine+0x1cc>
}


static inline BOOL SIMCOM_IsResponse_Entermessage()
{
	BOOL retval = FALSE;
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	03 c0       	rjmp	.+6      	; 0x2118 <MQTT_Publish_StateMachine+0x1ce>
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	01 c0       	rjmp	.+2      	; 0x2118 <MQTT_Publish_StateMachine+0x1ce>

	if(SIMCOM_GetResponseLength() == 1)
	{
		if(strcmp(SIMCOM_ResponseBuffer,ENTER_MESSAGE) == 0)
		{
			retval = TRUE;
    2116:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed
						// Check if the response is OK or not.
						if(SIMCOM_IsResponse_Entermessage())
    2118:	88 23       	and	r24, r24
    211a:	09 f4       	brne	.+2      	; 0x211e <MQTT_Publish_StateMachine+0x1d4>
    211c:	6d c0       	rjmp	.+218    	; 0x21f8 <MQTT_Publish_StateMachine+0x2ae>
						{
							Publish_State = MQTT_Update_PubDataforTopic; // Move to next state
    211e:	84 e0       	ldi	r24, 0x04	; 4
    2120:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <Publish_State>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	75 c0       	rjmp	.+234    	; 0x2212 <MQTT_Publish_StateMachine+0x2c8>
			break;
				
			case MQTT_Update_PubDataforTopic:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    2128:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <SIMCOM_Job_Result>
    212c:	81 11       	cpse	r24, r1
    212e:	11 c0       	rjmp	.+34     	; 0x2152 <MQTT_Publish_StateMachine+0x208>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job(PublishPayload, SIMCOM_DEFAULT_TIMEOUT, MQTT_Publish_CallBack) == TRUE)
    2130:	22 ea       	ldi	r18, 0xA2	; 162
    2132:	3f e0       	ldi	r19, 0x0F	; 15
    2134:	40 ed       	ldi	r20, 0xD0	; 208
    2136:	57 e0       	ldi	r21, 0x07	; 7
    2138:	60 e0       	ldi	r22, 0x00	; 0
    213a:	70 e0       	ldi	r23, 0x00	; 0
    213c:	85 e2       	ldi	r24, 0x25	; 37
    213e:	96 e0       	ldi	r25, 0x06	; 6
    2140:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    2144:	81 30       	cpi	r24, 0x01	; 1
    2146:	09 f0       	breq	.+2      	; 0x214a <MQTT_Publish_StateMachine+0x200>
    2148:	59 c0       	rjmp	.+178    	; 0x21fc <MQTT_Publish_StateMachine+0x2b2>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    214a:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <SIMCOM_Job_Result>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	60 c0       	rjmp	.+192    	; 0x2212 <MQTT_Publish_StateMachine+0x2c8>
				}
				else
				{
						
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    2152:	85 30       	cpi	r24, 0x05	; 5
    2154:	09 f0       	breq	.+2      	; 0x2158 <MQTT_Publish_StateMachine+0x20e>
    2156:	54 c0       	rjmp	.+168    	; 0x2200 <MQTT_Publish_StateMachine+0x2b6>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    2158:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <SIMCOM_ResponseLength>
    215c:	82 30       	cpi	r24, 0x02	; 2
    215e:	51 f4       	brne	.+20     	; 0x2174 <MQTT_Publish_StateMachine+0x22a>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    2160:	6e e3       	ldi	r22, 0x3E	; 62
    2162:	71 e0       	ldi	r23, 0x01	; 1
    2164:	8c e2       	ldi	r24, 0x2C	; 44
    2166:	95 e0       	ldi	r25, 0x05	; 5
    2168:	0e 94 11 14 	call	0x2822	; 0x2822 <strcmp>
    216c:	89 2b       	or	r24, r25
    216e:	21 f0       	breq	.+8      	; 0x2178 <MQTT_Publish_StateMachine+0x22e>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	03 c0       	rjmp	.+6      	; 0x217a <MQTT_Publish_StateMachine+0x230>
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	01 c0       	rjmp	.+2      	; 0x217a <MQTT_Publish_StateMachine+0x230>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    2178:	81 e0       	ldi	r24, 0x01	; 1
					{
						if (SIMCOM_IsResponseOK())
    217a:	88 23       	and	r24, r24
    217c:	09 f4       	brne	.+2      	; 0x2180 <MQTT_Publish_StateMachine+0x236>
    217e:	42 c0       	rjmp	.+132    	; 0x2204 <MQTT_Publish_StateMachine+0x2ba>
						{
							Publish_State = MQTT_Publish_Msg; // Move to next state
    2180:	85 e0       	ldi	r24, 0x05	; 5
    2182:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <Publish_State>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	44 c0       	rjmp	.+136    	; 0x2212 <MQTT_Publish_StateMachine+0x2c8>
			}
			break;
			case MQTT_Publish_Msg:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    218a:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <SIMCOM_Job_Result>
    218e:	81 11       	cpse	r24, r1
    2190:	10 c0       	rjmp	.+32     	; 0x21b2 <MQTT_Publish_StateMachine+0x268>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CMQTTPUB=0,1,60", SIMCOM_DEFAULT_TIMEOUT, MQTT_Publish_CallBack) == TRUE)
    2192:	22 ea       	ldi	r18, 0xA2	; 162
    2194:	3f e0       	ldi	r19, 0x0F	; 15
    2196:	40 ed       	ldi	r20, 0xD0	; 208
    2198:	57 e0       	ldi	r21, 0x07	; 7
    219a:	60 e0       	ldi	r22, 0x00	; 0
    219c:	70 e0       	ldi	r23, 0x00	; 0
    219e:	8a e3       	ldi	r24, 0x3A	; 58
    21a0:	93 e0       	ldi	r25, 0x03	; 3
    21a2:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    21a6:	81 30       	cpi	r24, 0x01	; 1
    21a8:	79 f5       	brne	.+94     	; 0x2208 <MQTT_Publish_StateMachine+0x2be>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    21aa:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <SIMCOM_Job_Result>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	30 c0       	rjmp	.+96     	; 0x2212 <MQTT_Publish_StateMachine+0x2c8>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    21b2:	85 30       	cpi	r24, 0x05	; 5
    21b4:	29 f4       	brne	.+10     	; 0x21c0 <MQTT_Publish_StateMachine+0x276>
					{
						Publish_State = MQTTWaitforPublishResponse;
    21b6:	86 e0       	ldi	r24, 0x06	; 6
    21b8:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <Publish_State>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	29 c0       	rjmp	.+82     	; 0x2212 <MQTT_Publish_StateMachine+0x2c8>
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
					{
						Publish_State = MQTTWaitforPublishResponse;
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    21c0:	83 50       	subi	r24, 0x03	; 3
    21c2:	82 30       	cpi	r24, 0x02	; 2
    21c4:	18 f1       	brcs	.+70     	; 0x220c <MQTT_Publish_StateMachine+0x2c2>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	24 c0       	rjmp	.+72     	; 0x2212 <MQTT_Publish_StateMachine+0x2c8>
			break;
			
			case MQTTWaitforPublishResponse:
			{
				RetryInNextCycle = TRUE;
				if(MQTT_Publish_Retry_Count == 10)
    21ca:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <MQTT_Publish_Retry_Count>
    21ce:	8a 30       	cpi	r24, 0x0A	; 10
    21d0:	f9 f4       	brne	.+62     	; 0x2210 <MQTT_Publish_StateMachine+0x2c6>
				{
					MQTT_Publish_Retry_Count = 50;
    21d2:	82 e3       	ldi	r24, 0x32	; 50
    21d4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <MQTT_Publish_Retry_Count>
			}
			break;
			
			case MQTTWaitforPublishResponse:
			{
				RetryInNextCycle = TRUE;
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	1b c0       	rjmp	.+54     	; 0x2212 <MQTT_Publish_StateMachine+0x2c8>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	19 c0       	rjmp	.+50     	; 0x2212 <MQTT_Publish_StateMachine+0x2c8>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	17 c0       	rjmp	.+46     	; 0x2212 <MQTT_Publish_StateMachine+0x2c8>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	15 c0       	rjmp	.+42     	; 0x2212 <MQTT_Publish_StateMachine+0x2c8>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	13 c0       	rjmp	.+38     	; 0x2212 <MQTT_Publish_StateMachine+0x2c8>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	11 c0       	rjmp	.+34     	; 0x2212 <MQTT_Publish_StateMachine+0x2c8>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	0f c0       	rjmp	.+30     	; 0x2212 <MQTT_Publish_StateMachine+0x2c8>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	0d c0       	rjmp	.+26     	; 0x2212 <MQTT_Publish_StateMachine+0x2c8>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	0b c0       	rjmp	.+22     	; 0x2212 <MQTT_Publish_StateMachine+0x2c8>

void MQTT_Publish_StateMachine(void)
{
	MQTT_State_EN MQTT_Publish_State_Before_Execution = Publish_State;

	BOOL RetryInNextCycle = FALSE;
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	09 c0       	rjmp	.+18     	; 0x2212 <MQTT_Publish_StateMachine+0x2c8>
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	07 c0       	rjmp	.+14     	; 0x2212 <MQTT_Publish_StateMachine+0x2c8>
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	05 c0       	rjmp	.+10     	; 0x2212 <MQTT_Publish_StateMachine+0x2c8>
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	03 c0       	rjmp	.+6      	; 0x2212 <MQTT_Publish_StateMachine+0x2c8>
						Publish_State = MQTTWaitforPublishResponse;
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	01 c0       	rjmp	.+2      	; 0x2212 <MQTT_Publish_StateMachine+0x2c8>
			}
			break;
			
			case MQTTWaitforPublishResponse:
			{
				RetryInNextCycle = TRUE;
    2210:	81 e0       	ldi	r24, 0x01	; 1
				// Do Nothing, The state machine has been completed
			}
			break;
		}

		if(RetryInNextCycle == TRUE)
    2212:	81 30       	cpi	r24, 0x01	; 1
    2214:	69 f4       	brne	.+26     	; 0x2230 <MQTT_Publish_StateMachine+0x2e6>
		{
			// If Retry is allowed
			if(MQTT_Publish_Retry_Count != 0)
    2216:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <MQTT_Publish_Retry_Count>
    221a:	88 23       	and	r24, r24
    221c:	31 f0       	breq	.+12     	; 0x222a <MQTT_Publish_StateMachine+0x2e0>
			{
				MQTT_Publish_Retry_Count--; // Decrement the Retry Count
    221e:	81 50       	subi	r24, 0x01	; 1
    2220:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <MQTT_Publish_Retry_Count>

				SIMCOM_Job_Result = SIMCOM_Job_Idle; // Setting the Job to Idle will retry the Job again in next cycle.
    2224:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <SIMCOM_Job_Result>
    2228:	03 c0       	rjmp	.+6      	; 0x2230 <MQTT_Publish_StateMachine+0x2e6>
			}
			else
			{
				// RETRY Mechanism expired, abort the Job and do not move the state
				SIMCOM_Job_Result = SIMCOM_Job_Aborted;
    222a:	86 e0       	ldi	r24, 0x06	; 6
    222c:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <SIMCOM_Job_Result>
			}
		}
		if(SIMCOM_Job_Result == SIMCOM_Job_Aborted)
    2230:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <SIMCOM_Job_Result>
    2234:	86 30       	cpi	r24, 0x06	; 6
    2236:	11 f4       	brne	.+4      	; 0x223c <MQTT_Publish_StateMachine+0x2f2>
		{
			// If in any of the state, the Job is aborted, then move to the error state
			SIMCOM_ERROR_CALLBACK();
    2238:	0e 94 c0 0c 	call	0x1980	; 0x1980 <COSMIC_SIMCOM_Error_Callback>
		}

		/* Check if the state changed after execution */
		if(MQTT_Publish_State_Before_Execution != MQTT_State)
    223c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <MQTT_State>
    2240:	18 17       	cp	r17, r24
    2242:	29 f0       	breq	.+10     	; 0x224e <MQTT_Publish_StateMachine+0x304>
		{
			// If changed, the Set the New Job Result as Idle for the next state to proceed further
			SIMCOM_Job_Result = SIMCOM_Job_Idle; // Reset the Job state so that next command will be sent
    2244:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <SIMCOM_Job_Result>

			MQTT_Publish_Retry_Count = 10; // Reset the Retry Count
    2248:	8a e0       	ldi	r24, 0x0A	; 10
    224a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <MQTT_Publish_Retry_Count>
		}
	}
	
    224e:	64 96       	adiw	r28, 0x14	; 20
    2250:	0f b6       	in	r0, 0x3f	; 63
    2252:	f8 94       	cli
    2254:	de bf       	out	0x3e, r29	; 62
    2256:	0f be       	out	0x3f, r0	; 63
    2258:	cd bf       	out	0x3d, r28	; 61
    225a:	df 91       	pop	r29
    225c:	cf 91       	pop	r28
    225e:	1f 91       	pop	r17
    2260:	ff 90       	pop	r15
    2262:	ef 90       	pop	r14
    2264:	08 95       	ret

00002266 <SIMCOM_SSL_Configration_Callback>:
static void SIMCOM_SSL_Configration_Callback(SIMCOM_Job_Result_EN result)
{
	// This function will be called by the SIMCOM handler upon successful reception of the response

	// This will be read in the Main function, so simply set the value
	SIMCOM_Job_Result = result;
    2266:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <SIMCOM_Job_Result>
    226a:	08 95       	ret

0000226c <SIMCOM_SSL_CONFIG_MainFunction>:
/*****************************************/
/* Function Definitions                  */
/*****************************************/

void SIMCOM_SSL_CONFIG_MainFunction(void)
{
    226c:	cf 93       	push	r28
	if(IsSIMCOM_Module_Ready())
    226e:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <SIMCOM_State>
    2272:	8c 30       	cpi	r24, 0x0C	; 12
    2274:	09 f0       	breq	.+2      	; 0x2278 <SIMCOM_SSL_CONFIG_MainFunction+0xc>
    2276:	5d c1       	rjmp	.+698    	; 0x2532 <SIMCOM_SSL_CONFIG_MainFunction+0x2c6>
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;
    2278:	c0 91 6e 00 	lds	r28, 0x006E	; 0x80006e <C_MQTT_SSL_Config_State>

		BOOL RetryInNextCycle = FALSE;

		switch(C_MQTT_SSL_Config_State)
    227c:	c3 30       	cpi	r28, 0x03	; 3
    227e:	09 f4       	brne	.+2      	; 0x2282 <SIMCOM_SSL_CONFIG_MainFunction+0x16>
    2280:	79 c0       	rjmp	.+242    	; 0x2374 <SIMCOM_SSL_CONFIG_MainFunction+0x108>
    2282:	28 f4       	brcc	.+10     	; 0x228e <SIMCOM_SSL_CONFIG_MainFunction+0x22>
    2284:	c1 30       	cpi	r28, 0x01	; 1
    2286:	51 f0       	breq	.+20     	; 0x229c <SIMCOM_SSL_CONFIG_MainFunction+0x30>
    2288:	c2 30       	cpi	r28, 0x02	; 2
    228a:	f1 f1       	breq	.+124    	; 0x2308 <SIMCOM_SSL_CONFIG_MainFunction+0x9c>
    228c:	12 c1       	rjmp	.+548    	; 0x24b2 <SIMCOM_SSL_CONFIG_MainFunction+0x246>
    228e:	c4 30       	cpi	r28, 0x04	; 4
    2290:	09 f4       	brne	.+2      	; 0x2294 <SIMCOM_SSL_CONFIG_MainFunction+0x28>
    2292:	a6 c0       	rjmp	.+332    	; 0x23e0 <SIMCOM_SSL_CONFIG_MainFunction+0x174>
    2294:	c5 30       	cpi	r28, 0x05	; 5
    2296:	09 f4       	brne	.+2      	; 0x229a <SIMCOM_SSL_CONFIG_MainFunction+0x2e>
    2298:	d9 c0       	rjmp	.+434    	; 0x244c <SIMCOM_SSL_CONFIG_MainFunction+0x1e0>
    229a:	0b c1       	rjmp	.+534    	; 0x24b2 <SIMCOM_SSL_CONFIG_MainFunction+0x246>
			case C_MQTT_SSL_Init:
			{
				

				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    229c:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <SIMCOM_Job_Result>
    22a0:	81 11       	cpse	r24, r1
    22a2:	11 c0       	rjmp	.+34     	; 0x22c6 <SIMCOM_SSL_CONFIG_MainFunction+0x5a>
				{
					
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CSSLCFG=\"sslversion\",0,4", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_SSL_Configration_Callback) == TRUE)
    22a4:	23 e3       	ldi	r18, 0x33	; 51
    22a6:	31 e1       	ldi	r19, 0x11	; 17
    22a8:	40 ed       	ldi	r20, 0xD0	; 208
    22aa:	57 e0       	ldi	r21, 0x07	; 7
    22ac:	60 e0       	ldi	r22, 0x00	; 0
    22ae:	70 e0       	ldi	r23, 0x00	; 0
    22b0:	8d e4       	ldi	r24, 0x4D	; 77
    22b2:	93 e0       	ldi	r25, 0x03	; 3
    22b4:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    22b8:	81 30       	cpi	r24, 0x01	; 1
    22ba:	09 f0       	breq	.+2      	; 0x22be <SIMCOM_SSL_CONFIG_MainFunction+0x52>
    22bc:	fc c0       	rjmp	.+504    	; 0x24b6 <SIMCOM_SSL_CONFIG_MainFunction+0x24a>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    22be:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <SIMCOM_Job_Result>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	15 c1       	rjmp	.+554    	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    22c6:	85 30       	cpi	r24, 0x05	; 5
    22c8:	c9 f4       	brne	.+50     	; 0x22fc <SIMCOM_SSL_CONFIG_MainFunction+0x90>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    22ca:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <SIMCOM_ResponseLength>
    22ce:	82 30       	cpi	r24, 0x02	; 2
    22d0:	51 f4       	brne	.+20     	; 0x22e6 <SIMCOM_SSL_CONFIG_MainFunction+0x7a>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    22d2:	6e e3       	ldi	r22, 0x3E	; 62
    22d4:	71 e0       	ldi	r23, 0x01	; 1
    22d6:	8c e2       	ldi	r24, 0x2C	; 44
    22d8:	95 e0       	ldi	r25, 0x05	; 5
    22da:	0e 94 11 14 	call	0x2822	; 0x2822 <strcmp>
    22de:	89 2b       	or	r24, r25
    22e0:	21 f0       	breq	.+8      	; 0x22ea <SIMCOM_SSL_CONFIG_MainFunction+0x7e>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	03 c0       	rjmp	.+6      	; 0x22ec <SIMCOM_SSL_CONFIG_MainFunction+0x80>
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	01 c0       	rjmp	.+2      	; 0x22ec <SIMCOM_SSL_CONFIG_MainFunction+0x80>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    22ea:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    22ec:	88 23       	and	r24, r24
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <SIMCOM_SSL_CONFIG_MainFunction+0x86>
    22f0:	e4 c0       	rjmp	.+456    	; 0x24ba <SIMCOM_SSL_CONFIG_MainFunction+0x24e>
						{

							C_MQTT_SSL_Config_State = C_MQTT_SSL_Authentication; // Move to next state
    22f2:	82 e0       	ldi	r24, 0x02	; 2
    22f4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <C_MQTT_SSL_Config_State>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    22f8:	80 e0       	ldi	r24, 0x00	; 0
    22fa:	fa c0       	rjmp	.+500    	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    22fc:	83 50       	subi	r24, 0x03	; 3
    22fe:	82 30       	cpi	r24, 0x02	; 2
    2300:	08 f4       	brcc	.+2      	; 0x2304 <SIMCOM_SSL_CONFIG_MainFunction+0x98>
    2302:	dd c0       	rjmp	.+442    	; 0x24be <SIMCOM_SSL_CONFIG_MainFunction+0x252>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	f4 c0       	rjmp	.+488    	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>
			break;
			
			case C_MQTT_SSL_Authentication:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    2308:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <SIMCOM_Job_Result>
    230c:	81 11       	cpse	r24, r1
    230e:	11 c0       	rjmp	.+34     	; 0x2332 <SIMCOM_SSL_CONFIG_MainFunction+0xc6>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CSSLCFG=\"authmode\",0,2", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_SSL_Configration_Callback) == TRUE)
    2310:	23 e3       	ldi	r18, 0x33	; 51
    2312:	31 e1       	ldi	r19, 0x11	; 17
    2314:	40 ed       	ldi	r20, 0xD0	; 208
    2316:	57 e0       	ldi	r21, 0x07	; 7
    2318:	60 e0       	ldi	r22, 0x00	; 0
    231a:	70 e0       	ldi	r23, 0x00	; 0
    231c:	89 e6       	ldi	r24, 0x69	; 105
    231e:	93 e0       	ldi	r25, 0x03	; 3
    2320:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    2324:	81 30       	cpi	r24, 0x01	; 1
    2326:	09 f0       	breq	.+2      	; 0x232a <SIMCOM_SSL_CONFIG_MainFunction+0xbe>
    2328:	cc c0       	rjmp	.+408    	; 0x24c2 <SIMCOM_SSL_CONFIG_MainFunction+0x256>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    232a:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <SIMCOM_Job_Result>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	df c0       	rjmp	.+446    	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    2332:	85 30       	cpi	r24, 0x05	; 5
    2334:	c9 f4       	brne	.+50     	; 0x2368 <SIMCOM_SSL_CONFIG_MainFunction+0xfc>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    2336:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <SIMCOM_ResponseLength>
    233a:	82 30       	cpi	r24, 0x02	; 2
    233c:	51 f4       	brne	.+20     	; 0x2352 <SIMCOM_SSL_CONFIG_MainFunction+0xe6>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    233e:	6e e3       	ldi	r22, 0x3E	; 62
    2340:	71 e0       	ldi	r23, 0x01	; 1
    2342:	8c e2       	ldi	r24, 0x2C	; 44
    2344:	95 e0       	ldi	r25, 0x05	; 5
    2346:	0e 94 11 14 	call	0x2822	; 0x2822 <strcmp>
    234a:	89 2b       	or	r24, r25
    234c:	21 f0       	breq	.+8      	; 0x2356 <SIMCOM_SSL_CONFIG_MainFunction+0xea>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	03 c0       	rjmp	.+6      	; 0x2358 <SIMCOM_SSL_CONFIG_MainFunction+0xec>
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	01 c0       	rjmp	.+2      	; 0x2358 <SIMCOM_SSL_CONFIG_MainFunction+0xec>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    2356:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    2358:	88 23       	and	r24, r24
    235a:	09 f4       	brne	.+2      	; 0x235e <SIMCOM_SSL_CONFIG_MainFunction+0xf2>
    235c:	b4 c0       	rjmp	.+360    	; 0x24c6 <SIMCOM_SSL_CONFIG_MainFunction+0x25a>
						{
							C_MQTT_SSL_Config_State = C_MQTT_SSL_CaCert_Configuration; // Move to next state
    235e:	83 e0       	ldi	r24, 0x03	; 3
    2360:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <C_MQTT_SSL_Config_State>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	c4 c0       	rjmp	.+392    	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    2368:	83 50       	subi	r24, 0x03	; 3
    236a:	82 30       	cpi	r24, 0x02	; 2
    236c:	08 f4       	brcc	.+2      	; 0x2370 <SIMCOM_SSL_CONFIG_MainFunction+0x104>
    236e:	ad c0       	rjmp	.+346    	; 0x24ca <SIMCOM_SSL_CONFIG_MainFunction+0x25e>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	be c0       	rjmp	.+380    	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>


			case C_MQTT_SSL_CaCert_Configuration:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    2374:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <SIMCOM_Job_Result>
    2378:	81 11       	cpse	r24, r1
    237a:	11 c0       	rjmp	.+34     	; 0x239e <SIMCOM_SSL_CONFIG_MainFunction+0x132>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CSSLCFG=\"cacert\",0,\"cacert.pem\"", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_SSL_Configration_Callback) == TRUE)
    237c:	23 e3       	ldi	r18, 0x33	; 51
    237e:	31 e1       	ldi	r19, 0x11	; 17
    2380:	40 ed       	ldi	r20, 0xD0	; 208
    2382:	57 e0       	ldi	r21, 0x07	; 7
    2384:	60 e0       	ldi	r22, 0x00	; 0
    2386:	70 e0       	ldi	r23, 0x00	; 0
    2388:	83 e8       	ldi	r24, 0x83	; 131
    238a:	93 e0       	ldi	r25, 0x03	; 3
    238c:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    2390:	81 30       	cpi	r24, 0x01	; 1
    2392:	09 f0       	breq	.+2      	; 0x2396 <SIMCOM_SSL_CONFIG_MainFunction+0x12a>
    2394:	9c c0       	rjmp	.+312    	; 0x24ce <SIMCOM_SSL_CONFIG_MainFunction+0x262>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    2396:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <SIMCOM_Job_Result>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	a9 c0       	rjmp	.+338    	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    239e:	85 30       	cpi	r24, 0x05	; 5
    23a0:	c9 f4       	brne	.+50     	; 0x23d4 <SIMCOM_SSL_CONFIG_MainFunction+0x168>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    23a2:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <SIMCOM_ResponseLength>
    23a6:	82 30       	cpi	r24, 0x02	; 2
    23a8:	51 f4       	brne	.+20     	; 0x23be <SIMCOM_SSL_CONFIG_MainFunction+0x152>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    23aa:	6e e3       	ldi	r22, 0x3E	; 62
    23ac:	71 e0       	ldi	r23, 0x01	; 1
    23ae:	8c e2       	ldi	r24, 0x2C	; 44
    23b0:	95 e0       	ldi	r25, 0x05	; 5
    23b2:	0e 94 11 14 	call	0x2822	; 0x2822 <strcmp>
    23b6:	89 2b       	or	r24, r25
    23b8:	21 f0       	breq	.+8      	; 0x23c2 <SIMCOM_SSL_CONFIG_MainFunction+0x156>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	03 c0       	rjmp	.+6      	; 0x23c4 <SIMCOM_SSL_CONFIG_MainFunction+0x158>
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	01 c0       	rjmp	.+2      	; 0x23c4 <SIMCOM_SSL_CONFIG_MainFunction+0x158>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    23c2:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    23c4:	88 23       	and	r24, r24
    23c6:	09 f4       	brne	.+2      	; 0x23ca <SIMCOM_SSL_CONFIG_MainFunction+0x15e>
    23c8:	84 c0       	rjmp	.+264    	; 0x24d2 <SIMCOM_SSL_CONFIG_MainFunction+0x266>
						{
							C_MQTT_SSL_Config_State = C_MQTT_SSL_Clientcert_Configuration; // Move to next state
    23ca:	84 e0       	ldi	r24, 0x04	; 4
    23cc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <C_MQTT_SSL_Config_State>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	8e c0       	rjmp	.+284    	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    23d4:	83 50       	subi	r24, 0x03	; 3
    23d6:	82 30       	cpi	r24, 0x02	; 2
    23d8:	08 f4       	brcc	.+2      	; 0x23dc <SIMCOM_SSL_CONFIG_MainFunction+0x170>
    23da:	7d c0       	rjmp	.+250    	; 0x24d6 <SIMCOM_SSL_CONFIG_MainFunction+0x26a>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	88 c0       	rjmp	.+272    	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>


			case C_MQTT_SSL_Clientcert_Configuration:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    23e0:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <SIMCOM_Job_Result>
    23e4:	81 11       	cpse	r24, r1
    23e6:	11 c0       	rjmp	.+34     	; 0x240a <SIMCOM_SSL_CONFIG_MainFunction+0x19e>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CSSLCFG=\"clientcert\",0,\"clientcert.pem\"", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_SSL_Configration_Callback) == TRUE)
    23e8:	23 e3       	ldi	r18, 0x33	; 51
    23ea:	31 e1       	ldi	r19, 0x11	; 17
    23ec:	40 ed       	ldi	r20, 0xD0	; 208
    23ee:	57 e0       	ldi	r21, 0x07	; 7
    23f0:	60 e0       	ldi	r22, 0x00	; 0
    23f2:	70 e0       	ldi	r23, 0x00	; 0
    23f4:	86 ea       	ldi	r24, 0xA6	; 166
    23f6:	93 e0       	ldi	r25, 0x03	; 3
    23f8:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    23fc:	81 30       	cpi	r24, 0x01	; 1
    23fe:	09 f0       	breq	.+2      	; 0x2402 <SIMCOM_SSL_CONFIG_MainFunction+0x196>
    2400:	6c c0       	rjmp	.+216    	; 0x24da <SIMCOM_SSL_CONFIG_MainFunction+0x26e>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    2402:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <SIMCOM_Job_Result>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	73 c0       	rjmp	.+230    	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    240a:	85 30       	cpi	r24, 0x05	; 5
    240c:	c9 f4       	brne	.+50     	; 0x2440 <SIMCOM_SSL_CONFIG_MainFunction+0x1d4>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    240e:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <SIMCOM_ResponseLength>
    2412:	82 30       	cpi	r24, 0x02	; 2
    2414:	51 f4       	brne	.+20     	; 0x242a <SIMCOM_SSL_CONFIG_MainFunction+0x1be>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    2416:	6e e3       	ldi	r22, 0x3E	; 62
    2418:	71 e0       	ldi	r23, 0x01	; 1
    241a:	8c e2       	ldi	r24, 0x2C	; 44
    241c:	95 e0       	ldi	r25, 0x05	; 5
    241e:	0e 94 11 14 	call	0x2822	; 0x2822 <strcmp>
    2422:	89 2b       	or	r24, r25
    2424:	21 f0       	breq	.+8      	; 0x242e <SIMCOM_SSL_CONFIG_MainFunction+0x1c2>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	03 c0       	rjmp	.+6      	; 0x2430 <SIMCOM_SSL_CONFIG_MainFunction+0x1c4>
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	01 c0       	rjmp	.+2      	; 0x2430 <SIMCOM_SSL_CONFIG_MainFunction+0x1c4>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    242e:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    2430:	88 23       	and	r24, r24
    2432:	09 f4       	brne	.+2      	; 0x2436 <SIMCOM_SSL_CONFIG_MainFunction+0x1ca>
    2434:	54 c0       	rjmp	.+168    	; 0x24de <SIMCOM_SSL_CONFIG_MainFunction+0x272>
						{
							C_MQTT_SSL_Config_State = C_MQTT_SSL_Clientkey_Configuration; // Move to next state
    2436:	85 e0       	ldi	r24, 0x05	; 5
    2438:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <C_MQTT_SSL_Config_State>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	58 c0       	rjmp	.+176    	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    2440:	83 50       	subi	r24, 0x03	; 3
    2442:	82 30       	cpi	r24, 0x02	; 2
    2444:	08 f4       	brcc	.+2      	; 0x2448 <SIMCOM_SSL_CONFIG_MainFunction+0x1dc>
    2446:	4d c0       	rjmp	.+154    	; 0x24e2 <SIMCOM_SSL_CONFIG_MainFunction+0x276>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	52 c0       	rjmp	.+164    	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>


			case C_MQTT_SSL_Clientkey_Configuration:
			{
				// First Ensure the SIMCOM Module is Connected
				if(SIMCOM_Job_Result == SIMCOM_Job_Idle)
    244c:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <SIMCOM_Job_Result>
    2450:	81 11       	cpse	r24, r1
    2452:	10 c0       	rjmp	.+32     	; 0x2474 <SIMCOM_SSL_CONFIG_MainFunction+0x208>
				{
					// Send AT Command and wait for response
					if(SIMCOM_Schedule_Job("AT+CSSLCFG=\"clientkey\",0,\"clientkey.pem\"", SIMCOM_DEFAULT_TIMEOUT, SIMCOM_SSL_Configration_Callback) == TRUE)
    2454:	23 e3       	ldi	r18, 0x33	; 51
    2456:	31 e1       	ldi	r19, 0x11	; 17
    2458:	40 ed       	ldi	r20, 0xD0	; 208
    245a:	57 e0       	ldi	r21, 0x07	; 7
    245c:	60 e0       	ldi	r22, 0x00	; 0
    245e:	70 e0       	ldi	r23, 0x00	; 0
    2460:	81 ed       	ldi	r24, 0xD1	; 209
    2462:	93 e0       	ldi	r25, 0x03	; 3
    2464:	0e 94 62 07 	call	0xec4	; 0xec4 <SIMCOM_Schedule_Job>
    2468:	81 30       	cpi	r24, 0x01	; 1
    246a:	e9 f5       	brne	.+122    	; 0x24e6 <SIMCOM_SSL_CONFIG_MainFunction+0x27a>
					{
						// Set it to Scheduled only when the SIMCOM Module Accepted it
						SIMCOM_Job_Result = SIMCOM_Job_Scheduled;
    246c:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <SIMCOM_Job_Result>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	3e c0       	rjmp	.+124    	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>
					}
				}
				else
				{
					// Cyclic part for the response
					if(SIMCOM_Job_Result == SIMCOM_Job_Completed)
    2474:	85 30       	cpi	r24, 0x05	; 5
    2476:	c1 f4       	brne	.+48     	; 0x24a8 <SIMCOM_SSL_CONFIG_MainFunction+0x23c>

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;

	if(SIMCOM_GetResponseLength() == 2)
    2478:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <SIMCOM_ResponseLength>
    247c:	82 30       	cpi	r24, 0x02	; 2
    247e:	51 f4       	brne	.+20     	; 0x2494 <SIMCOM_SSL_CONFIG_MainFunction+0x228>
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
    2480:	6e e3       	ldi	r22, 0x3E	; 62
    2482:	71 e0       	ldi	r23, 0x01	; 1
    2484:	8c e2       	ldi	r24, 0x2C	; 44
    2486:	95 e0       	ldi	r25, 0x05	; 5
    2488:	0e 94 11 14 	call	0x2822	; 0x2822 <strcmp>
    248c:	89 2b       	or	r24, r25
    248e:	21 f0       	breq	.+8      	; 0x2498 <SIMCOM_SSL_CONFIG_MainFunction+0x22c>
	SIMCOM_ResponseLength = 0;
}

static inline BOOL SIMCOM_IsResponseOK()
{
	BOOL retval = FALSE;
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	03 c0       	rjmp	.+6      	; 0x249a <SIMCOM_SSL_CONFIG_MainFunction+0x22e>
    2494:	80 e0       	ldi	r24, 0x00	; 0
    2496:	01 c0       	rjmp	.+2      	; 0x249a <SIMCOM_SSL_CONFIG_MainFunction+0x22e>

	if(SIMCOM_GetResponseLength() == 2)
	{
		if(strcmp(SIMCOM_ResponseBuffer, "OK") == 0)
		{
			retval = TRUE;
    2498:	81 e0       	ldi	r24, 0x01	; 1
					{
						// Job has been completed

						// Check if the response is OK or not.
						if(SIMCOM_IsResponseOK())
    249a:	88 23       	and	r24, r24
    249c:	31 f1       	breq	.+76     	; 0x24ea <SIMCOM_SSL_CONFIG_MainFunction+0x27e>
						{
							C_MQTT_SSL_Config_State = C_MQTT_SSL_Configured; // Move to next state
    249e:	86 e0       	ldi	r24, 0x06	; 6
    24a0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <C_MQTT_SSL_Config_State>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	24 c0       	rjmp	.+72     	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
    24a8:	83 50       	subi	r24, 0x03	; 3
    24aa:	82 30       	cpi	r24, 0x02	; 2
    24ac:	00 f1       	brcs	.+64     	; 0x24ee <SIMCOM_SSL_CONFIG_MainFunction+0x282>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	1f c0       	rjmp	.+62     	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	1d c0       	rjmp	.+58     	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	1b c0       	rjmp	.+54     	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	19 c0       	rjmp	.+50     	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	17 c0       	rjmp	.+46     	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	15 c0       	rjmp	.+42     	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	13 c0       	rjmp	.+38     	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	11 c0       	rjmp	.+34     	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	0f c0       	rjmp	.+30     	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	0d c0       	rjmp	.+26     	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	0b c0       	rjmp	.+22     	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	09 c0       	rjmp	.+18     	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	07 c0       	rjmp	.+14     	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	05 c0       	rjmp	.+10     	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>
{
	if(IsSIMCOM_Module_Ready())
	{
		C_MQTT_SSL_Configuration_State_EN C_MQTT_SSL_Configuration_State_Before_Execution = C_MQTT_SSL_Config_State;

		BOOL RetryInNextCycle = FALSE;
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	03 c0       	rjmp	.+6      	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
						else
						{
							// If the returned value is ERROR or something else, then act accordingly
							// TODO: Later
							RetryInNextCycle = TRUE;
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	01 c0       	rjmp	.+2      	; 0x24f0 <SIMCOM_SSL_CONFIG_MainFunction+0x284>
						}
					}
					else if( (SIMCOM_Job_Result == SIMCOM_Job_Timeout) || (SIMCOM_Job_Result == SIMCOM_Job_Incomplete) )
					{
						// If there is a problem in reception, retry sending the command
						RetryInNextCycle = TRUE;
    24ee:	81 e0       	ldi	r24, 0x01	; 1
				// Do Nothing, The state machine has been completed
			}
			break;
		}

		if(RetryInNextCycle == TRUE)
    24f0:	81 30       	cpi	r24, 0x01	; 1
    24f2:	69 f4       	brne	.+26     	; 0x250e <SIMCOM_SSL_CONFIG_MainFunction+0x2a2>
		{
			// If Retry is allowed
			if(SIMCOM_SSL_Config_Retry_Count != 0)
    24f4:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <SIMCOM_SSL_Config_Retry_Count>
    24f8:	88 23       	and	r24, r24
    24fa:	31 f0       	breq	.+12     	; 0x2508 <SIMCOM_SSL_CONFIG_MainFunction+0x29c>
			{
				SIMCOM_SSL_Config_Retry_Count--; // Decrement the Retry Count
    24fc:	81 50       	subi	r24, 0x01	; 1
    24fe:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <SIMCOM_SSL_Config_Retry_Count>

				SIMCOM_Job_Result = SIMCOM_Job_Idle; // Setting the Job to Idle will retry the Job again in next cycle.
    2502:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <SIMCOM_Job_Result>
    2506:	03 c0       	rjmp	.+6      	; 0x250e <SIMCOM_SSL_CONFIG_MainFunction+0x2a2>
			}
			else
			{
				// RETRY Mechanism expired, abort the Job and do not move the state
				SIMCOM_Job_Result = SIMCOM_Job_Aborted;
    2508:	86 e0       	ldi	r24, 0x06	; 6
    250a:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <SIMCOM_Job_Result>
			}
		}

		if(SIMCOM_Job_Result == SIMCOM_Job_Aborted)
    250e:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <SIMCOM_Job_Result>
    2512:	86 30       	cpi	r24, 0x06	; 6
    2514:	29 f4       	brne	.+10     	; 0x2520 <SIMCOM_SSL_CONFIG_MainFunction+0x2b4>
		{
			// If in any of the state, the Job is aborted, then move to the Error State

			C_MQTT_SSL_Config_State = C_MQTT_SSL_Configration_Error;
    2516:	87 e0       	ldi	r24, 0x07	; 7
    2518:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <C_MQTT_SSL_Config_State>

			/* Send Appropriate Error Code to Application */
			{
				SIMCOM_Error_State_EN ErrorState = SIMCOM_Error_Unknown;

				SIMCOM_ERROR_CALLBACK();
    251c:	0e 94 c0 0c 	call	0x1980	; 0x1980 <COSMIC_SIMCOM_Error_Callback>
			}
		}

		/* Check if the state changed after execution */
		if(C_MQTT_SSL_Configuration_State_Before_Execution != C_MQTT_SSL_Config_State)
    2520:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <C_MQTT_SSL_Config_State>
    2524:	c8 17       	cp	r28, r24
    2526:	29 f0       	breq	.+10     	; 0x2532 <SIMCOM_SSL_CONFIG_MainFunction+0x2c6>
		{
			// If changed, the Set the New Job Result as Idle for the next state to proceed further
			SIMCOM_Job_Result = SIMCOM_Job_Idle; // Reset the Job state so that next command will be sent
    2528:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <SIMCOM_Job_Result>

			SIMCOM_SSL_Config_Retry_Count = P_SIMCOM_DEFAULT_FAILURE_RETRY_COUNT; // Reset the Retry Count
    252c:	8a e0       	ldi	r24, 0x0A	; 10
    252e:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <SIMCOM_SSL_Config_Retry_Count>
	}
	else
	{
		//SIMCOM_SSL_Config_State = SIMCOM_SSL_Configuration_Idle;
	}
    2532:	cf 91       	pop	r28
    2534:	08 95       	ret

00002536 <COSMIC_Generic_SIMCOM_Callback>:
/* Function Declarations */
/*************************/

static inline void SIMCOM_ClearResponseBuffer()
{
	memset(SIMCOM_ResponseBuffer, 0, BUFFER_MAX_SIZE);
    2536:	88 ec       	ldi	r24, 0xC8	; 200
    2538:	ec e2       	ldi	r30, 0x2C	; 44
    253a:	f5 e0       	ldi	r31, 0x05	; 5
    253c:	df 01       	movw	r26, r30
    253e:	1d 92       	st	X+, r1
    2540:	8a 95       	dec	r24
    2542:	e9 f7       	brne	.-6      	; 0x253e <COSMIC_Generic_SIMCOM_Callback+0x8>

	SIMCOM_ResponseLength = 0;
    2544:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <SIMCOM_ResponseLength>
    2548:	08 95       	ret

0000254a <CloudRxCommandDataRxCbk>:
	/* This function will be called for an un-scheduled job. So check for the response and clear the buffer */
	SIMCOM_ClearResponseBuffer();
}

void CloudRxCommandDataRxCbk(UBYTE Length, UBYTE *Data)
{
    254a:	08 95       	ret

0000254c <Cloud_ComIf_ErrorNotification>:
	
}

void Cloud_ComIf_ErrorNotification(ULONG Debug0, ULONG Debug1)
{
    254c:	08 95       	ret

0000254e <Cloud_Transmit>:
	
}

UBYTE Cloud_Transmit(UWORD Length, void * Data)
{
	memcpy(PublishPayload,Data,Length);
    254e:	ac 01       	movw	r20, r24
    2550:	85 e2       	ldi	r24, 0x25	; 37
    2552:	96 e0       	ldi	r25, 0x06	; 6
    2554:	0e 94 08 14 	call	0x2810	; 0x2810 <memcpy>
	
	return COMIF_EC_NO_ERROR;
}
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	08 95       	ret

0000255c <UpdatePublishdata>:

void UpdatePublishdata(UBYTE Cmd)
{
	CommandData_ST *CD = &CommandData;
	
	CD->cmd = Cmd;
    255c:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <CommandData>
	{
		CD->IO_Ctrl = FALSE;
	}
	else
	{
		CD->IO_Ctrl = TRUE;
    2560:	e6 e6       	ldi	r30, 0x66	; 102
    2562:	f6 e0       	ldi	r31, 0x06	; 6
    2564:	80 81       	ld	r24, Z
    2566:	81 60       	ori	r24, 0x01	; 1
    2568:	80 83       	st	Z, r24
	}
	UBYTE *PubMsg = ComIf_GetShadowBuffer_Cloud_CommandDataStatus();
	
	memcpy(PubMsg,CD->Data_Bytes,8);
    256a:	88 e0       	ldi	r24, 0x08	; 8
    256c:	e5 e6       	ldi	r30, 0x65	; 101
    256e:	f6 e0       	ldi	r31, 0x06	; 6
    2570:	a3 e5       	ldi	r26, 0x53	; 83
    2572:	b7 e0       	ldi	r27, 0x07	; 7
    2574:	01 90       	ld	r0, Z+
    2576:	0d 92       	st	X+, r0
    2578:	8a 95       	dec	r24
    257a:	e1 f7       	brne	.-8      	; 0x2574 <UpdatePublishdata+0x18>
	
	ComIf_TransmitFromBuffer_Cloud_CommandDataStatus();
    257c:	28 e0       	ldi	r18, 0x08	; 8
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	43 e5       	ldi	r20, 0x53	; 83
    2582:	57 e0       	ldi	r21, 0x07	; 7
    2584:	60 e0       	ldi	r22, 0x00	; 0
    2586:	70 e0       	ldi	r23, 0x00	; 0
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	0e 94 25 03 	call	0x64a	; 0x64a <ComIf_Transmit>
    2590:	08 95       	ret

00002592 <MQTT_StringSeperate>:
	
}

UBYTE MQTT_StringSeperate(char *str,char endpoint)
{
    2592:	ef 92       	push	r14
    2594:	ff 92       	push	r15
    2596:	0f 93       	push	r16
    2598:	1f 93       	push	r17
    259a:	cf 93       	push	r28
    259c:	df 93       	push	r29
    259e:	ec 01       	movw	r28, r24
	static char arr[5];
	int i,j,findlen,count = 0,temp;
	findlen = strlen(str);
    25a0:	dc 01       	movw	r26, r24
    25a2:	0d 90       	ld	r0, X+
    25a4:	00 20       	and	r0, r0
    25a6:	e9 f7       	brne	.-6      	; 0x25a2 <MQTT_StringSeperate+0x10>
    25a8:	11 97       	sbiw	r26, 0x01	; 1
    25aa:	a8 1b       	sub	r26, r24
    25ac:	b9 0b       	sbc	r27, r25
	for(i = 0;i<SIMCOM_ResponseLength-findlen;i++)
    25ae:	40 e0       	ldi	r20, 0x00	; 0
    25b0:	50 e0       	ldi	r21, 0x00	; 0
    25b2:	46 c0       	rjmp	.+140    	; 0x2640 <MQTT_StringSeperate+0xae>
	{
		j = 0;
		if(SubscribeDataBuff[i] == str[0] && SubscribeDataBuff[i+1] == str[1])
    25b4:	fa 01       	movw	r30, r20
    25b6:	e3 59       	subi	r30, 0x93	; 147
    25b8:	f9 4f       	sbci	r31, 0xF9	; 249
    25ba:	90 81       	ld	r25, Z
    25bc:	88 81       	ld	r24, Y
    25be:	98 13       	cpse	r25, r24
    25c0:	3d c0       	rjmp	.+122    	; 0x263c <MQTT_StringSeperate+0xaa>
    25c2:	fa 01       	movw	r30, r20
    25c4:	e2 59       	subi	r30, 0x92	; 146
    25c6:	f9 4f       	sbci	r31, 0xF9	; 249
    25c8:	90 81       	ld	r25, Z
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	98 13       	cpse	r25, r24
    25ce:	36 c0       	rjmp	.+108    	; 0x263c <MQTT_StringSeperate+0xaa>
    25d0:	2d c0       	rjmp	.+90     	; 0x262c <MQTT_StringSeperate+0x9a>
		{
			temp = i;
			while(j<findlen)
			{
				if(str[j] == SubscribeDataBuff[temp])
    25d2:	fe 01       	movw	r30, r28
    25d4:	e2 0f       	add	r30, r18
    25d6:	f3 1f       	adc	r31, r19
    25d8:	70 81       	ld	r23, Z
    25da:	f8 01       	movw	r30, r16
    25dc:	e3 59       	subi	r30, 0x93	; 147
    25de:	f9 4f       	sbci	r31, 0xF9	; 249
    25e0:	90 81       	ld	r25, Z
    25e2:	79 13       	cpse	r23, r25
    25e4:	28 c0       	rjmp	.+80     	; 0x2636 <MQTT_StringSeperate+0xa4>
				{
					count++;
    25e6:	8f ef       	ldi	r24, 0xFF	; 255
    25e8:	e8 1a       	sub	r14, r24
    25ea:	f8 0a       	sbc	r15, r24
					if(count == findlen)
    25ec:	ae 15       	cp	r26, r14
    25ee:	bf 05       	cpc	r27, r15
    25f0:	c1 f4       	brne	.+48     	; 0x2622 <MQTT_StringSeperate+0x90>
					{
						temp = temp+1;
    25f2:	0f 5f       	subi	r16, 0xFF	; 255
    25f4:	1f 4f       	sbci	r17, 0xFF	; 255
						count = 0;
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
						for(i = temp;SubscribeDataBuff[i]!=endpoint;i++)
    25fa:	08 c0       	rjmp	.+16     	; 0x260c <MQTT_StringSeperate+0x7a>
						{
							arr[count] = SubscribeDataBuff[i];
    25fc:	f9 01       	movw	r30, r18
    25fe:	ec 5e       	subi	r30, 0xEC	; 236
    2600:	fb 4f       	sbci	r31, 0xFB	; 251
    2602:	80 83       	st	Z, r24
							count++;
    2604:	2f 5f       	subi	r18, 0xFF	; 255
    2606:	3f 4f       	sbci	r19, 0xFF	; 255
					count++;
					if(count == findlen)
					{
						temp = temp+1;
						count = 0;
						for(i = temp;SubscribeDataBuff[i]!=endpoint;i++)
    2608:	0f 5f       	subi	r16, 0xFF	; 255
    260a:	1f 4f       	sbci	r17, 0xFF	; 255
    260c:	f8 01       	movw	r30, r16
    260e:	e3 59       	subi	r30, 0x93	; 147
    2610:	f9 4f       	sbci	r31, 0xF9	; 249
    2612:	80 81       	ld	r24, Z
    2614:	86 13       	cpse	r24, r22
    2616:	f2 cf       	rjmp	.-28     	; 0x25fc <MQTT_StringSeperate+0x6a>
						{
							arr[count] = SubscribeDataBuff[i];
							count++;
						}
						return atoi(arr);
    2618:	84 e1       	ldi	r24, 0x14	; 20
    261a:	94 e0       	ldi	r25, 0x04	; 4
    261c:	0e 94 dd 13 	call	0x27ba	; 0x27ba <atoi>
    2620:	19 c0       	rjmp	.+50     	; 0x2654 <MQTT_StringSeperate+0xc2>
						break;
					}
					j++;
    2622:	2f 5f       	subi	r18, 0xFF	; 255
    2624:	3f 4f       	sbci	r19, 0xFF	; 255
					temp++;
    2626:	0f 5f       	subi	r16, 0xFF	; 255
    2628:	1f 4f       	sbci	r17, 0xFF	; 255
    262a:	05 c0       	rjmp	.+10     	; 0x2636 <MQTT_StringSeperate+0xa4>
    262c:	8a 01       	movw	r16, r20
    262e:	e1 2c       	mov	r14, r1
    2630:	f1 2c       	mov	r15, r1
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	30 e0       	ldi	r19, 0x00	; 0
	{
		j = 0;
		if(SubscribeDataBuff[i] == str[0] && SubscribeDataBuff[i+1] == str[1])
		{
			temp = i;
			while(j<findlen)
    2636:	2a 17       	cp	r18, r26
    2638:	3b 07       	cpc	r19, r27
    263a:	5c f2       	brlt	.-106    	; 0x25d2 <MQTT_StringSeperate+0x40>
UBYTE MQTT_StringSeperate(char *str,char endpoint)
{
	static char arr[5];
	int i,j,findlen,count = 0,temp;
	findlen = strlen(str);
	for(i = 0;i<SIMCOM_ResponseLength-findlen;i++)
    263c:	4f 5f       	subi	r20, 0xFF	; 255
    263e:	5f 4f       	sbci	r21, 0xFF	; 255
    2640:	20 91 0b 04 	lds	r18, 0x040B	; 0x80040b <SIMCOM_ResponseLength>
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	2a 1b       	sub	r18, r26
    2648:	3b 0b       	sbc	r19, r27
    264a:	42 17       	cp	r20, r18
    264c:	53 07       	cpc	r21, r19
    264e:	0c f4       	brge	.+2      	; 0x2652 <MQTT_StringSeperate+0xc0>
    2650:	b1 cf       	rjmp	.-158    	; 0x25b4 <MQTT_StringSeperate+0x22>
			}
		}
		count=0;
	}
	
	return 0;
    2652:	80 e0       	ldi	r24, 0x00	; 0
}
    2654:	df 91       	pop	r29
    2656:	cf 91       	pop	r28
    2658:	1f 91       	pop	r17
    265a:	0f 91       	pop	r16
    265c:	ff 90       	pop	r15
    265e:	ef 90       	pop	r14
    2660:	08 95       	ret

00002662 <MQTT_AppMain>:


void MQTT_AppMain()
{
    2662:	1f 93       	push	r17
    2664:	cf 93       	push	r28
    2666:	df 93       	push	r29
    2668:	cd b7       	in	r28, 0x3d	; 61
    266a:	de b7       	in	r29, 0x3e	; 62
    266c:	2a 97       	sbiw	r28, 0x0a	; 10
    266e:	0f b6       	in	r0, 0x3f	; 63
    2670:	f8 94       	cli
    2672:	de bf       	out	0x3e, r29	; 62
    2674:	0f be       	out	0x3f, r0	; 63
    2676:	cd bf       	out	0x3d, r28	; 61
	switch(MQTTApp_State)
    2678:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <MQTTApp_State>
    267c:	83 30       	cpi	r24, 0x03	; 3
    267e:	d1 f0       	breq	.+52     	; 0x26b4 <MQTT_AppMain+0x52>
    2680:	18 f4       	brcc	.+6      	; 0x2688 <MQTT_AppMain+0x26>
    2682:	88 23       	and	r24, r24
    2684:	41 f0       	breq	.+16     	; 0x2696 <MQTT_AppMain+0x34>
    2686:	6a c0       	rjmp	.+212    	; 0x275c <MQTT_AppMain+0xfa>
    2688:	84 30       	cpi	r24, 0x04	; 4
    268a:	09 f4       	brne	.+2      	; 0x268e <MQTT_AppMain+0x2c>
    268c:	5f c0       	rjmp	.+190    	; 0x274c <MQTT_AppMain+0xea>
    268e:	85 30       	cpi	r24, 0x05	; 5
    2690:	09 f4       	brne	.+2      	; 0x2694 <MQTT_AppMain+0x32>
    2692:	53 c0       	rjmp	.+166    	; 0x273a <MQTT_AppMain+0xd8>
    2694:	63 c0       	rjmp	.+198    	; 0x275c <MQTT_AppMain+0xfa>
			
		}
		break;
		case MQTTApp_Init:
		{
			if(IsMQTT_Ready())
    2696:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <MQTT_State>
    269a:	8d 30       	cpi	r24, 0x0D	; 13
    269c:	09 f0       	breq	.+2      	; 0x26a0 <MQTT_AppMain+0x3e>
    269e:	5e c0       	rjmp	.+188    	; 0x275c <MQTT_AppMain+0xfa>
			{
				UpdatePublishdata(255);
    26a0:	8f ef       	ldi	r24, 0xFF	; 255
    26a2:	0e 94 ae 12 	call	0x255c	; 0x255c <UpdatePublishdata>
				Publish_State = MQTT_PublishTopic_Config;
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <Publish_State>
				MQTTApp_State = MQTTApp_SubMessageHandling;
    26ac:	83 e0       	ldi	r24, 0x03	; 3
    26ae:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <MQTTApp_State>
    26b2:	54 c0       	rjmp	.+168    	; 0x275c <MQTT_AppMain+0xfa>
			}
		}
		break;
		case MQTTApp_SubMessageHandling:
		{
			if(IsSubscribeMsgRecieved == TRUE)
    26b4:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <IsSubscribeMsgRecieved>
    26b8:	81 30       	cpi	r24, 0x01	; 1
    26ba:	09 f0       	breq	.+2      	; 0x26be <MQTT_AppMain+0x5c>
    26bc:	4f c0       	rjmp	.+158    	; 0x275c <MQTT_AppMain+0xfa>
			{
				IsSubscribeMsgRecieved = FALSE;
    26be:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <IsSubscribeMsgRecieved>
				UBYTE cmd = MQTT_StringSeperate("\"cmd\":",'\"');
    26c2:	62 e2       	ldi	r22, 0x22	; 34
    26c4:	8a ef       	ldi	r24, 0xFA	; 250
    26c6:	93 e0       	ldi	r25, 0x03	; 3
    26c8:	0e 94 c9 12 	call	0x2592	; 0x2592 <MQTT_StringSeperate>
    26cc:	18 2f       	mov	r17, r24
				char temp[5];
				sprintf(temp,"%d",cmd);
    26ce:	1f 92       	push	r1
    26d0:	8f 93       	push	r24
    26d2:	81 e1       	ldi	r24, 0x11	; 17
    26d4:	93 e0       	ldi	r25, 0x03	; 3
    26d6:	9f 93       	push	r25
    26d8:	8f 93       	push	r24
    26da:	ce 01       	movw	r24, r28
    26dc:	06 96       	adiw	r24, 0x06	; 6
    26de:	9f 93       	push	r25
    26e0:	8f 93       	push	r24
    26e2:	0e 94 43 14 	call	0x2886	; 0x2886 <sprintf>
				temp[4] = '\0';
    26e6:	1a 86       	std	Y+10, r1	; 0x0a
				//DebugStringRow2(temp);
				if (cmd == 255)
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	0f 90       	pop	r0
    26ee:	0f 90       	pop	r0
    26f0:	0f 90       	pop	r0
    26f2:	0f 90       	pop	r0
    26f4:	1f 3f       	cpi	r17, 0xFF	; 255
    26f6:	21 f4       	brne	.+8      	; 0x2700 <MQTT_AppMain+0x9e>
				{
					MQTTApp_State = MQTTApp_UpdateBeforeIdle;
    26f8:	85 e0       	ldi	r24, 0x05	; 5
    26fa:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <MQTTApp_State>
    26fe:	05 c0       	rjmp	.+10     	; 0x270a <MQTT_AppMain+0xa8>
				}
				else if (cmd == 1)
    2700:	11 30       	cpi	r17, 0x01	; 1
    2702:	19 f4       	brne	.+6      	; 0x270a <MQTT_AppMain+0xa8>
				{
					MQTTApp_State = MQTTApp_ReplyMsg;
    2704:	84 e0       	ldi	r24, 0x04	; 4
    2706:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <MQTTApp_State>
				{
					//Invalid data received Error
				//	PORTA = 0X00;
				//	DebugStringRow1("error");
				}
				UBYTE IO_Control = MQTT_StringSeperate("\"m1\":",'}');
    270a:	6d e7       	ldi	r22, 0x7D	; 125
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	94 e0       	ldi	r25, 0x04	; 4
    2710:	0e 94 c9 12 	call	0x2592	; 0x2592 <MQTT_StringSeperate>
				
				char temp2[5];
				sprintf(temp2,"%d",IO_Control);
    2714:	1f 92       	push	r1
    2716:	8f 93       	push	r24
    2718:	81 e1       	ldi	r24, 0x11	; 17
    271a:	93 e0       	ldi	r25, 0x03	; 3
    271c:	9f 93       	push	r25
    271e:	8f 93       	push	r24
    2720:	ce 01       	movw	r24, r28
    2722:	01 96       	adiw	r24, 0x01	; 1
    2724:	9f 93       	push	r25
    2726:	8f 93       	push	r24
    2728:	0e 94 43 14 	call	0x2886	; 0x2886 <sprintf>
    272c:	0f 90       	pop	r0
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	11 c0       	rjmp	.+34     	; 0x275c <MQTT_AppMain+0xfa>
			}
		}
		break;
		case MQTTApp_UpdateBeforeIdle:
		{
			UpdatePublishdata(0);
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	0e 94 ae 12 	call	0x255c	; 0x255c <UpdatePublishdata>
			Publish_State = MQTT_PublishTopic_Config;
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <Publish_State>
			MQTTApp_State = MQTTApp_Idle;
    2746:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <MQTTApp_State>
		}
		break;
    274a:	08 c0       	rjmp	.+16     	; 0x275c <MQTT_AppMain+0xfa>
		case MQTTApp_ReplyMsg:
		{
			UpdatePublishdata(1);
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	0e 94 ae 12 	call	0x255c	; 0x255c <UpdatePublishdata>
			Publish_State = MQTT_PublishTopic_Config;
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <Publish_State>
			MQTTApp_State = MQTTApp_Idle;
    2758:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <MQTTApp_State>
		{
			//do Nothing
			break;
		}
	}
}
    275c:	2a 96       	adiw	r28, 0x0a	; 10
    275e:	0f b6       	in	r0, 0x3f	; 63
    2760:	f8 94       	cli
    2762:	de bf       	out	0x3e, r29	; 62
    2764:	0f be       	out	0x3f, r0	; 63
    2766:	cd bf       	out	0x3d, r28	; 61
    2768:	df 91       	pop	r29
    276a:	cf 91       	pop	r28
    276c:	1f 91       	pop	r17
    276e:	08 95       	ret

00002770 <PRC_SYSOS_TASK_INIT>:
/* Define the Process calls for the Tasks */

/* Definition for the task Init */
void PRC_SYSOS_TASK_INIT(void)
{
		SIMCOM_Init();
    2770:	0e 94 50 07 	call	0xea0	; 0xea0 <SIMCOM_Init>
		UART_init();
    2774:	0e 94 94 00 	call	0x128	; 0x128 <UART_init>
		Avr_Init();
    2778:	0e 94 ba 0c 	call	0x1974	; 0x1974 <Avr_Init>
		LCD_Init();
    277c:	0e 94 8b 06 	call	0xd16	; 0xd16 <LCD_Init>
		TIM1_Init();
    2780:	0e 94 61 00 	call	0xc2	; 0xc2 <TIM1_Init>
    2784:	08 95       	ret

00002786 <PRC_SYSOS_TASK_X100>:
}

/* Definition for the task x100 */
void PRC_SYSOS_TASK_X100(void)
{
		SIMCOM_MainFunction();
    2786:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <SIMCOM_MainFunction>
    278a:	08 95       	ret

0000278c <FUN_SYS_Internal_Init>:

void FUN_SYS_Internal_Init(void)
{
	/* Initialize All the Tasks with Factor 1 as TRUE by default */

	PRC_SYSOS_TASK_INIT();
    278c:	0e 94 b8 13 	call	0x2770	; 0x2770 <PRC_SYSOS_TASK_INIT>

	SysOS_Ctrl.Isx100 = TRUE;
    2790:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <SysOS_Ctrl>
    2794:	84 60       	ori	r24, 0x04	; 4
    2796:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <SysOS_Ctrl>
    279a:	08 95       	ret

0000279c <FUN_SYS_Internal_Evaluate_Tasks_x1>:
}

void FUN_SYS_Internal_Evaluate_Tasks_x1(void)
{
    279c:	08 95       	ret

0000279e <FUN_SYS_Internal_Execute_Tasks>:
}

void FUN_SYS_Internal_Execute_Tasks(void)
{

	PRC_SYSOS_TASK_X100();
    279e:	0e 94 c3 13 	call	0x2786	; 0x2786 <PRC_SYSOS_TASK_X100>
    27a2:	08 95       	ret

000027a4 <main>:
#include <avr/interrupt.h>


int main(void)
{
	SysOs_Main();
    27a4:	0e 94 b0 0c 	call	0x1960	; 0x1960 <SysOs_Main>
}
    27a8:	80 e0       	ldi	r24, 0x00	; 0
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	08 95       	ret

000027ae <__tablejump2__>:
    27ae:	ee 0f       	add	r30, r30
    27b0:	ff 1f       	adc	r31, r31
    27b2:	05 90       	lpm	r0, Z+
    27b4:	f4 91       	lpm	r31, Z
    27b6:	e0 2d       	mov	r30, r0
    27b8:	09 94       	ijmp

000027ba <atoi>:
    27ba:	fc 01       	movw	r30, r24
    27bc:	88 27       	eor	r24, r24
    27be:	99 27       	eor	r25, r25
    27c0:	e8 94       	clt
    27c2:	21 91       	ld	r18, Z+
    27c4:	20 32       	cpi	r18, 0x20	; 32
    27c6:	e9 f3       	breq	.-6      	; 0x27c2 <atoi+0x8>
    27c8:	29 30       	cpi	r18, 0x09	; 9
    27ca:	10 f0       	brcs	.+4      	; 0x27d0 <atoi+0x16>
    27cc:	2e 30       	cpi	r18, 0x0E	; 14
    27ce:	c8 f3       	brcs	.-14     	; 0x27c2 <atoi+0x8>
    27d0:	2b 32       	cpi	r18, 0x2B	; 43
    27d2:	41 f0       	breq	.+16     	; 0x27e4 <atoi+0x2a>
    27d4:	2d 32       	cpi	r18, 0x2D	; 45
    27d6:	39 f4       	brne	.+14     	; 0x27e6 <atoi+0x2c>
    27d8:	68 94       	set
    27da:	04 c0       	rjmp	.+8      	; 0x27e4 <atoi+0x2a>
    27dc:	0e 94 3b 14 	call	0x2876	; 0x2876 <__mulhi_const_10>
    27e0:	82 0f       	add	r24, r18
    27e2:	91 1d       	adc	r25, r1
    27e4:	21 91       	ld	r18, Z+
    27e6:	20 53       	subi	r18, 0x30	; 48
    27e8:	2a 30       	cpi	r18, 0x0A	; 10
    27ea:	c0 f3       	brcs	.-16     	; 0x27dc <atoi+0x22>
    27ec:	1e f4       	brtc	.+6      	; 0x27f4 <atoi+0x3a>
    27ee:	90 95       	com	r25
    27f0:	81 95       	neg	r24
    27f2:	9f 4f       	sbci	r25, 0xFF	; 255
    27f4:	08 95       	ret

000027f6 <memcmp>:
    27f6:	fb 01       	movw	r30, r22
    27f8:	dc 01       	movw	r26, r24
    27fa:	04 c0       	rjmp	.+8      	; 0x2804 <memcmp+0xe>
    27fc:	8d 91       	ld	r24, X+
    27fe:	01 90       	ld	r0, Z+
    2800:	80 19       	sub	r24, r0
    2802:	21 f4       	brne	.+8      	; 0x280c <memcmp+0x16>
    2804:	41 50       	subi	r20, 0x01	; 1
    2806:	50 40       	sbci	r21, 0x00	; 0
    2808:	c8 f7       	brcc	.-14     	; 0x27fc <memcmp+0x6>
    280a:	88 1b       	sub	r24, r24
    280c:	99 0b       	sbc	r25, r25
    280e:	08 95       	ret

00002810 <memcpy>:
    2810:	fb 01       	movw	r30, r22
    2812:	dc 01       	movw	r26, r24
    2814:	02 c0       	rjmp	.+4      	; 0x281a <memcpy+0xa>
    2816:	01 90       	ld	r0, Z+
    2818:	0d 92       	st	X+, r0
    281a:	41 50       	subi	r20, 0x01	; 1
    281c:	50 40       	sbci	r21, 0x00	; 0
    281e:	d8 f7       	brcc	.-10     	; 0x2816 <memcpy+0x6>
    2820:	08 95       	ret

00002822 <strcmp>:
    2822:	fb 01       	movw	r30, r22
    2824:	dc 01       	movw	r26, r24
    2826:	8d 91       	ld	r24, X+
    2828:	01 90       	ld	r0, Z+
    282a:	80 19       	sub	r24, r0
    282c:	01 10       	cpse	r0, r1
    282e:	d9 f3       	breq	.-10     	; 0x2826 <strcmp+0x4>
    2830:	99 0b       	sbc	r25, r25
    2832:	08 95       	ret

00002834 <strcpy>:
    2834:	fb 01       	movw	r30, r22
    2836:	dc 01       	movw	r26, r24
    2838:	01 90       	ld	r0, Z+
    283a:	0d 92       	st	X+, r0
    283c:	00 20       	and	r0, r0
    283e:	e1 f7       	brne	.-8      	; 0x2838 <strcpy+0x4>
    2840:	08 95       	ret

00002842 <strstr>:
    2842:	fb 01       	movw	r30, r22
    2844:	51 91       	ld	r21, Z+
    2846:	55 23       	and	r21, r21
    2848:	a9 f0       	breq	.+42     	; 0x2874 <strstr+0x32>
    284a:	bf 01       	movw	r22, r30
    284c:	dc 01       	movw	r26, r24
    284e:	4d 91       	ld	r20, X+
    2850:	45 17       	cp	r20, r21
    2852:	41 11       	cpse	r20, r1
    2854:	e1 f7       	brne	.-8      	; 0x284e <strstr+0xc>
    2856:	59 f4       	brne	.+22     	; 0x286e <strstr+0x2c>
    2858:	cd 01       	movw	r24, r26
    285a:	01 90       	ld	r0, Z+
    285c:	00 20       	and	r0, r0
    285e:	49 f0       	breq	.+18     	; 0x2872 <strstr+0x30>
    2860:	4d 91       	ld	r20, X+
    2862:	40 15       	cp	r20, r0
    2864:	41 11       	cpse	r20, r1
    2866:	c9 f3       	breq	.-14     	; 0x285a <strstr+0x18>
    2868:	fb 01       	movw	r30, r22
    286a:	41 11       	cpse	r20, r1
    286c:	ef cf       	rjmp	.-34     	; 0x284c <strstr+0xa>
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	01 97       	sbiw	r24, 0x01	; 1
    2874:	08 95       	ret

00002876 <__mulhi_const_10>:
    2876:	7a e0       	ldi	r23, 0x0A	; 10
    2878:	97 9f       	mul	r25, r23
    287a:	90 2d       	mov	r25, r0
    287c:	87 9f       	mul	r24, r23
    287e:	80 2d       	mov	r24, r0
    2880:	91 0d       	add	r25, r1
    2882:	11 24       	eor	r1, r1
    2884:	08 95       	ret

00002886 <sprintf>:
    2886:	ae e0       	ldi	r26, 0x0E	; 14
    2888:	b0 e0       	ldi	r27, 0x00	; 0
    288a:	e9 e4       	ldi	r30, 0x49	; 73
    288c:	f4 e1       	ldi	r31, 0x14	; 20
    288e:	0c 94 04 17 	jmp	0x2e08	; 0x2e08 <__prologue_saves__+0x1c>
    2892:	0d 89       	ldd	r16, Y+21	; 0x15
    2894:	1e 89       	ldd	r17, Y+22	; 0x16
    2896:	86 e0       	ldi	r24, 0x06	; 6
    2898:	8c 83       	std	Y+4, r24	; 0x04
    289a:	1a 83       	std	Y+2, r17	; 0x02
    289c:	09 83       	std	Y+1, r16	; 0x01
    289e:	8f ef       	ldi	r24, 0xFF	; 255
    28a0:	9f e7       	ldi	r25, 0x7F	; 127
    28a2:	9e 83       	std	Y+6, r25	; 0x06
    28a4:	8d 83       	std	Y+5, r24	; 0x05
    28a6:	ae 01       	movw	r20, r28
    28a8:	47 5e       	subi	r20, 0xE7	; 231
    28aa:	5f 4f       	sbci	r21, 0xFF	; 255
    28ac:	6f 89       	ldd	r22, Y+23	; 0x17
    28ae:	78 8d       	ldd	r23, Y+24	; 0x18
    28b0:	ce 01       	movw	r24, r28
    28b2:	01 96       	adiw	r24, 0x01	; 1
    28b4:	0e 94 65 14 	call	0x28ca	; 0x28ca <vfprintf>
    28b8:	ef 81       	ldd	r30, Y+7	; 0x07
    28ba:	f8 85       	ldd	r31, Y+8	; 0x08
    28bc:	e0 0f       	add	r30, r16
    28be:	f1 1f       	adc	r31, r17
    28c0:	10 82       	st	Z, r1
    28c2:	2e 96       	adiw	r28, 0x0e	; 14
    28c4:	e4 e0       	ldi	r30, 0x04	; 4
    28c6:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <__epilogue_restores__+0x1c>

000028ca <vfprintf>:
    28ca:	ab e0       	ldi	r26, 0x0B	; 11
    28cc:	b0 e0       	ldi	r27, 0x00	; 0
    28ce:	eb e6       	ldi	r30, 0x6B	; 107
    28d0:	f4 e1       	ldi	r31, 0x14	; 20
    28d2:	0c 94 f6 16 	jmp	0x2dec	; 0x2dec <__prologue_saves__>
    28d6:	6c 01       	movw	r12, r24
    28d8:	7b 01       	movw	r14, r22
    28da:	8a 01       	movw	r16, r20
    28dc:	fc 01       	movw	r30, r24
    28de:	17 82       	std	Z+7, r1	; 0x07
    28e0:	16 82       	std	Z+6, r1	; 0x06
    28e2:	83 81       	ldd	r24, Z+3	; 0x03
    28e4:	81 ff       	sbrs	r24, 1
    28e6:	cc c1       	rjmp	.+920    	; 0x2c80 <vfprintf+0x3b6>
    28e8:	ce 01       	movw	r24, r28
    28ea:	01 96       	adiw	r24, 0x01	; 1
    28ec:	3c 01       	movw	r6, r24
    28ee:	f6 01       	movw	r30, r12
    28f0:	93 81       	ldd	r25, Z+3	; 0x03
    28f2:	f7 01       	movw	r30, r14
    28f4:	93 fd       	sbrc	r25, 3
    28f6:	85 91       	lpm	r24, Z+
    28f8:	93 ff       	sbrs	r25, 3
    28fa:	81 91       	ld	r24, Z+
    28fc:	7f 01       	movw	r14, r30
    28fe:	88 23       	and	r24, r24
    2900:	09 f4       	brne	.+2      	; 0x2904 <vfprintf+0x3a>
    2902:	ba c1       	rjmp	.+884    	; 0x2c78 <vfprintf+0x3ae>
    2904:	85 32       	cpi	r24, 0x25	; 37
    2906:	39 f4       	brne	.+14     	; 0x2916 <vfprintf+0x4c>
    2908:	93 fd       	sbrc	r25, 3
    290a:	85 91       	lpm	r24, Z+
    290c:	93 ff       	sbrs	r25, 3
    290e:	81 91       	ld	r24, Z+
    2910:	7f 01       	movw	r14, r30
    2912:	85 32       	cpi	r24, 0x25	; 37
    2914:	29 f4       	brne	.+10     	; 0x2920 <vfprintf+0x56>
    2916:	b6 01       	movw	r22, r12
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <fputc>
    291e:	e7 cf       	rjmp	.-50     	; 0x28ee <vfprintf+0x24>
    2920:	91 2c       	mov	r9, r1
    2922:	21 2c       	mov	r2, r1
    2924:	31 2c       	mov	r3, r1
    2926:	ff e1       	ldi	r31, 0x1F	; 31
    2928:	f3 15       	cp	r31, r3
    292a:	d8 f0       	brcs	.+54     	; 0x2962 <vfprintf+0x98>
    292c:	8b 32       	cpi	r24, 0x2B	; 43
    292e:	79 f0       	breq	.+30     	; 0x294e <vfprintf+0x84>
    2930:	38 f4       	brcc	.+14     	; 0x2940 <vfprintf+0x76>
    2932:	80 32       	cpi	r24, 0x20	; 32
    2934:	79 f0       	breq	.+30     	; 0x2954 <vfprintf+0x8a>
    2936:	83 32       	cpi	r24, 0x23	; 35
    2938:	a1 f4       	brne	.+40     	; 0x2962 <vfprintf+0x98>
    293a:	23 2d       	mov	r18, r3
    293c:	20 61       	ori	r18, 0x10	; 16
    293e:	1d c0       	rjmp	.+58     	; 0x297a <vfprintf+0xb0>
    2940:	8d 32       	cpi	r24, 0x2D	; 45
    2942:	61 f0       	breq	.+24     	; 0x295c <vfprintf+0x92>
    2944:	80 33       	cpi	r24, 0x30	; 48
    2946:	69 f4       	brne	.+26     	; 0x2962 <vfprintf+0x98>
    2948:	23 2d       	mov	r18, r3
    294a:	21 60       	ori	r18, 0x01	; 1
    294c:	16 c0       	rjmp	.+44     	; 0x297a <vfprintf+0xb0>
    294e:	83 2d       	mov	r24, r3
    2950:	82 60       	ori	r24, 0x02	; 2
    2952:	38 2e       	mov	r3, r24
    2954:	e3 2d       	mov	r30, r3
    2956:	e4 60       	ori	r30, 0x04	; 4
    2958:	3e 2e       	mov	r3, r30
    295a:	2a c0       	rjmp	.+84     	; 0x29b0 <vfprintf+0xe6>
    295c:	f3 2d       	mov	r31, r3
    295e:	f8 60       	ori	r31, 0x08	; 8
    2960:	1d c0       	rjmp	.+58     	; 0x299c <vfprintf+0xd2>
    2962:	37 fc       	sbrc	r3, 7
    2964:	2d c0       	rjmp	.+90     	; 0x29c0 <vfprintf+0xf6>
    2966:	20 ed       	ldi	r18, 0xD0	; 208
    2968:	28 0f       	add	r18, r24
    296a:	2a 30       	cpi	r18, 0x0A	; 10
    296c:	40 f0       	brcs	.+16     	; 0x297e <vfprintf+0xb4>
    296e:	8e 32       	cpi	r24, 0x2E	; 46
    2970:	b9 f4       	brne	.+46     	; 0x29a0 <vfprintf+0xd6>
    2972:	36 fc       	sbrc	r3, 6
    2974:	81 c1       	rjmp	.+770    	; 0x2c78 <vfprintf+0x3ae>
    2976:	23 2d       	mov	r18, r3
    2978:	20 64       	ori	r18, 0x40	; 64
    297a:	32 2e       	mov	r3, r18
    297c:	19 c0       	rjmp	.+50     	; 0x29b0 <vfprintf+0xe6>
    297e:	36 fe       	sbrs	r3, 6
    2980:	06 c0       	rjmp	.+12     	; 0x298e <vfprintf+0xc4>
    2982:	8a e0       	ldi	r24, 0x0A	; 10
    2984:	98 9e       	mul	r9, r24
    2986:	20 0d       	add	r18, r0
    2988:	11 24       	eor	r1, r1
    298a:	92 2e       	mov	r9, r18
    298c:	11 c0       	rjmp	.+34     	; 0x29b0 <vfprintf+0xe6>
    298e:	ea e0       	ldi	r30, 0x0A	; 10
    2990:	2e 9e       	mul	r2, r30
    2992:	20 0d       	add	r18, r0
    2994:	11 24       	eor	r1, r1
    2996:	22 2e       	mov	r2, r18
    2998:	f3 2d       	mov	r31, r3
    299a:	f0 62       	ori	r31, 0x20	; 32
    299c:	3f 2e       	mov	r3, r31
    299e:	08 c0       	rjmp	.+16     	; 0x29b0 <vfprintf+0xe6>
    29a0:	8c 36       	cpi	r24, 0x6C	; 108
    29a2:	21 f4       	brne	.+8      	; 0x29ac <vfprintf+0xe2>
    29a4:	83 2d       	mov	r24, r3
    29a6:	80 68       	ori	r24, 0x80	; 128
    29a8:	38 2e       	mov	r3, r24
    29aa:	02 c0       	rjmp	.+4      	; 0x29b0 <vfprintf+0xe6>
    29ac:	88 36       	cpi	r24, 0x68	; 104
    29ae:	41 f4       	brne	.+16     	; 0x29c0 <vfprintf+0xf6>
    29b0:	f7 01       	movw	r30, r14
    29b2:	93 fd       	sbrc	r25, 3
    29b4:	85 91       	lpm	r24, Z+
    29b6:	93 ff       	sbrs	r25, 3
    29b8:	81 91       	ld	r24, Z+
    29ba:	7f 01       	movw	r14, r30
    29bc:	81 11       	cpse	r24, r1
    29be:	b3 cf       	rjmp	.-154    	; 0x2926 <vfprintf+0x5c>
    29c0:	98 2f       	mov	r25, r24
    29c2:	9f 7d       	andi	r25, 0xDF	; 223
    29c4:	95 54       	subi	r25, 0x45	; 69
    29c6:	93 30       	cpi	r25, 0x03	; 3
    29c8:	28 f4       	brcc	.+10     	; 0x29d4 <vfprintf+0x10a>
    29ca:	0c 5f       	subi	r16, 0xFC	; 252
    29cc:	1f 4f       	sbci	r17, 0xFF	; 255
    29ce:	9f e3       	ldi	r25, 0x3F	; 63
    29d0:	99 83       	std	Y+1, r25	; 0x01
    29d2:	0d c0       	rjmp	.+26     	; 0x29ee <vfprintf+0x124>
    29d4:	83 36       	cpi	r24, 0x63	; 99
    29d6:	31 f0       	breq	.+12     	; 0x29e4 <vfprintf+0x11a>
    29d8:	83 37       	cpi	r24, 0x73	; 115
    29da:	71 f0       	breq	.+28     	; 0x29f8 <vfprintf+0x12e>
    29dc:	83 35       	cpi	r24, 0x53	; 83
    29de:	09 f0       	breq	.+2      	; 0x29e2 <vfprintf+0x118>
    29e0:	59 c0       	rjmp	.+178    	; 0x2a94 <vfprintf+0x1ca>
    29e2:	21 c0       	rjmp	.+66     	; 0x2a26 <vfprintf+0x15c>
    29e4:	f8 01       	movw	r30, r16
    29e6:	80 81       	ld	r24, Z
    29e8:	89 83       	std	Y+1, r24	; 0x01
    29ea:	0e 5f       	subi	r16, 0xFE	; 254
    29ec:	1f 4f       	sbci	r17, 0xFF	; 255
    29ee:	88 24       	eor	r8, r8
    29f0:	83 94       	inc	r8
    29f2:	91 2c       	mov	r9, r1
    29f4:	53 01       	movw	r10, r6
    29f6:	13 c0       	rjmp	.+38     	; 0x2a1e <vfprintf+0x154>
    29f8:	28 01       	movw	r4, r16
    29fa:	f2 e0       	ldi	r31, 0x02	; 2
    29fc:	4f 0e       	add	r4, r31
    29fe:	51 1c       	adc	r5, r1
    2a00:	f8 01       	movw	r30, r16
    2a02:	a0 80       	ld	r10, Z
    2a04:	b1 80       	ldd	r11, Z+1	; 0x01
    2a06:	36 fe       	sbrs	r3, 6
    2a08:	03 c0       	rjmp	.+6      	; 0x2a10 <vfprintf+0x146>
    2a0a:	69 2d       	mov	r22, r9
    2a0c:	70 e0       	ldi	r23, 0x00	; 0
    2a0e:	02 c0       	rjmp	.+4      	; 0x2a14 <vfprintf+0x14a>
    2a10:	6f ef       	ldi	r22, 0xFF	; 255
    2a12:	7f ef       	ldi	r23, 0xFF	; 255
    2a14:	c5 01       	movw	r24, r10
    2a16:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <strnlen>
    2a1a:	4c 01       	movw	r8, r24
    2a1c:	82 01       	movw	r16, r4
    2a1e:	f3 2d       	mov	r31, r3
    2a20:	ff 77       	andi	r31, 0x7F	; 127
    2a22:	3f 2e       	mov	r3, r31
    2a24:	16 c0       	rjmp	.+44     	; 0x2a52 <vfprintf+0x188>
    2a26:	28 01       	movw	r4, r16
    2a28:	22 e0       	ldi	r18, 0x02	; 2
    2a2a:	42 0e       	add	r4, r18
    2a2c:	51 1c       	adc	r5, r1
    2a2e:	f8 01       	movw	r30, r16
    2a30:	a0 80       	ld	r10, Z
    2a32:	b1 80       	ldd	r11, Z+1	; 0x01
    2a34:	36 fe       	sbrs	r3, 6
    2a36:	03 c0       	rjmp	.+6      	; 0x2a3e <vfprintf+0x174>
    2a38:	69 2d       	mov	r22, r9
    2a3a:	70 e0       	ldi	r23, 0x00	; 0
    2a3c:	02 c0       	rjmp	.+4      	; 0x2a42 <vfprintf+0x178>
    2a3e:	6f ef       	ldi	r22, 0xFF	; 255
    2a40:	7f ef       	ldi	r23, 0xFF	; 255
    2a42:	c5 01       	movw	r24, r10
    2a44:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <strnlen_P>
    2a48:	4c 01       	movw	r8, r24
    2a4a:	f3 2d       	mov	r31, r3
    2a4c:	f0 68       	ori	r31, 0x80	; 128
    2a4e:	3f 2e       	mov	r3, r31
    2a50:	82 01       	movw	r16, r4
    2a52:	33 fc       	sbrc	r3, 3
    2a54:	1b c0       	rjmp	.+54     	; 0x2a8c <vfprintf+0x1c2>
    2a56:	82 2d       	mov	r24, r2
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	88 16       	cp	r8, r24
    2a5c:	99 06       	cpc	r9, r25
    2a5e:	b0 f4       	brcc	.+44     	; 0x2a8c <vfprintf+0x1c2>
    2a60:	b6 01       	movw	r22, r12
    2a62:	80 e2       	ldi	r24, 0x20	; 32
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <fputc>
    2a6a:	2a 94       	dec	r2
    2a6c:	f4 cf       	rjmp	.-24     	; 0x2a56 <vfprintf+0x18c>
    2a6e:	f5 01       	movw	r30, r10
    2a70:	37 fc       	sbrc	r3, 7
    2a72:	85 91       	lpm	r24, Z+
    2a74:	37 fe       	sbrs	r3, 7
    2a76:	81 91       	ld	r24, Z+
    2a78:	5f 01       	movw	r10, r30
    2a7a:	b6 01       	movw	r22, r12
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <fputc>
    2a82:	21 10       	cpse	r2, r1
    2a84:	2a 94       	dec	r2
    2a86:	21 e0       	ldi	r18, 0x01	; 1
    2a88:	82 1a       	sub	r8, r18
    2a8a:	91 08       	sbc	r9, r1
    2a8c:	81 14       	cp	r8, r1
    2a8e:	91 04       	cpc	r9, r1
    2a90:	71 f7       	brne	.-36     	; 0x2a6e <vfprintf+0x1a4>
    2a92:	e8 c0       	rjmp	.+464    	; 0x2c64 <vfprintf+0x39a>
    2a94:	84 36       	cpi	r24, 0x64	; 100
    2a96:	11 f0       	breq	.+4      	; 0x2a9c <vfprintf+0x1d2>
    2a98:	89 36       	cpi	r24, 0x69	; 105
    2a9a:	41 f5       	brne	.+80     	; 0x2aec <vfprintf+0x222>
    2a9c:	f8 01       	movw	r30, r16
    2a9e:	37 fe       	sbrs	r3, 7
    2aa0:	07 c0       	rjmp	.+14     	; 0x2ab0 <vfprintf+0x1e6>
    2aa2:	60 81       	ld	r22, Z
    2aa4:	71 81       	ldd	r23, Z+1	; 0x01
    2aa6:	82 81       	ldd	r24, Z+2	; 0x02
    2aa8:	93 81       	ldd	r25, Z+3	; 0x03
    2aaa:	0c 5f       	subi	r16, 0xFC	; 252
    2aac:	1f 4f       	sbci	r17, 0xFF	; 255
    2aae:	08 c0       	rjmp	.+16     	; 0x2ac0 <vfprintf+0x1f6>
    2ab0:	60 81       	ld	r22, Z
    2ab2:	71 81       	ldd	r23, Z+1	; 0x01
    2ab4:	07 2e       	mov	r0, r23
    2ab6:	00 0c       	add	r0, r0
    2ab8:	88 0b       	sbc	r24, r24
    2aba:	99 0b       	sbc	r25, r25
    2abc:	0e 5f       	subi	r16, 0xFE	; 254
    2abe:	1f 4f       	sbci	r17, 0xFF	; 255
    2ac0:	f3 2d       	mov	r31, r3
    2ac2:	ff 76       	andi	r31, 0x6F	; 111
    2ac4:	3f 2e       	mov	r3, r31
    2ac6:	97 ff       	sbrs	r25, 7
    2ac8:	09 c0       	rjmp	.+18     	; 0x2adc <vfprintf+0x212>
    2aca:	90 95       	com	r25
    2acc:	80 95       	com	r24
    2ace:	70 95       	com	r23
    2ad0:	61 95       	neg	r22
    2ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad4:	8f 4f       	sbci	r24, 0xFF	; 255
    2ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad8:	f0 68       	ori	r31, 0x80	; 128
    2ada:	3f 2e       	mov	r3, r31
    2adc:	2a e0       	ldi	r18, 0x0A	; 10
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	a3 01       	movw	r20, r6
    2ae2:	0e 94 98 16 	call	0x2d30	; 0x2d30 <__ultoa_invert>
    2ae6:	88 2e       	mov	r8, r24
    2ae8:	86 18       	sub	r8, r6
    2aea:	45 c0       	rjmp	.+138    	; 0x2b76 <vfprintf+0x2ac>
    2aec:	85 37       	cpi	r24, 0x75	; 117
    2aee:	31 f4       	brne	.+12     	; 0x2afc <vfprintf+0x232>
    2af0:	23 2d       	mov	r18, r3
    2af2:	2f 7e       	andi	r18, 0xEF	; 239
    2af4:	b2 2e       	mov	r11, r18
    2af6:	2a e0       	ldi	r18, 0x0A	; 10
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	25 c0       	rjmp	.+74     	; 0x2b46 <vfprintf+0x27c>
    2afc:	93 2d       	mov	r25, r3
    2afe:	99 7f       	andi	r25, 0xF9	; 249
    2b00:	b9 2e       	mov	r11, r25
    2b02:	8f 36       	cpi	r24, 0x6F	; 111
    2b04:	c1 f0       	breq	.+48     	; 0x2b36 <vfprintf+0x26c>
    2b06:	18 f4       	brcc	.+6      	; 0x2b0e <vfprintf+0x244>
    2b08:	88 35       	cpi	r24, 0x58	; 88
    2b0a:	79 f0       	breq	.+30     	; 0x2b2a <vfprintf+0x260>
    2b0c:	b5 c0       	rjmp	.+362    	; 0x2c78 <vfprintf+0x3ae>
    2b0e:	80 37       	cpi	r24, 0x70	; 112
    2b10:	19 f0       	breq	.+6      	; 0x2b18 <vfprintf+0x24e>
    2b12:	88 37       	cpi	r24, 0x78	; 120
    2b14:	21 f0       	breq	.+8      	; 0x2b1e <vfprintf+0x254>
    2b16:	b0 c0       	rjmp	.+352    	; 0x2c78 <vfprintf+0x3ae>
    2b18:	e9 2f       	mov	r30, r25
    2b1a:	e0 61       	ori	r30, 0x10	; 16
    2b1c:	be 2e       	mov	r11, r30
    2b1e:	b4 fe       	sbrs	r11, 4
    2b20:	0d c0       	rjmp	.+26     	; 0x2b3c <vfprintf+0x272>
    2b22:	fb 2d       	mov	r31, r11
    2b24:	f4 60       	ori	r31, 0x04	; 4
    2b26:	bf 2e       	mov	r11, r31
    2b28:	09 c0       	rjmp	.+18     	; 0x2b3c <vfprintf+0x272>
    2b2a:	34 fe       	sbrs	r3, 4
    2b2c:	0a c0       	rjmp	.+20     	; 0x2b42 <vfprintf+0x278>
    2b2e:	29 2f       	mov	r18, r25
    2b30:	26 60       	ori	r18, 0x06	; 6
    2b32:	b2 2e       	mov	r11, r18
    2b34:	06 c0       	rjmp	.+12     	; 0x2b42 <vfprintf+0x278>
    2b36:	28 e0       	ldi	r18, 0x08	; 8
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	05 c0       	rjmp	.+10     	; 0x2b46 <vfprintf+0x27c>
    2b3c:	20 e1       	ldi	r18, 0x10	; 16
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	02 c0       	rjmp	.+4      	; 0x2b46 <vfprintf+0x27c>
    2b42:	20 e1       	ldi	r18, 0x10	; 16
    2b44:	32 e0       	ldi	r19, 0x02	; 2
    2b46:	f8 01       	movw	r30, r16
    2b48:	b7 fe       	sbrs	r11, 7
    2b4a:	07 c0       	rjmp	.+14     	; 0x2b5a <vfprintf+0x290>
    2b4c:	60 81       	ld	r22, Z
    2b4e:	71 81       	ldd	r23, Z+1	; 0x01
    2b50:	82 81       	ldd	r24, Z+2	; 0x02
    2b52:	93 81       	ldd	r25, Z+3	; 0x03
    2b54:	0c 5f       	subi	r16, 0xFC	; 252
    2b56:	1f 4f       	sbci	r17, 0xFF	; 255
    2b58:	06 c0       	rjmp	.+12     	; 0x2b66 <vfprintf+0x29c>
    2b5a:	60 81       	ld	r22, Z
    2b5c:	71 81       	ldd	r23, Z+1	; 0x01
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	0e 5f       	subi	r16, 0xFE	; 254
    2b64:	1f 4f       	sbci	r17, 0xFF	; 255
    2b66:	a3 01       	movw	r20, r6
    2b68:	0e 94 98 16 	call	0x2d30	; 0x2d30 <__ultoa_invert>
    2b6c:	88 2e       	mov	r8, r24
    2b6e:	86 18       	sub	r8, r6
    2b70:	fb 2d       	mov	r31, r11
    2b72:	ff 77       	andi	r31, 0x7F	; 127
    2b74:	3f 2e       	mov	r3, r31
    2b76:	36 fe       	sbrs	r3, 6
    2b78:	0d c0       	rjmp	.+26     	; 0x2b94 <vfprintf+0x2ca>
    2b7a:	23 2d       	mov	r18, r3
    2b7c:	2e 7f       	andi	r18, 0xFE	; 254
    2b7e:	a2 2e       	mov	r10, r18
    2b80:	89 14       	cp	r8, r9
    2b82:	58 f4       	brcc	.+22     	; 0x2b9a <vfprintf+0x2d0>
    2b84:	34 fe       	sbrs	r3, 4
    2b86:	0b c0       	rjmp	.+22     	; 0x2b9e <vfprintf+0x2d4>
    2b88:	32 fc       	sbrc	r3, 2
    2b8a:	09 c0       	rjmp	.+18     	; 0x2b9e <vfprintf+0x2d4>
    2b8c:	83 2d       	mov	r24, r3
    2b8e:	8e 7e       	andi	r24, 0xEE	; 238
    2b90:	a8 2e       	mov	r10, r24
    2b92:	05 c0       	rjmp	.+10     	; 0x2b9e <vfprintf+0x2d4>
    2b94:	b8 2c       	mov	r11, r8
    2b96:	a3 2c       	mov	r10, r3
    2b98:	03 c0       	rjmp	.+6      	; 0x2ba0 <vfprintf+0x2d6>
    2b9a:	b8 2c       	mov	r11, r8
    2b9c:	01 c0       	rjmp	.+2      	; 0x2ba0 <vfprintf+0x2d6>
    2b9e:	b9 2c       	mov	r11, r9
    2ba0:	a4 fe       	sbrs	r10, 4
    2ba2:	0f c0       	rjmp	.+30     	; 0x2bc2 <vfprintf+0x2f8>
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	e8 0d       	add	r30, r8
    2ba8:	f1 1d       	adc	r31, r1
    2baa:	80 81       	ld	r24, Z
    2bac:	80 33       	cpi	r24, 0x30	; 48
    2bae:	21 f4       	brne	.+8      	; 0x2bb8 <vfprintf+0x2ee>
    2bb0:	9a 2d       	mov	r25, r10
    2bb2:	99 7e       	andi	r25, 0xE9	; 233
    2bb4:	a9 2e       	mov	r10, r25
    2bb6:	09 c0       	rjmp	.+18     	; 0x2bca <vfprintf+0x300>
    2bb8:	a2 fe       	sbrs	r10, 2
    2bba:	06 c0       	rjmp	.+12     	; 0x2bc8 <vfprintf+0x2fe>
    2bbc:	b3 94       	inc	r11
    2bbe:	b3 94       	inc	r11
    2bc0:	04 c0       	rjmp	.+8      	; 0x2bca <vfprintf+0x300>
    2bc2:	8a 2d       	mov	r24, r10
    2bc4:	86 78       	andi	r24, 0x86	; 134
    2bc6:	09 f0       	breq	.+2      	; 0x2bca <vfprintf+0x300>
    2bc8:	b3 94       	inc	r11
    2bca:	a3 fc       	sbrc	r10, 3
    2bcc:	11 c0       	rjmp	.+34     	; 0x2bf0 <vfprintf+0x326>
    2bce:	a0 fe       	sbrs	r10, 0
    2bd0:	06 c0       	rjmp	.+12     	; 0x2bde <vfprintf+0x314>
    2bd2:	b2 14       	cp	r11, r2
    2bd4:	88 f4       	brcc	.+34     	; 0x2bf8 <vfprintf+0x32e>
    2bd6:	28 0c       	add	r2, r8
    2bd8:	92 2c       	mov	r9, r2
    2bda:	9b 18       	sub	r9, r11
    2bdc:	0e c0       	rjmp	.+28     	; 0x2bfa <vfprintf+0x330>
    2bde:	b2 14       	cp	r11, r2
    2be0:	60 f4       	brcc	.+24     	; 0x2bfa <vfprintf+0x330>
    2be2:	b6 01       	movw	r22, r12
    2be4:	80 e2       	ldi	r24, 0x20	; 32
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <fputc>
    2bec:	b3 94       	inc	r11
    2bee:	f7 cf       	rjmp	.-18     	; 0x2bde <vfprintf+0x314>
    2bf0:	b2 14       	cp	r11, r2
    2bf2:	18 f4       	brcc	.+6      	; 0x2bfa <vfprintf+0x330>
    2bf4:	2b 18       	sub	r2, r11
    2bf6:	02 c0       	rjmp	.+4      	; 0x2bfc <vfprintf+0x332>
    2bf8:	98 2c       	mov	r9, r8
    2bfa:	21 2c       	mov	r2, r1
    2bfc:	a4 fe       	sbrs	r10, 4
    2bfe:	10 c0       	rjmp	.+32     	; 0x2c20 <vfprintf+0x356>
    2c00:	b6 01       	movw	r22, r12
    2c02:	80 e3       	ldi	r24, 0x30	; 48
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <fputc>
    2c0a:	a2 fe       	sbrs	r10, 2
    2c0c:	17 c0       	rjmp	.+46     	; 0x2c3c <vfprintf+0x372>
    2c0e:	a1 fc       	sbrc	r10, 1
    2c10:	03 c0       	rjmp	.+6      	; 0x2c18 <vfprintf+0x34e>
    2c12:	88 e7       	ldi	r24, 0x78	; 120
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	02 c0       	rjmp	.+4      	; 0x2c1c <vfprintf+0x352>
    2c18:	88 e5       	ldi	r24, 0x58	; 88
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	b6 01       	movw	r22, r12
    2c1e:	0c c0       	rjmp	.+24     	; 0x2c38 <vfprintf+0x36e>
    2c20:	8a 2d       	mov	r24, r10
    2c22:	86 78       	andi	r24, 0x86	; 134
    2c24:	59 f0       	breq	.+22     	; 0x2c3c <vfprintf+0x372>
    2c26:	a1 fe       	sbrs	r10, 1
    2c28:	02 c0       	rjmp	.+4      	; 0x2c2e <vfprintf+0x364>
    2c2a:	8b e2       	ldi	r24, 0x2B	; 43
    2c2c:	01 c0       	rjmp	.+2      	; 0x2c30 <vfprintf+0x366>
    2c2e:	80 e2       	ldi	r24, 0x20	; 32
    2c30:	a7 fc       	sbrc	r10, 7
    2c32:	8d e2       	ldi	r24, 0x2D	; 45
    2c34:	b6 01       	movw	r22, r12
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <fputc>
    2c3c:	89 14       	cp	r8, r9
    2c3e:	38 f4       	brcc	.+14     	; 0x2c4e <vfprintf+0x384>
    2c40:	b6 01       	movw	r22, r12
    2c42:	80 e3       	ldi	r24, 0x30	; 48
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <fputc>
    2c4a:	9a 94       	dec	r9
    2c4c:	f7 cf       	rjmp	.-18     	; 0x2c3c <vfprintf+0x372>
    2c4e:	8a 94       	dec	r8
    2c50:	f3 01       	movw	r30, r6
    2c52:	e8 0d       	add	r30, r8
    2c54:	f1 1d       	adc	r31, r1
    2c56:	80 81       	ld	r24, Z
    2c58:	b6 01       	movw	r22, r12
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <fputc>
    2c60:	81 10       	cpse	r8, r1
    2c62:	f5 cf       	rjmp	.-22     	; 0x2c4e <vfprintf+0x384>
    2c64:	22 20       	and	r2, r2
    2c66:	09 f4       	brne	.+2      	; 0x2c6a <vfprintf+0x3a0>
    2c68:	42 ce       	rjmp	.-892    	; 0x28ee <vfprintf+0x24>
    2c6a:	b6 01       	movw	r22, r12
    2c6c:	80 e2       	ldi	r24, 0x20	; 32
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <fputc>
    2c74:	2a 94       	dec	r2
    2c76:	f6 cf       	rjmp	.-20     	; 0x2c64 <vfprintf+0x39a>
    2c78:	f6 01       	movw	r30, r12
    2c7a:	86 81       	ldd	r24, Z+6	; 0x06
    2c7c:	97 81       	ldd	r25, Z+7	; 0x07
    2c7e:	02 c0       	rjmp	.+4      	; 0x2c84 <vfprintf+0x3ba>
    2c80:	8f ef       	ldi	r24, 0xFF	; 255
    2c82:	9f ef       	ldi	r25, 0xFF	; 255
    2c84:	2b 96       	adiw	r28, 0x0b	; 11
    2c86:	e2 e1       	ldi	r30, 0x12	; 18
    2c88:	0c 94 12 17 	jmp	0x2e24	; 0x2e24 <__epilogue_restores__>

00002c8c <strnlen_P>:
    2c8c:	fc 01       	movw	r30, r24
    2c8e:	05 90       	lpm	r0, Z+
    2c90:	61 50       	subi	r22, 0x01	; 1
    2c92:	70 40       	sbci	r23, 0x00	; 0
    2c94:	01 10       	cpse	r0, r1
    2c96:	d8 f7       	brcc	.-10     	; 0x2c8e <strnlen_P+0x2>
    2c98:	80 95       	com	r24
    2c9a:	90 95       	com	r25
    2c9c:	8e 0f       	add	r24, r30
    2c9e:	9f 1f       	adc	r25, r31
    2ca0:	08 95       	ret

00002ca2 <strnlen>:
    2ca2:	fc 01       	movw	r30, r24
    2ca4:	61 50       	subi	r22, 0x01	; 1
    2ca6:	70 40       	sbci	r23, 0x00	; 0
    2ca8:	01 90       	ld	r0, Z+
    2caa:	01 10       	cpse	r0, r1
    2cac:	d8 f7       	brcc	.-10     	; 0x2ca4 <strnlen+0x2>
    2cae:	80 95       	com	r24
    2cb0:	90 95       	com	r25
    2cb2:	8e 0f       	add	r24, r30
    2cb4:	9f 1f       	adc	r25, r31
    2cb6:	08 95       	ret

00002cb8 <fputc>:
    2cb8:	0f 93       	push	r16
    2cba:	1f 93       	push	r17
    2cbc:	cf 93       	push	r28
    2cbe:	df 93       	push	r29
    2cc0:	fb 01       	movw	r30, r22
    2cc2:	23 81       	ldd	r18, Z+3	; 0x03
    2cc4:	21 fd       	sbrc	r18, 1
    2cc6:	03 c0       	rjmp	.+6      	; 0x2cce <fputc+0x16>
    2cc8:	8f ef       	ldi	r24, 0xFF	; 255
    2cca:	9f ef       	ldi	r25, 0xFF	; 255
    2ccc:	2c c0       	rjmp	.+88     	; 0x2d26 <fputc+0x6e>
    2cce:	22 ff       	sbrs	r18, 2
    2cd0:	16 c0       	rjmp	.+44     	; 0x2cfe <fputc+0x46>
    2cd2:	46 81       	ldd	r20, Z+6	; 0x06
    2cd4:	57 81       	ldd	r21, Z+7	; 0x07
    2cd6:	24 81       	ldd	r18, Z+4	; 0x04
    2cd8:	35 81       	ldd	r19, Z+5	; 0x05
    2cda:	42 17       	cp	r20, r18
    2cdc:	53 07       	cpc	r21, r19
    2cde:	44 f4       	brge	.+16     	; 0x2cf0 <fputc+0x38>
    2ce0:	a0 81       	ld	r26, Z
    2ce2:	b1 81       	ldd	r27, Z+1	; 0x01
    2ce4:	9d 01       	movw	r18, r26
    2ce6:	2f 5f       	subi	r18, 0xFF	; 255
    2ce8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cea:	31 83       	std	Z+1, r19	; 0x01
    2cec:	20 83       	st	Z, r18
    2cee:	8c 93       	st	X, r24
    2cf0:	26 81       	ldd	r18, Z+6	; 0x06
    2cf2:	37 81       	ldd	r19, Z+7	; 0x07
    2cf4:	2f 5f       	subi	r18, 0xFF	; 255
    2cf6:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf8:	37 83       	std	Z+7, r19	; 0x07
    2cfa:	26 83       	std	Z+6, r18	; 0x06
    2cfc:	14 c0       	rjmp	.+40     	; 0x2d26 <fputc+0x6e>
    2cfe:	8b 01       	movw	r16, r22
    2d00:	ec 01       	movw	r28, r24
    2d02:	fb 01       	movw	r30, r22
    2d04:	00 84       	ldd	r0, Z+8	; 0x08
    2d06:	f1 85       	ldd	r31, Z+9	; 0x09
    2d08:	e0 2d       	mov	r30, r0
    2d0a:	09 95       	icall
    2d0c:	89 2b       	or	r24, r25
    2d0e:	e1 f6       	brne	.-72     	; 0x2cc8 <fputc+0x10>
    2d10:	d8 01       	movw	r26, r16
    2d12:	16 96       	adiw	r26, 0x06	; 6
    2d14:	8d 91       	ld	r24, X+
    2d16:	9c 91       	ld	r25, X
    2d18:	17 97       	sbiw	r26, 0x07	; 7
    2d1a:	01 96       	adiw	r24, 0x01	; 1
    2d1c:	17 96       	adiw	r26, 0x07	; 7
    2d1e:	9c 93       	st	X, r25
    2d20:	8e 93       	st	-X, r24
    2d22:	16 97       	sbiw	r26, 0x06	; 6
    2d24:	ce 01       	movw	r24, r28
    2d26:	df 91       	pop	r29
    2d28:	cf 91       	pop	r28
    2d2a:	1f 91       	pop	r17
    2d2c:	0f 91       	pop	r16
    2d2e:	08 95       	ret

00002d30 <__ultoa_invert>:
    2d30:	fa 01       	movw	r30, r20
    2d32:	aa 27       	eor	r26, r26
    2d34:	28 30       	cpi	r18, 0x08	; 8
    2d36:	51 f1       	breq	.+84     	; 0x2d8c <__ultoa_invert+0x5c>
    2d38:	20 31       	cpi	r18, 0x10	; 16
    2d3a:	81 f1       	breq	.+96     	; 0x2d9c <__ultoa_invert+0x6c>
    2d3c:	e8 94       	clt
    2d3e:	6f 93       	push	r22
    2d40:	6e 7f       	andi	r22, 0xFE	; 254
    2d42:	6e 5f       	subi	r22, 0xFE	; 254
    2d44:	7f 4f       	sbci	r23, 0xFF	; 255
    2d46:	8f 4f       	sbci	r24, 0xFF	; 255
    2d48:	9f 4f       	sbci	r25, 0xFF	; 255
    2d4a:	af 4f       	sbci	r26, 0xFF	; 255
    2d4c:	b1 e0       	ldi	r27, 0x01	; 1
    2d4e:	3e d0       	rcall	.+124    	; 0x2dcc <__ultoa_invert+0x9c>
    2d50:	b4 e0       	ldi	r27, 0x04	; 4
    2d52:	3c d0       	rcall	.+120    	; 0x2dcc <__ultoa_invert+0x9c>
    2d54:	67 0f       	add	r22, r23
    2d56:	78 1f       	adc	r23, r24
    2d58:	89 1f       	adc	r24, r25
    2d5a:	9a 1f       	adc	r25, r26
    2d5c:	a1 1d       	adc	r26, r1
    2d5e:	68 0f       	add	r22, r24
    2d60:	79 1f       	adc	r23, r25
    2d62:	8a 1f       	adc	r24, r26
    2d64:	91 1d       	adc	r25, r1
    2d66:	a1 1d       	adc	r26, r1
    2d68:	6a 0f       	add	r22, r26
    2d6a:	71 1d       	adc	r23, r1
    2d6c:	81 1d       	adc	r24, r1
    2d6e:	91 1d       	adc	r25, r1
    2d70:	a1 1d       	adc	r26, r1
    2d72:	20 d0       	rcall	.+64     	; 0x2db4 <__ultoa_invert+0x84>
    2d74:	09 f4       	brne	.+2      	; 0x2d78 <__ultoa_invert+0x48>
    2d76:	68 94       	set
    2d78:	3f 91       	pop	r19
    2d7a:	2a e0       	ldi	r18, 0x0A	; 10
    2d7c:	26 9f       	mul	r18, r22
    2d7e:	11 24       	eor	r1, r1
    2d80:	30 19       	sub	r19, r0
    2d82:	30 5d       	subi	r19, 0xD0	; 208
    2d84:	31 93       	st	Z+, r19
    2d86:	de f6       	brtc	.-74     	; 0x2d3e <__ultoa_invert+0xe>
    2d88:	cf 01       	movw	r24, r30
    2d8a:	08 95       	ret
    2d8c:	46 2f       	mov	r20, r22
    2d8e:	47 70       	andi	r20, 0x07	; 7
    2d90:	40 5d       	subi	r20, 0xD0	; 208
    2d92:	41 93       	st	Z+, r20
    2d94:	b3 e0       	ldi	r27, 0x03	; 3
    2d96:	0f d0       	rcall	.+30     	; 0x2db6 <__ultoa_invert+0x86>
    2d98:	c9 f7       	brne	.-14     	; 0x2d8c <__ultoa_invert+0x5c>
    2d9a:	f6 cf       	rjmp	.-20     	; 0x2d88 <__ultoa_invert+0x58>
    2d9c:	46 2f       	mov	r20, r22
    2d9e:	4f 70       	andi	r20, 0x0F	; 15
    2da0:	40 5d       	subi	r20, 0xD0	; 208
    2da2:	4a 33       	cpi	r20, 0x3A	; 58
    2da4:	18 f0       	brcs	.+6      	; 0x2dac <__ultoa_invert+0x7c>
    2da6:	49 5d       	subi	r20, 0xD9	; 217
    2da8:	31 fd       	sbrc	r19, 1
    2daa:	40 52       	subi	r20, 0x20	; 32
    2dac:	41 93       	st	Z+, r20
    2dae:	02 d0       	rcall	.+4      	; 0x2db4 <__ultoa_invert+0x84>
    2db0:	a9 f7       	brne	.-22     	; 0x2d9c <__ultoa_invert+0x6c>
    2db2:	ea cf       	rjmp	.-44     	; 0x2d88 <__ultoa_invert+0x58>
    2db4:	b4 e0       	ldi	r27, 0x04	; 4
    2db6:	a6 95       	lsr	r26
    2db8:	97 95       	ror	r25
    2dba:	87 95       	ror	r24
    2dbc:	77 95       	ror	r23
    2dbe:	67 95       	ror	r22
    2dc0:	ba 95       	dec	r27
    2dc2:	c9 f7       	brne	.-14     	; 0x2db6 <__ultoa_invert+0x86>
    2dc4:	00 97       	sbiw	r24, 0x00	; 0
    2dc6:	61 05       	cpc	r22, r1
    2dc8:	71 05       	cpc	r23, r1
    2dca:	08 95       	ret
    2dcc:	9b 01       	movw	r18, r22
    2dce:	ac 01       	movw	r20, r24
    2dd0:	0a 2e       	mov	r0, r26
    2dd2:	06 94       	lsr	r0
    2dd4:	57 95       	ror	r21
    2dd6:	47 95       	ror	r20
    2dd8:	37 95       	ror	r19
    2dda:	27 95       	ror	r18
    2ddc:	ba 95       	dec	r27
    2dde:	c9 f7       	brne	.-14     	; 0x2dd2 <__ultoa_invert+0xa2>
    2de0:	62 0f       	add	r22, r18
    2de2:	73 1f       	adc	r23, r19
    2de4:	84 1f       	adc	r24, r20
    2de6:	95 1f       	adc	r25, r21
    2de8:	a0 1d       	adc	r26, r0
    2dea:	08 95       	ret

00002dec <__prologue_saves__>:
    2dec:	2f 92       	push	r2
    2dee:	3f 92       	push	r3
    2df0:	4f 92       	push	r4
    2df2:	5f 92       	push	r5
    2df4:	6f 92       	push	r6
    2df6:	7f 92       	push	r7
    2df8:	8f 92       	push	r8
    2dfa:	9f 92       	push	r9
    2dfc:	af 92       	push	r10
    2dfe:	bf 92       	push	r11
    2e00:	cf 92       	push	r12
    2e02:	df 92       	push	r13
    2e04:	ef 92       	push	r14
    2e06:	ff 92       	push	r15
    2e08:	0f 93       	push	r16
    2e0a:	1f 93       	push	r17
    2e0c:	cf 93       	push	r28
    2e0e:	df 93       	push	r29
    2e10:	cd b7       	in	r28, 0x3d	; 61
    2e12:	de b7       	in	r29, 0x3e	; 62
    2e14:	ca 1b       	sub	r28, r26
    2e16:	db 0b       	sbc	r29, r27
    2e18:	0f b6       	in	r0, 0x3f	; 63
    2e1a:	f8 94       	cli
    2e1c:	de bf       	out	0x3e, r29	; 62
    2e1e:	0f be       	out	0x3f, r0	; 63
    2e20:	cd bf       	out	0x3d, r28	; 61
    2e22:	09 94       	ijmp

00002e24 <__epilogue_restores__>:
    2e24:	2a 88       	ldd	r2, Y+18	; 0x12
    2e26:	39 88       	ldd	r3, Y+17	; 0x11
    2e28:	48 88       	ldd	r4, Y+16	; 0x10
    2e2a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e2c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e2e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e30:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e32:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e34:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e36:	b9 84       	ldd	r11, Y+9	; 0x09
    2e38:	c8 84       	ldd	r12, Y+8	; 0x08
    2e3a:	df 80       	ldd	r13, Y+7	; 0x07
    2e3c:	ee 80       	ldd	r14, Y+6	; 0x06
    2e3e:	fd 80       	ldd	r15, Y+5	; 0x05
    2e40:	0c 81       	ldd	r16, Y+4	; 0x04
    2e42:	1b 81       	ldd	r17, Y+3	; 0x03
    2e44:	aa 81       	ldd	r26, Y+2	; 0x02
    2e46:	b9 81       	ldd	r27, Y+1	; 0x01
    2e48:	ce 0f       	add	r28, r30
    2e4a:	d1 1d       	adc	r29, r1
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	f8 94       	cli
    2e50:	de bf       	out	0x3e, r29	; 62
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	cd bf       	out	0x3d, r28	; 61
    2e56:	ed 01       	movw	r28, r26
    2e58:	08 95       	ret

00002e5a <_exit>:
    2e5a:	f8 94       	cli

00002e5c <__stop_program>:
    2e5c:	ff cf       	rjmp	.-2      	; 0x2e5c <__stop_program>
